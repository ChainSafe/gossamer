// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	api "github.com/ChainSafe/gossamer/internal/client/api"
	blockchain "github.com/ChainSafe/gossamer/internal/primitives/blockchain"

	mock "github.com/stretchr/testify/mock"

	runtime "github.com/ChainSafe/gossamer/internal/primitives/runtime"
)

// Backend is an autogenerated mock type for the Backend type
type Backend[H runtime.Hash, N runtime.Number, Hasher runtime.Hasher[H]] struct {
	mock.Mock
}

type Backend_Expecter[H runtime.Hash, N runtime.Number, Hasher runtime.Hasher[H]] struct {
	mock *mock.Mock
}

func (_m *Backend[H, N, Hasher]) EXPECT() *Backend_Expecter[H, N, Hasher] {
	return &Backend_Expecter[H, N, Hasher]{mock: &_m.Mock}
}

// Blockchain provides a mock function with given fields:
func (_m *Backend[H, N, Hasher]) Blockchain() blockchain.Backend[H, N] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Blockchain")
	}

	var r0 blockchain.Backend[H, N]
	if rf, ok := ret.Get(0).(func() blockchain.Backend[H, N]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(blockchain.Backend[H, N])
		}
	}

	return r0
}

// Backend_Blockchain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Blockchain'
type Backend_Blockchain_Call[H runtime.Hash, N runtime.Number, Hasher runtime.Hasher[H]] struct {
	*mock.Call
}

// Blockchain is a helper method to define mock.On call
func (_e *Backend_Expecter[H, N, Hasher]) Blockchain() *Backend_Blockchain_Call[H, N, Hasher] {
	return &Backend_Blockchain_Call[H, N, Hasher]{Call: _e.mock.On("Blockchain")}
}

func (_c *Backend_Blockchain_Call[H, N, Hasher]) Run(run func()) *Backend_Blockchain_Call[H, N, Hasher] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Backend_Blockchain_Call[H, N, Hasher]) Return(_a0 blockchain.Backend[H, N]) *Backend_Blockchain_Call[H, N, Hasher] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_Blockchain_Call[H, N, Hasher]) RunAndReturn(run func() blockchain.Backend[H, N]) *Backend_Blockchain_Call[H, N, Hasher] {
	_c.Call.Return(run)
	return _c
}

// GetAux provides a mock function with given fields: key
func (_m *Backend[H, N, Hasher]) GetAux(key []byte) (*[]byte, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetAux")
	}

	var r0 *[]byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*[]byte, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func([]byte) *[]byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_GetAux_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAux'
type Backend_GetAux_Call[H runtime.Hash, N runtime.Number, Hasher runtime.Hasher[H]] struct {
	*mock.Call
}

// GetAux is a helper method to define mock.On call
//   - key []byte
func (_e *Backend_Expecter[H, N, Hasher]) GetAux(key interface{}) *Backend_GetAux_Call[H, N, Hasher] {
	return &Backend_GetAux_Call[H, N, Hasher]{Call: _e.mock.On("GetAux", key)}
}

func (_c *Backend_GetAux_Call[H, N, Hasher]) Run(run func(key []byte)) *Backend_GetAux_Call[H, N, Hasher] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Backend_GetAux_Call[H, N, Hasher]) Return(_a0 *[]byte, _a1 error) *Backend_GetAux_Call[H, N, Hasher] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_GetAux_Call[H, N, Hasher]) RunAndReturn(run func([]byte) (*[]byte, error)) *Backend_GetAux_Call[H, N, Hasher] {
	_c.Call.Return(run)
	return _c
}

// InsertAux provides a mock function with given fields: insert, delete
func (_m *Backend[H, N, Hasher]) InsertAux(insert []api.KeyValue, delete [][]byte) error {
	ret := _m.Called(insert, delete)

	if len(ret) == 0 {
		panic("no return value specified for InsertAux")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]api.KeyValue, [][]byte) error); ok {
		r0 = rf(insert, delete)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_InsertAux_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertAux'
type Backend_InsertAux_Call[H runtime.Hash, N runtime.Number, Hasher runtime.Hasher[H]] struct {
	*mock.Call
}

// InsertAux is a helper method to define mock.On call
//   - insert []api.KeyValue
//   - delete [][]byte
func (_e *Backend_Expecter[H, N, Hasher]) InsertAux(insert interface{}, delete interface{}) *Backend_InsertAux_Call[H, N, Hasher] {
	return &Backend_InsertAux_Call[H, N, Hasher]{Call: _e.mock.On("InsertAux", insert, delete)}
}

func (_c *Backend_InsertAux_Call[H, N, Hasher]) Run(run func(insert []api.KeyValue, delete [][]byte)) *Backend_InsertAux_Call[H, N, Hasher] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]api.KeyValue), args[1].([][]byte))
	})
	return _c
}

func (_c *Backend_InsertAux_Call[H, N, Hasher]) Return(_a0 error) *Backend_InsertAux_Call[H, N, Hasher] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_InsertAux_Call[H, N, Hasher]) RunAndReturn(run func([]api.KeyValue, [][]byte) error) *Backend_InsertAux_Call[H, N, Hasher] {
	_c.Call.Return(run)
	return _c
}

// NewBackend creates a new instance of Backend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackend[H runtime.Hash, N runtime.Number, Hasher runtime.Hasher[H]](t interface {
	mock.TestingT
	Cleanup(func())
}) *Backend[H, N, Hasher] {
	mock := &Backend[H, N, Hasher]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
