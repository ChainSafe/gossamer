// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	blockchain "github.com/ChainSafe/gossamer/internal/primitives/blockchain"
	generic "github.com/ChainSafe/gossamer/internal/primitives/runtime/generic"

	mock "github.com/stretchr/testify/mock"

	runtime "github.com/ChainSafe/gossamer/internal/primitives/runtime"
)

// BlockchainBackend is an autogenerated mock type for the Backend type
type BlockchainBackend[H runtime.Hash, N runtime.Number] struct {
	mock.Mock
}

type BlockchainBackend_Expecter[H runtime.Hash, N runtime.Number] struct {
	mock *mock.Mock
}

func (_m *BlockchainBackend[H, N]) EXPECT() *BlockchainBackend_Expecter[H, N] {
	return &BlockchainBackend_Expecter[H, N]{mock: &_m.Mock}
}

// BlockHashFromID provides a mock function with given fields: id
func (_m *BlockchainBackend[H, N]) BlockHashFromID(id generic.BlockID) (*H, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for BlockHashFromID")
	}

	var r0 *H
	var r1 error
	if rf, ok := ret.Get(0).(func(generic.BlockID) (*H, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(generic.BlockID) *H); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*H)
		}
	}

	if rf, ok := ret.Get(1).(func(generic.BlockID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_BlockHashFromID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockHashFromID'
type BlockchainBackend_BlockHashFromID_Call[H runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// BlockHashFromID is a helper method to define mock.On call
//   - id generic.BlockID
func (_e *BlockchainBackend_Expecter[H, N]) BlockHashFromID(id interface{}) *BlockchainBackend_BlockHashFromID_Call[H, N] {
	return &BlockchainBackend_BlockHashFromID_Call[H, N]{Call: _e.mock.On("BlockHashFromID", id)}
}

func (_c *BlockchainBackend_BlockHashFromID_Call[H, N]) Run(run func(id generic.BlockID)) *BlockchainBackend_BlockHashFromID_Call[H, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(generic.BlockID))
	})
	return _c
}

func (_c *BlockchainBackend_BlockHashFromID_Call[H, N]) Return(_a0 *H, _a1 error) *BlockchainBackend_BlockHashFromID_Call[H, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_BlockHashFromID_Call[H, N]) RunAndReturn(run func(generic.BlockID) (*H, error)) *BlockchainBackend_BlockHashFromID_Call[H, N] {
	_c.Call.Return(run)
	return _c
}

// BlockNumberFromID provides a mock function with given fields: id
func (_m *BlockchainBackend[H, N]) BlockNumberFromID(id generic.BlockID) (*N, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for BlockNumberFromID")
	}

	var r0 *N
	var r1 error
	if rf, ok := ret.Get(0).(func(generic.BlockID) (*N, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(generic.BlockID) *N); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*N)
		}
	}

	if rf, ok := ret.Get(1).(func(generic.BlockID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_BlockNumberFromID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockNumberFromID'
type BlockchainBackend_BlockNumberFromID_Call[H runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// BlockNumberFromID is a helper method to define mock.On call
//   - id generic.BlockID
func (_e *BlockchainBackend_Expecter[H, N]) BlockNumberFromID(id interface{}) *BlockchainBackend_BlockNumberFromID_Call[H, N] {
	return &BlockchainBackend_BlockNumberFromID_Call[H, N]{Call: _e.mock.On("BlockNumberFromID", id)}
}

func (_c *BlockchainBackend_BlockNumberFromID_Call[H, N]) Run(run func(id generic.BlockID)) *BlockchainBackend_BlockNumberFromID_Call[H, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(generic.BlockID))
	})
	return _c
}

func (_c *BlockchainBackend_BlockNumberFromID_Call[H, N]) Return(_a0 *N, _a1 error) *BlockchainBackend_BlockNumberFromID_Call[H, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_BlockNumberFromID_Call[H, N]) RunAndReturn(run func(generic.BlockID) (*N, error)) *BlockchainBackend_BlockNumberFromID_Call[H, N] {
	_c.Call.Return(run)
	return _c
}

// ExpectBlockHashFromID provides a mock function with given fields: id
func (_m *BlockchainBackend[H, N]) ExpectBlockHashFromID(id generic.BlockID) (H, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ExpectBlockHashFromID")
	}

	var r0 H
	var r1 error
	if rf, ok := ret.Get(0).(func(generic.BlockID) (H, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(generic.BlockID) H); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(H)
	}

	if rf, ok := ret.Get(1).(func(generic.BlockID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_ExpectBlockHashFromID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpectBlockHashFromID'
type BlockchainBackend_ExpectBlockHashFromID_Call[H runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// ExpectBlockHashFromID is a helper method to define mock.On call
//   - id generic.BlockID
func (_e *BlockchainBackend_Expecter[H, N]) ExpectBlockHashFromID(id interface{}) *BlockchainBackend_ExpectBlockHashFromID_Call[H, N] {
	return &BlockchainBackend_ExpectBlockHashFromID_Call[H, N]{Call: _e.mock.On("ExpectBlockHashFromID", id)}
}

func (_c *BlockchainBackend_ExpectBlockHashFromID_Call[H, N]) Run(run func(id generic.BlockID)) *BlockchainBackend_ExpectBlockHashFromID_Call[H, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(generic.BlockID))
	})
	return _c
}

func (_c *BlockchainBackend_ExpectBlockHashFromID_Call[H, N]) Return(_a0 H, _a1 error) *BlockchainBackend_ExpectBlockHashFromID_Call[H, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_ExpectBlockHashFromID_Call[H, N]) RunAndReturn(run func(generic.BlockID) (H, error)) *BlockchainBackend_ExpectBlockHashFromID_Call[H, N] {
	_c.Call.Return(run)
	return _c
}

// ExpectBlockNumberFromID provides a mock function with given fields: id
func (_m *BlockchainBackend[H, N]) ExpectBlockNumberFromID(id generic.BlockID) (N, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ExpectBlockNumberFromID")
	}

	var r0 N
	var r1 error
	if rf, ok := ret.Get(0).(func(generic.BlockID) (N, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(generic.BlockID) N); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(N)
	}

	if rf, ok := ret.Get(1).(func(generic.BlockID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_ExpectBlockNumberFromID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpectBlockNumberFromID'
type BlockchainBackend_ExpectBlockNumberFromID_Call[H runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// ExpectBlockNumberFromID is a helper method to define mock.On call
//   - id generic.BlockID
func (_e *BlockchainBackend_Expecter[H, N]) ExpectBlockNumberFromID(id interface{}) *BlockchainBackend_ExpectBlockNumberFromID_Call[H, N] {
	return &BlockchainBackend_ExpectBlockNumberFromID_Call[H, N]{Call: _e.mock.On("ExpectBlockNumberFromID", id)}
}

func (_c *BlockchainBackend_ExpectBlockNumberFromID_Call[H, N]) Run(run func(id generic.BlockID)) *BlockchainBackend_ExpectBlockNumberFromID_Call[H, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(generic.BlockID))
	})
	return _c
}

func (_c *BlockchainBackend_ExpectBlockNumberFromID_Call[H, N]) Return(_a0 N, _a1 error) *BlockchainBackend_ExpectBlockNumberFromID_Call[H, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_ExpectBlockNumberFromID_Call[H, N]) RunAndReturn(run func(generic.BlockID) (N, error)) *BlockchainBackend_ExpectBlockNumberFromID_Call[H, N] {
	_c.Call.Return(run)
	return _c
}

// ExpectHeader provides a mock function with given fields: hash
func (_m *BlockchainBackend[H, N]) ExpectHeader(hash H) (runtime.Header[N, H], error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for ExpectHeader")
	}

	var r0 runtime.Header[N, H]
	var r1 error
	if rf, ok := ret.Get(0).(func(H) (runtime.Header[N, H], error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(H) runtime.Header[N, H]); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Header[N, H])
		}
	}

	if rf, ok := ret.Get(1).(func(H) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_ExpectHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpectHeader'
type BlockchainBackend_ExpectHeader_Call[H runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// ExpectHeader is a helper method to define mock.On call
//   - hash H
func (_e *BlockchainBackend_Expecter[H, N]) ExpectHeader(hash interface{}) *BlockchainBackend_ExpectHeader_Call[H, N] {
	return &BlockchainBackend_ExpectHeader_Call[H, N]{Call: _e.mock.On("ExpectHeader", hash)}
}

func (_c *BlockchainBackend_ExpectHeader_Call[H, N]) Run(run func(hash H)) *BlockchainBackend_ExpectHeader_Call[H, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(H))
	})
	return _c
}

func (_c *BlockchainBackend_ExpectHeader_Call[H, N]) Return(_a0 runtime.Header[N, H], _a1 error) *BlockchainBackend_ExpectHeader_Call[H, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_ExpectHeader_Call[H, N]) RunAndReturn(run func(H) (runtime.Header[N, H], error)) *BlockchainBackend_ExpectHeader_Call[H, N] {
	_c.Call.Return(run)
	return _c
}

// Hash provides a mock function with given fields: number
func (_m *BlockchainBackend[H, N]) Hash(number N) (H, error) {
	ret := _m.Called(number)

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 H
	var r1 error
	if rf, ok := ret.Get(0).(func(N) (H, error)); ok {
		return rf(number)
	}
	if rf, ok := ret.Get(0).(func(N) H); ok {
		r0 = rf(number)
	} else {
		r0 = ret.Get(0).(H)
	}

	if rf, ok := ret.Get(1).(func(N) error); ok {
		r1 = rf(number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type BlockchainBackend_Hash_Call[H runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//   - number N
func (_e *BlockchainBackend_Expecter[H, N]) Hash(number interface{}) *BlockchainBackend_Hash_Call[H, N] {
	return &BlockchainBackend_Hash_Call[H, N]{Call: _e.mock.On("Hash", number)}
}

func (_c *BlockchainBackend_Hash_Call[H, N]) Run(run func(number N)) *BlockchainBackend_Hash_Call[H, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(N))
	})
	return _c
}

func (_c *BlockchainBackend_Hash_Call[H, N]) Return(_a0 H, _a1 error) *BlockchainBackend_Hash_Call[H, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_Hash_Call[H, N]) RunAndReturn(run func(N) (H, error)) *BlockchainBackend_Hash_Call[H, N] {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with given fields: hash
func (_m *BlockchainBackend[H, N]) Header(hash H) (*runtime.Header[N, H], error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 *runtime.Header[N, H]
	var r1 error
	if rf, ok := ret.Get(0).(func(H) (*runtime.Header[N, H], error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(H) *runtime.Header[N, H]); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.Header[N, H])
		}
	}

	if rf, ok := ret.Get(1).(func(H) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type BlockchainBackend_Header_Call[H runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
//   - hash H
func (_e *BlockchainBackend_Expecter[H, N]) Header(hash interface{}) *BlockchainBackend_Header_Call[H, N] {
	return &BlockchainBackend_Header_Call[H, N]{Call: _e.mock.On("Header", hash)}
}

func (_c *BlockchainBackend_Header_Call[H, N]) Run(run func(hash H)) *BlockchainBackend_Header_Call[H, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(H))
	})
	return _c
}

func (_c *BlockchainBackend_Header_Call[H, N]) Return(_a0 *runtime.Header[N, H], _a1 error) *BlockchainBackend_Header_Call[H, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_Header_Call[H, N]) RunAndReturn(run func(H) (*runtime.Header[N, H], error)) *BlockchainBackend_Header_Call[H, N] {
	_c.Call.Return(run)
	return _c
}

// HeaderMetadata provides a mock function with given fields:
func (_m *BlockchainBackend[H, N]) HeaderMetadata() {
	_m.Called()
}

// BlockchainBackend_HeaderMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeaderMetadata'
type BlockchainBackend_HeaderMetadata_Call[H runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// HeaderMetadata is a helper method to define mock.On call
func (_e *BlockchainBackend_Expecter[H, N]) HeaderMetadata() *BlockchainBackend_HeaderMetadata_Call[H, N] {
	return &BlockchainBackend_HeaderMetadata_Call[H, N]{Call: _e.mock.On("HeaderMetadata")}
}

func (_c *BlockchainBackend_HeaderMetadata_Call[H, N]) Run(run func()) *BlockchainBackend_HeaderMetadata_Call[H, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlockchainBackend_HeaderMetadata_Call[H, N]) Return() *BlockchainBackend_HeaderMetadata_Call[H, N] {
	_c.Call.Return()
	return _c
}

func (_c *BlockchainBackend_HeaderMetadata_Call[H, N]) RunAndReturn(run func()) *BlockchainBackend_HeaderMetadata_Call[H, N] {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields:
func (_m *BlockchainBackend[H, N]) Info() blockchain.Info[H, N] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 blockchain.Info[H, N]
	if rf, ok := ret.Get(0).(func() blockchain.Info[H, N]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(blockchain.Info[H, N])
	}

	return r0
}

// BlockchainBackend_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type BlockchainBackend_Info_Call[H runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
func (_e *BlockchainBackend_Expecter[H, N]) Info() *BlockchainBackend_Info_Call[H, N] {
	return &BlockchainBackend_Info_Call[H, N]{Call: _e.mock.On("Info")}
}

func (_c *BlockchainBackend_Info_Call[H, N]) Run(run func()) *BlockchainBackend_Info_Call[H, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlockchainBackend_Info_Call[H, N]) Return(_a0 blockchain.Info[H, N]) *BlockchainBackend_Info_Call[H, N] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockchainBackend_Info_Call[H, N]) RunAndReturn(run func() blockchain.Info[H, N]) *BlockchainBackend_Info_Call[H, N] {
	_c.Call.Return(run)
	return _c
}

// InsertHeaderMetadata provides a mock function with given fields: hash, headerMetadata
func (_m *BlockchainBackend[H, N]) InsertHeaderMetadata(hash H, headerMetadata blockchain.CachedHeaderMetadata[H, N]) {
	_m.Called(hash, headerMetadata)
}

// BlockchainBackend_InsertHeaderMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertHeaderMetadata'
type BlockchainBackend_InsertHeaderMetadata_Call[H runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// InsertHeaderMetadata is a helper method to define mock.On call
//   - hash H
//   - headerMetadata blockchain.CachedHeaderMetadata[H,N]
func (_e *BlockchainBackend_Expecter[H, N]) InsertHeaderMetadata(hash interface{}, headerMetadata interface{}) *BlockchainBackend_InsertHeaderMetadata_Call[H, N] {
	return &BlockchainBackend_InsertHeaderMetadata_Call[H, N]{Call: _e.mock.On("InsertHeaderMetadata", hash, headerMetadata)}
}

func (_c *BlockchainBackend_InsertHeaderMetadata_Call[H, N]) Run(run func(hash H, headerMetadata blockchain.CachedHeaderMetadata[H, N])) *BlockchainBackend_InsertHeaderMetadata_Call[H, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(H), args[1].(blockchain.CachedHeaderMetadata[H, N]))
	})
	return _c
}

func (_c *BlockchainBackend_InsertHeaderMetadata_Call[H, N]) Return() *BlockchainBackend_InsertHeaderMetadata_Call[H, N] {
	_c.Call.Return()
	return _c
}

func (_c *BlockchainBackend_InsertHeaderMetadata_Call[H, N]) RunAndReturn(run func(H, blockchain.CachedHeaderMetadata[H, N])) *BlockchainBackend_InsertHeaderMetadata_Call[H, N] {
	_c.Call.Return(run)
	return _c
}

// Justifications provides a mock function with given fields: hash
func (_m *BlockchainBackend[H, N]) Justifications(hash H) (*runtime.Justifications, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for Justifications")
	}

	var r0 *runtime.Justifications
	var r1 error
	if rf, ok := ret.Get(0).(func(H) (*runtime.Justifications, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(H) *runtime.Justifications); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.Justifications)
		}
	}

	if rf, ok := ret.Get(1).(func(H) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_Justifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Justifications'
type BlockchainBackend_Justifications_Call[H runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Justifications is a helper method to define mock.On call
//   - hash H
func (_e *BlockchainBackend_Expecter[H, N]) Justifications(hash interface{}) *BlockchainBackend_Justifications_Call[H, N] {
	return &BlockchainBackend_Justifications_Call[H, N]{Call: _e.mock.On("Justifications", hash)}
}

func (_c *BlockchainBackend_Justifications_Call[H, N]) Run(run func(hash H)) *BlockchainBackend_Justifications_Call[H, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(H))
	})
	return _c
}

func (_c *BlockchainBackend_Justifications_Call[H, N]) Return(_a0 *runtime.Justifications, _a1 error) *BlockchainBackend_Justifications_Call[H, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_Justifications_Call[H, N]) RunAndReturn(run func(H) (*runtime.Justifications, error)) *BlockchainBackend_Justifications_Call[H, N] {
	_c.Call.Return(run)
	return _c
}

// Number provides a mock function with given fields: hash
func (_m *BlockchainBackend[H, N]) Number(hash H) (N, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for Number")
	}

	var r0 N
	var r1 error
	if rf, ok := ret.Get(0).(func(H) (N, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(H) N); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(N)
	}

	if rf, ok := ret.Get(1).(func(H) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_Number_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Number'
type BlockchainBackend_Number_Call[H runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Number is a helper method to define mock.On call
//   - hash H
func (_e *BlockchainBackend_Expecter[H, N]) Number(hash interface{}) *BlockchainBackend_Number_Call[H, N] {
	return &BlockchainBackend_Number_Call[H, N]{Call: _e.mock.On("Number", hash)}
}

func (_c *BlockchainBackend_Number_Call[H, N]) Run(run func(hash H)) *BlockchainBackend_Number_Call[H, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(H))
	})
	return _c
}

func (_c *BlockchainBackend_Number_Call[H, N]) Return(_a0 N, _a1 error) *BlockchainBackend_Number_Call[H, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_Number_Call[H, N]) RunAndReturn(run func(H) (N, error)) *BlockchainBackend_Number_Call[H, N] {
	_c.Call.Return(run)
	return _c
}

// RemoveHeaderMetadata provides a mock function with given fields: hash
func (_m *BlockchainBackend[H, N]) RemoveHeaderMetadata(hash H) {
	_m.Called(hash)
}

// BlockchainBackend_RemoveHeaderMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveHeaderMetadata'
type BlockchainBackend_RemoveHeaderMetadata_Call[H runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// RemoveHeaderMetadata is a helper method to define mock.On call
//   - hash H
func (_e *BlockchainBackend_Expecter[H, N]) RemoveHeaderMetadata(hash interface{}) *BlockchainBackend_RemoveHeaderMetadata_Call[H, N] {
	return &BlockchainBackend_RemoveHeaderMetadata_Call[H, N]{Call: _e.mock.On("RemoveHeaderMetadata", hash)}
}

func (_c *BlockchainBackend_RemoveHeaderMetadata_Call[H, N]) Run(run func(hash H)) *BlockchainBackend_RemoveHeaderMetadata_Call[H, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(H))
	})
	return _c
}

func (_c *BlockchainBackend_RemoveHeaderMetadata_Call[H, N]) Return() *BlockchainBackend_RemoveHeaderMetadata_Call[H, N] {
	_c.Call.Return()
	return _c
}

func (_c *BlockchainBackend_RemoveHeaderMetadata_Call[H, N]) RunAndReturn(run func(H)) *BlockchainBackend_RemoveHeaderMetadata_Call[H, N] {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: hash
func (_m *BlockchainBackend[H, N]) Status(hash H) (blockchain.BlockStatus, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 blockchain.BlockStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(H) (blockchain.BlockStatus, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(H) blockchain.BlockStatus); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(blockchain.BlockStatus)
	}

	if rf, ok := ret.Get(1).(func(H) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type BlockchainBackend_Status_Call[H runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - hash H
func (_e *BlockchainBackend_Expecter[H, N]) Status(hash interface{}) *BlockchainBackend_Status_Call[H, N] {
	return &BlockchainBackend_Status_Call[H, N]{Call: _e.mock.On("Status", hash)}
}

func (_c *BlockchainBackend_Status_Call[H, N]) Run(run func(hash H)) *BlockchainBackend_Status_Call[H, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(H))
	})
	return _c
}

func (_c *BlockchainBackend_Status_Call[H, N]) Return(_a0 blockchain.BlockStatus, _a1 error) *BlockchainBackend_Status_Call[H, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_Status_Call[H, N]) RunAndReturn(run func(H) (blockchain.BlockStatus, error)) *BlockchainBackend_Status_Call[H, N] {
	_c.Call.Return(run)
	return _c
}

// NewBlockchainBackend creates a new instance of BlockchainBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockchainBackend[H runtime.Hash, N runtime.Number](t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockchainBackend[H, N] {
	mock := &BlockchainBackend[H, N]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
