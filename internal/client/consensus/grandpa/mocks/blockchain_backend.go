// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	blockchain "github.com/ChainSafe/gossamer/internal/primitives/blockchain"
	generic "github.com/ChainSafe/gossamer/internal/primitives/runtime/generic"

	mock "github.com/stretchr/testify/mock"

	runtime "github.com/ChainSafe/gossamer/internal/primitives/runtime"

	sync "sync"
)

// BlockchainBackend is an autogenerated mock type for the Backend type
type BlockchainBackend[Hash runtime.Hash, N runtime.Number] struct {
	mock.Mock
}

type BlockchainBackend_Expecter[Hash runtime.Hash, N runtime.Number] struct {
	mock *mock.Mock
}

func (_m *BlockchainBackend[Hash, N]) EXPECT() *BlockchainBackend_Expecter[Hash, N] {
	return &BlockchainBackend_Expecter[Hash, N]{mock: &_m.Mock}
}

// BlockHashFromID provides a mock function with given fields: id
func (_m *BlockchainBackend[Hash, N]) BlockHashFromID(id generic.BlockID) (*Hash, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for BlockHashFromID")
	}

	var r0 *Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(generic.BlockID) (*Hash, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(generic.BlockID) *Hash); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(generic.BlockID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_BlockHashFromID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockHashFromID'
type BlockchainBackend_BlockHashFromID_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// BlockHashFromID is a helper method to define mock.On call
//   - id generic.BlockID
func (_e *BlockchainBackend_Expecter[Hash, N]) BlockHashFromID(id interface{}) *BlockchainBackend_BlockHashFromID_Call[Hash, N] {
	return &BlockchainBackend_BlockHashFromID_Call[Hash, N]{Call: _e.mock.On("BlockHashFromID", id)}
}

func (_c *BlockchainBackend_BlockHashFromID_Call[Hash, N]) Run(run func(id generic.BlockID)) *BlockchainBackend_BlockHashFromID_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(generic.BlockID))
	})
	return _c
}

func (_c *BlockchainBackend_BlockHashFromID_Call[Hash, N]) Return(_a0 *Hash, _a1 error) *BlockchainBackend_BlockHashFromID_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_BlockHashFromID_Call[Hash, N]) RunAndReturn(run func(generic.BlockID) (*Hash, error)) *BlockchainBackend_BlockHashFromID_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// BlockIndexedBody provides a mock function with given fields: hash
func (_m *BlockchainBackend[Hash, N]) BlockIndexedBody(hash Hash) ([][]byte, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for BlockIndexedBody")
	}

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(Hash) ([][]byte, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(Hash) [][]byte); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_BlockIndexedBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockIndexedBody'
type BlockchainBackend_BlockIndexedBody_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// BlockIndexedBody is a helper method to define mock.On call
//   - hash Hash
func (_e *BlockchainBackend_Expecter[Hash, N]) BlockIndexedBody(hash interface{}) *BlockchainBackend_BlockIndexedBody_Call[Hash, N] {
	return &BlockchainBackend_BlockIndexedBody_Call[Hash, N]{Call: _e.mock.On("BlockIndexedBody", hash)}
}

func (_c *BlockchainBackend_BlockIndexedBody_Call[Hash, N]) Run(run func(hash Hash)) *BlockchainBackend_BlockIndexedBody_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Hash))
	})
	return _c
}

func (_c *BlockchainBackend_BlockIndexedBody_Call[Hash, N]) Return(_a0 [][]byte, _a1 error) *BlockchainBackend_BlockIndexedBody_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_BlockIndexedBody_Call[Hash, N]) RunAndReturn(run func(Hash) ([][]byte, error)) *BlockchainBackend_BlockIndexedBody_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// BlockNumberFromID provides a mock function with given fields: id
func (_m *BlockchainBackend[Hash, N]) BlockNumberFromID(id generic.BlockID) (*N, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for BlockNumberFromID")
	}

	var r0 *N
	var r1 error
	if rf, ok := ret.Get(0).(func(generic.BlockID) (*N, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(generic.BlockID) *N); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*N)
		}
	}

	if rf, ok := ret.Get(1).(func(generic.BlockID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_BlockNumberFromID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockNumberFromID'
type BlockchainBackend_BlockNumberFromID_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// BlockNumberFromID is a helper method to define mock.On call
//   - id generic.BlockID
func (_e *BlockchainBackend_Expecter[Hash, N]) BlockNumberFromID(id interface{}) *BlockchainBackend_BlockNumberFromID_Call[Hash, N] {
	return &BlockchainBackend_BlockNumberFromID_Call[Hash, N]{Call: _e.mock.On("BlockNumberFromID", id)}
}

func (_c *BlockchainBackend_BlockNumberFromID_Call[Hash, N]) Run(run func(id generic.BlockID)) *BlockchainBackend_BlockNumberFromID_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(generic.BlockID))
	})
	return _c
}

func (_c *BlockchainBackend_BlockNumberFromID_Call[Hash, N]) Return(_a0 *N, _a1 error) *BlockchainBackend_BlockNumberFromID_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_BlockNumberFromID_Call[Hash, N]) RunAndReturn(run func(generic.BlockID) (*N, error)) *BlockchainBackend_BlockNumberFromID_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// Body provides a mock function with given fields: hash
func (_m *BlockchainBackend[Hash, N]) Body(hash Hash) ([]runtime.Extrinsic, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for Body")
	}

	var r0 []runtime.Extrinsic
	var r1 error
	if rf, ok := ret.Get(0).(func(Hash) ([]runtime.Extrinsic, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(Hash) []runtime.Extrinsic); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]runtime.Extrinsic)
		}
	}

	if rf, ok := ret.Get(1).(func(Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_Body_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Body'
type BlockchainBackend_Body_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Body is a helper method to define mock.On call
//   - hash Hash
func (_e *BlockchainBackend_Expecter[Hash, N]) Body(hash interface{}) *BlockchainBackend_Body_Call[Hash, N] {
	return &BlockchainBackend_Body_Call[Hash, N]{Call: _e.mock.On("Body", hash)}
}

func (_c *BlockchainBackend_Body_Call[Hash, N]) Run(run func(hash Hash)) *BlockchainBackend_Body_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Hash))
	})
	return _c
}

func (_c *BlockchainBackend_Body_Call[Hash, N]) Return(_a0 []runtime.Extrinsic, _a1 error) *BlockchainBackend_Body_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_Body_Call[Hash, N]) RunAndReturn(run func(Hash) ([]runtime.Extrinsic, error)) *BlockchainBackend_Body_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// Children provides a mock function with given fields: parentHash
func (_m *BlockchainBackend[Hash, N]) Children(parentHash Hash) ([]Hash, error) {
	ret := _m.Called(parentHash)

	if len(ret) == 0 {
		panic("no return value specified for Children")
	}

	var r0 []Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(Hash) ([]Hash, error)); ok {
		return rf(parentHash)
	}
	if rf, ok := ret.Get(0).(func(Hash) []Hash); ok {
		r0 = rf(parentHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(Hash) error); ok {
		r1 = rf(parentHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_Children_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Children'
type BlockchainBackend_Children_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Children is a helper method to define mock.On call
//   - parentHash Hash
func (_e *BlockchainBackend_Expecter[Hash, N]) Children(parentHash interface{}) *BlockchainBackend_Children_Call[Hash, N] {
	return &BlockchainBackend_Children_Call[Hash, N]{Call: _e.mock.On("Children", parentHash)}
}

func (_c *BlockchainBackend_Children_Call[Hash, N]) Run(run func(parentHash Hash)) *BlockchainBackend_Children_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Hash))
	})
	return _c
}

func (_c *BlockchainBackend_Children_Call[Hash, N]) Return(_a0 []Hash, _a1 error) *BlockchainBackend_Children_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_Children_Call[Hash, N]) RunAndReturn(run func(Hash) ([]Hash, error)) *BlockchainBackend_Children_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// DisplacedLeavesAfterFinalizing provides a mock function with given fields: blockNumber
func (_m *BlockchainBackend[Hash, N]) DisplacedLeavesAfterFinalizing(blockNumber N) ([]Hash, error) {
	ret := _m.Called(blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for DisplacedLeavesAfterFinalizing")
	}

	var r0 []Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(N) ([]Hash, error)); ok {
		return rf(blockNumber)
	}
	if rf, ok := ret.Get(0).(func(N) []Hash); ok {
		r0 = rf(blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(N) error); ok {
		r1 = rf(blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_DisplacedLeavesAfterFinalizing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisplacedLeavesAfterFinalizing'
type BlockchainBackend_DisplacedLeavesAfterFinalizing_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// DisplacedLeavesAfterFinalizing is a helper method to define mock.On call
//   - blockNumber N
func (_e *BlockchainBackend_Expecter[Hash, N]) DisplacedLeavesAfterFinalizing(blockNumber interface{}) *BlockchainBackend_DisplacedLeavesAfterFinalizing_Call[Hash, N] {
	return &BlockchainBackend_DisplacedLeavesAfterFinalizing_Call[Hash, N]{Call: _e.mock.On("DisplacedLeavesAfterFinalizing", blockNumber)}
}

func (_c *BlockchainBackend_DisplacedLeavesAfterFinalizing_Call[Hash, N]) Run(run func(blockNumber N)) *BlockchainBackend_DisplacedLeavesAfterFinalizing_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(N))
	})
	return _c
}

func (_c *BlockchainBackend_DisplacedLeavesAfterFinalizing_Call[Hash, N]) Return(_a0 []Hash, _a1 error) *BlockchainBackend_DisplacedLeavesAfterFinalizing_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_DisplacedLeavesAfterFinalizing_Call[Hash, N]) RunAndReturn(run func(N) ([]Hash, error)) *BlockchainBackend_DisplacedLeavesAfterFinalizing_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// ExpectBlockHashFromID provides a mock function with given fields: id
func (_m *BlockchainBackend[Hash, N]) ExpectBlockHashFromID(id generic.BlockID) (Hash, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ExpectBlockHashFromID")
	}

	var r0 Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(generic.BlockID) (Hash, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(generic.BlockID) Hash); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(Hash)
	}

	if rf, ok := ret.Get(1).(func(generic.BlockID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_ExpectBlockHashFromID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpectBlockHashFromID'
type BlockchainBackend_ExpectBlockHashFromID_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// ExpectBlockHashFromID is a helper method to define mock.On call
//   - id generic.BlockID
func (_e *BlockchainBackend_Expecter[Hash, N]) ExpectBlockHashFromID(id interface{}) *BlockchainBackend_ExpectBlockHashFromID_Call[Hash, N] {
	return &BlockchainBackend_ExpectBlockHashFromID_Call[Hash, N]{Call: _e.mock.On("ExpectBlockHashFromID", id)}
}

func (_c *BlockchainBackend_ExpectBlockHashFromID_Call[Hash, N]) Run(run func(id generic.BlockID)) *BlockchainBackend_ExpectBlockHashFromID_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(generic.BlockID))
	})
	return _c
}

func (_c *BlockchainBackend_ExpectBlockHashFromID_Call[Hash, N]) Return(_a0 Hash, _a1 error) *BlockchainBackend_ExpectBlockHashFromID_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_ExpectBlockHashFromID_Call[Hash, N]) RunAndReturn(run func(generic.BlockID) (Hash, error)) *BlockchainBackend_ExpectBlockHashFromID_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// ExpectBlockNumberFromID provides a mock function with given fields: id
func (_m *BlockchainBackend[Hash, N]) ExpectBlockNumberFromID(id generic.BlockID) (N, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ExpectBlockNumberFromID")
	}

	var r0 N
	var r1 error
	if rf, ok := ret.Get(0).(func(generic.BlockID) (N, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(generic.BlockID) N); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(N)
	}

	if rf, ok := ret.Get(1).(func(generic.BlockID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_ExpectBlockNumberFromID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpectBlockNumberFromID'
type BlockchainBackend_ExpectBlockNumberFromID_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// ExpectBlockNumberFromID is a helper method to define mock.On call
//   - id generic.BlockID
func (_e *BlockchainBackend_Expecter[Hash, N]) ExpectBlockNumberFromID(id interface{}) *BlockchainBackend_ExpectBlockNumberFromID_Call[Hash, N] {
	return &BlockchainBackend_ExpectBlockNumberFromID_Call[Hash, N]{Call: _e.mock.On("ExpectBlockNumberFromID", id)}
}

func (_c *BlockchainBackend_ExpectBlockNumberFromID_Call[Hash, N]) Run(run func(id generic.BlockID)) *BlockchainBackend_ExpectBlockNumberFromID_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(generic.BlockID))
	})
	return _c
}

func (_c *BlockchainBackend_ExpectBlockNumberFromID_Call[Hash, N]) Return(_a0 N, _a1 error) *BlockchainBackend_ExpectBlockNumberFromID_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_ExpectBlockNumberFromID_Call[Hash, N]) RunAndReturn(run func(generic.BlockID) (N, error)) *BlockchainBackend_ExpectBlockNumberFromID_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// ExpectHeader provides a mock function with given fields: hash
func (_m *BlockchainBackend[Hash, N]) ExpectHeader(hash Hash) (runtime.Header[N, Hash], error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for ExpectHeader")
	}

	var r0 runtime.Header[N, Hash]
	var r1 error
	if rf, ok := ret.Get(0).(func(Hash) (runtime.Header[N, Hash], error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(Hash) runtime.Header[N, Hash]); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Header[N, Hash])
		}
	}

	if rf, ok := ret.Get(1).(func(Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_ExpectHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpectHeader'
type BlockchainBackend_ExpectHeader_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// ExpectHeader is a helper method to define mock.On call
//   - hash Hash
func (_e *BlockchainBackend_Expecter[Hash, N]) ExpectHeader(hash interface{}) *BlockchainBackend_ExpectHeader_Call[Hash, N] {
	return &BlockchainBackend_ExpectHeader_Call[Hash, N]{Call: _e.mock.On("ExpectHeader", hash)}
}

func (_c *BlockchainBackend_ExpectHeader_Call[Hash, N]) Run(run func(hash Hash)) *BlockchainBackend_ExpectHeader_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Hash))
	})
	return _c
}

func (_c *BlockchainBackend_ExpectHeader_Call[Hash, N]) Return(_a0 runtime.Header[N, Hash], _a1 error) *BlockchainBackend_ExpectHeader_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_ExpectHeader_Call[Hash, N]) RunAndReturn(run func(Hash) (runtime.Header[N, Hash], error)) *BlockchainBackend_ExpectHeader_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// HasIndexedTransaction provides a mock function with given fields: hash
func (_m *BlockchainBackend[Hash, N]) HasIndexedTransaction(hash Hash) (bool, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for HasIndexedTransaction")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(Hash) (bool, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(Hash) bool); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_HasIndexedTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasIndexedTransaction'
type BlockchainBackend_HasIndexedTransaction_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// HasIndexedTransaction is a helper method to define mock.On call
//   - hash Hash
func (_e *BlockchainBackend_Expecter[Hash, N]) HasIndexedTransaction(hash interface{}) *BlockchainBackend_HasIndexedTransaction_Call[Hash, N] {
	return &BlockchainBackend_HasIndexedTransaction_Call[Hash, N]{Call: _e.mock.On("HasIndexedTransaction", hash)}
}

func (_c *BlockchainBackend_HasIndexedTransaction_Call[Hash, N]) Run(run func(hash Hash)) *BlockchainBackend_HasIndexedTransaction_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Hash))
	})
	return _c
}

func (_c *BlockchainBackend_HasIndexedTransaction_Call[Hash, N]) Return(_a0 bool, _a1 error) *BlockchainBackend_HasIndexedTransaction_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_HasIndexedTransaction_Call[Hash, N]) RunAndReturn(run func(Hash) (bool, error)) *BlockchainBackend_HasIndexedTransaction_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// Hash provides a mock function with given fields: number
func (_m *BlockchainBackend[Hash, N]) Hash(number N) (*Hash, error) {
	ret := _m.Called(number)

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 *Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(N) (*Hash, error)); ok {
		return rf(number)
	}
	if rf, ok := ret.Get(0).(func(N) *Hash); ok {
		r0 = rf(number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(N) error); ok {
		r1 = rf(number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type BlockchainBackend_Hash_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//   - number N
func (_e *BlockchainBackend_Expecter[Hash, N]) Hash(number interface{}) *BlockchainBackend_Hash_Call[Hash, N] {
	return &BlockchainBackend_Hash_Call[Hash, N]{Call: _e.mock.On("Hash", number)}
}

func (_c *BlockchainBackend_Hash_Call[Hash, N]) Run(run func(number N)) *BlockchainBackend_Hash_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(N))
	})
	return _c
}

func (_c *BlockchainBackend_Hash_Call[Hash, N]) Return(_a0 *Hash, _a1 error) *BlockchainBackend_Hash_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_Hash_Call[Hash, N]) RunAndReturn(run func(N) (*Hash, error)) *BlockchainBackend_Hash_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with given fields: hash
func (_m *BlockchainBackend[Hash, N]) Header(hash Hash) (runtime.Header[N, Hash], error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 runtime.Header[N, Hash]
	var r1 error
	if rf, ok := ret.Get(0).(func(Hash) (runtime.Header[N, Hash], error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(Hash) runtime.Header[N, Hash]); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Header[N, Hash])
		}
	}

	if rf, ok := ret.Get(1).(func(Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type BlockchainBackend_Header_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
//   - hash Hash
func (_e *BlockchainBackend_Expecter[Hash, N]) Header(hash interface{}) *BlockchainBackend_Header_Call[Hash, N] {
	return &BlockchainBackend_Header_Call[Hash, N]{Call: _e.mock.On("Header", hash)}
}

func (_c *BlockchainBackend_Header_Call[Hash, N]) Run(run func(hash Hash)) *BlockchainBackend_Header_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Hash))
	})
	return _c
}

func (_c *BlockchainBackend_Header_Call[Hash, N]) Return(_a0 runtime.Header[N, Hash], _a1 error) *BlockchainBackend_Header_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_Header_Call[Hash, N]) RunAndReturn(run func(Hash) (runtime.Header[N, Hash], error)) *BlockchainBackend_Header_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// IndexedTransaction provides a mock function with given fields: hash
func (_m *BlockchainBackend[Hash, N]) IndexedTransaction(hash Hash) ([]byte, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for IndexedTransaction")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(Hash) ([]byte, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(Hash) []byte); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_IndexedTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexedTransaction'
type BlockchainBackend_IndexedTransaction_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// IndexedTransaction is a helper method to define mock.On call
//   - hash Hash
func (_e *BlockchainBackend_Expecter[Hash, N]) IndexedTransaction(hash interface{}) *BlockchainBackend_IndexedTransaction_Call[Hash, N] {
	return &BlockchainBackend_IndexedTransaction_Call[Hash, N]{Call: _e.mock.On("IndexedTransaction", hash)}
}

func (_c *BlockchainBackend_IndexedTransaction_Call[Hash, N]) Run(run func(hash Hash)) *BlockchainBackend_IndexedTransaction_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Hash))
	})
	return _c
}

func (_c *BlockchainBackend_IndexedTransaction_Call[Hash, N]) Return(_a0 []byte, _a1 error) *BlockchainBackend_IndexedTransaction_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_IndexedTransaction_Call[Hash, N]) RunAndReturn(run func(Hash) ([]byte, error)) *BlockchainBackend_IndexedTransaction_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields:
func (_m *BlockchainBackend[Hash, N]) Info() blockchain.Info[Hash, N] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 blockchain.Info[Hash, N]
	if rf, ok := ret.Get(0).(func() blockchain.Info[Hash, N]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(blockchain.Info[Hash, N])
	}

	return r0
}

// BlockchainBackend_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type BlockchainBackend_Info_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
func (_e *BlockchainBackend_Expecter[Hash, N]) Info() *BlockchainBackend_Info_Call[Hash, N] {
	return &BlockchainBackend_Info_Call[Hash, N]{Call: _e.mock.On("Info")}
}

func (_c *BlockchainBackend_Info_Call[Hash, N]) Run(run func()) *BlockchainBackend_Info_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlockchainBackend_Info_Call[Hash, N]) Return(_a0 blockchain.Info[Hash, N]) *BlockchainBackend_Info_Call[Hash, N] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockchainBackend_Info_Call[Hash, N]) RunAndReturn(run func() blockchain.Info[Hash, N]) *BlockchainBackend_Info_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// Justifications provides a mock function with given fields: hash
func (_m *BlockchainBackend[Hash, N]) Justifications(hash Hash) (runtime.Justifications, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for Justifications")
	}

	var r0 runtime.Justifications
	var r1 error
	if rf, ok := ret.Get(0).(func(Hash) (runtime.Justifications, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(Hash) runtime.Justifications); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Justifications)
		}
	}

	if rf, ok := ret.Get(1).(func(Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_Justifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Justifications'
type BlockchainBackend_Justifications_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Justifications is a helper method to define mock.On call
//   - hash Hash
func (_e *BlockchainBackend_Expecter[Hash, N]) Justifications(hash interface{}) *BlockchainBackend_Justifications_Call[Hash, N] {
	return &BlockchainBackend_Justifications_Call[Hash, N]{Call: _e.mock.On("Justifications", hash)}
}

func (_c *BlockchainBackend_Justifications_Call[Hash, N]) Run(run func(hash Hash)) *BlockchainBackend_Justifications_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Hash))
	})
	return _c
}

func (_c *BlockchainBackend_Justifications_Call[Hash, N]) Return(_a0 runtime.Justifications, _a1 error) *BlockchainBackend_Justifications_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_Justifications_Call[Hash, N]) RunAndReturn(run func(Hash) (runtime.Justifications, error)) *BlockchainBackend_Justifications_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// LastFinalized provides a mock function with given fields:
func (_m *BlockchainBackend[Hash, N]) LastFinalized() (Hash, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastFinalized")
	}

	var r0 Hash
	var r1 error
	if rf, ok := ret.Get(0).(func() (Hash, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() Hash); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Hash)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_LastFinalized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastFinalized'
type BlockchainBackend_LastFinalized_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// LastFinalized is a helper method to define mock.On call
func (_e *BlockchainBackend_Expecter[Hash, N]) LastFinalized() *BlockchainBackend_LastFinalized_Call[Hash, N] {
	return &BlockchainBackend_LastFinalized_Call[Hash, N]{Call: _e.mock.On("LastFinalized")}
}

func (_c *BlockchainBackend_LastFinalized_Call[Hash, N]) Run(run func()) *BlockchainBackend_LastFinalized_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlockchainBackend_LastFinalized_Call[Hash, N]) Return(_a0 Hash, _a1 error) *BlockchainBackend_LastFinalized_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_LastFinalized_Call[Hash, N]) RunAndReturn(run func() (Hash, error)) *BlockchainBackend_LastFinalized_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// Leaves provides a mock function with given fields:
func (_m *BlockchainBackend[Hash, N]) Leaves() ([]Hash, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Leaves")
	}

	var r0 []Hash
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Hash, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Hash)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_Leaves_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Leaves'
type BlockchainBackend_Leaves_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Leaves is a helper method to define mock.On call
func (_e *BlockchainBackend_Expecter[Hash, N]) Leaves() *BlockchainBackend_Leaves_Call[Hash, N] {
	return &BlockchainBackend_Leaves_Call[Hash, N]{Call: _e.mock.On("Leaves")}
}

func (_c *BlockchainBackend_Leaves_Call[Hash, N]) Run(run func()) *BlockchainBackend_Leaves_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlockchainBackend_Leaves_Call[Hash, N]) Return(_a0 []Hash, _a1 error) *BlockchainBackend_Leaves_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_Leaves_Call[Hash, N]) RunAndReturn(run func() ([]Hash, error)) *BlockchainBackend_Leaves_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// LongestContaining provides a mock function with given fields: baseHash, importLock
func (_m *BlockchainBackend[Hash, N]) LongestContaining(baseHash Hash, importLock *sync.RWMutex) (*Hash, error) {
	ret := _m.Called(baseHash, importLock)

	if len(ret) == 0 {
		panic("no return value specified for LongestContaining")
	}

	var r0 *Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(Hash, *sync.RWMutex) (*Hash, error)); ok {
		return rf(baseHash, importLock)
	}
	if rf, ok := ret.Get(0).(func(Hash, *sync.RWMutex) *Hash); ok {
		r0 = rf(baseHash, importLock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(Hash, *sync.RWMutex) error); ok {
		r1 = rf(baseHash, importLock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_LongestContaining_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LongestContaining'
type BlockchainBackend_LongestContaining_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// LongestContaining is a helper method to define mock.On call
//   - baseHash Hash
//   - importLock *sync.RWMutex
func (_e *BlockchainBackend_Expecter[Hash, N]) LongestContaining(baseHash interface{}, importLock interface{}) *BlockchainBackend_LongestContaining_Call[Hash, N] {
	return &BlockchainBackend_LongestContaining_Call[Hash, N]{Call: _e.mock.On("LongestContaining", baseHash, importLock)}
}

func (_c *BlockchainBackend_LongestContaining_Call[Hash, N]) Run(run func(baseHash Hash, importLock *sync.RWMutex)) *BlockchainBackend_LongestContaining_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Hash), args[1].(*sync.RWMutex))
	})
	return _c
}

func (_c *BlockchainBackend_LongestContaining_Call[Hash, N]) Return(_a0 *Hash, _a1 error) *BlockchainBackend_LongestContaining_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_LongestContaining_Call[Hash, N]) RunAndReturn(run func(Hash, *sync.RWMutex) (*Hash, error)) *BlockchainBackend_LongestContaining_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// Number provides a mock function with given fields: hash
func (_m *BlockchainBackend[Hash, N]) Number(hash Hash) (*N, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for Number")
	}

	var r0 *N
	var r1 error
	if rf, ok := ret.Get(0).(func(Hash) (*N, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(Hash) *N); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*N)
		}
	}

	if rf, ok := ret.Get(1).(func(Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_Number_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Number'
type BlockchainBackend_Number_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Number is a helper method to define mock.On call
//   - hash Hash
func (_e *BlockchainBackend_Expecter[Hash, N]) Number(hash interface{}) *BlockchainBackend_Number_Call[Hash, N] {
	return &BlockchainBackend_Number_Call[Hash, N]{Call: _e.mock.On("Number", hash)}
}

func (_c *BlockchainBackend_Number_Call[Hash, N]) Run(run func(hash Hash)) *BlockchainBackend_Number_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Hash))
	})
	return _c
}

func (_c *BlockchainBackend_Number_Call[Hash, N]) Return(_a0 *N, _a1 error) *BlockchainBackend_Number_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_Number_Call[Hash, N]) RunAndReturn(run func(Hash) (*N, error)) *BlockchainBackend_Number_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: hash
func (_m *BlockchainBackend[Hash, N]) Status(hash Hash) (blockchain.BlockStatus, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 blockchain.BlockStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(Hash) (blockchain.BlockStatus, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(Hash) blockchain.BlockStatus); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(blockchain.BlockStatus)
	}

	if rf, ok := ret.Get(1).(func(Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainBackend_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type BlockchainBackend_Status_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - hash Hash
func (_e *BlockchainBackend_Expecter[Hash, N]) Status(hash interface{}) *BlockchainBackend_Status_Call[Hash, N] {
	return &BlockchainBackend_Status_Call[Hash, N]{Call: _e.mock.On("Status", hash)}
}

func (_c *BlockchainBackend_Status_Call[Hash, N]) Run(run func(hash Hash)) *BlockchainBackend_Status_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Hash))
	})
	return _c
}

func (_c *BlockchainBackend_Status_Call[Hash, N]) Return(_a0 blockchain.BlockStatus, _a1 error) *BlockchainBackend_Status_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainBackend_Status_Call[Hash, N]) RunAndReturn(run func(Hash) (blockchain.BlockStatus, error)) *BlockchainBackend_Status_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// NewBlockchainBackend creates a new instance of BlockchainBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockchainBackend[Hash runtime.Hash, N runtime.Number](t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockchainBackend[Hash, N] {
	mock := &BlockchainBackend[Hash, N]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
