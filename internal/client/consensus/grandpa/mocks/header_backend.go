// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	blockchain "github.com/ChainSafe/gossamer/internal/primitives/blockchain"
	generic "github.com/ChainSafe/gossamer/internal/primitives/runtime/generic"

	mock "github.com/stretchr/testify/mock"

	runtime "github.com/ChainSafe/gossamer/internal/primitives/runtime"
)

// HeaderBackend is an autogenerated mock type for the HeaderBackend type
type HeaderBackend[Hash runtime.Hash, N runtime.Number] struct {
	mock.Mock
}

type HeaderBackend_Expecter[Hash runtime.Hash, N runtime.Number] struct {
	mock *mock.Mock
}

func (_m *HeaderBackend[Hash, N]) EXPECT() *HeaderBackend_Expecter[Hash, N] {
	return &HeaderBackend_Expecter[Hash, N]{mock: &_m.Mock}
}

// BlockHashFromID provides a mock function with given fields: id
func (_m *HeaderBackend[Hash, N]) BlockHashFromID(id generic.BlockID) (*Hash, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for BlockHashFromID")
	}

	var r0 *Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(generic.BlockID) (*Hash, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(generic.BlockID) *Hash); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(generic.BlockID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeaderBackend_BlockHashFromID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockHashFromID'
type HeaderBackend_BlockHashFromID_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// BlockHashFromID is a helper method to define mock.On call
//   - id generic.BlockID
func (_e *HeaderBackend_Expecter[Hash, N]) BlockHashFromID(id interface{}) *HeaderBackend_BlockHashFromID_Call[Hash, N] {
	return &HeaderBackend_BlockHashFromID_Call[Hash, N]{Call: _e.mock.On("BlockHashFromID", id)}
}

func (_c *HeaderBackend_BlockHashFromID_Call[Hash, N]) Run(run func(id generic.BlockID)) *HeaderBackend_BlockHashFromID_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(generic.BlockID))
	})
	return _c
}

func (_c *HeaderBackend_BlockHashFromID_Call[Hash, N]) Return(_a0 *Hash, _a1 error) *HeaderBackend_BlockHashFromID_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HeaderBackend_BlockHashFromID_Call[Hash, N]) RunAndReturn(run func(generic.BlockID) (*Hash, error)) *HeaderBackend_BlockHashFromID_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// BlockNumberFromID provides a mock function with given fields: id
func (_m *HeaderBackend[Hash, N]) BlockNumberFromID(id generic.BlockID) (*N, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for BlockNumberFromID")
	}

	var r0 *N
	var r1 error
	if rf, ok := ret.Get(0).(func(generic.BlockID) (*N, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(generic.BlockID) *N); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*N)
		}
	}

	if rf, ok := ret.Get(1).(func(generic.BlockID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeaderBackend_BlockNumberFromID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockNumberFromID'
type HeaderBackend_BlockNumberFromID_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// BlockNumberFromID is a helper method to define mock.On call
//   - id generic.BlockID
func (_e *HeaderBackend_Expecter[Hash, N]) BlockNumberFromID(id interface{}) *HeaderBackend_BlockNumberFromID_Call[Hash, N] {
	return &HeaderBackend_BlockNumberFromID_Call[Hash, N]{Call: _e.mock.On("BlockNumberFromID", id)}
}

func (_c *HeaderBackend_BlockNumberFromID_Call[Hash, N]) Run(run func(id generic.BlockID)) *HeaderBackend_BlockNumberFromID_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(generic.BlockID))
	})
	return _c
}

func (_c *HeaderBackend_BlockNumberFromID_Call[Hash, N]) Return(_a0 *N, _a1 error) *HeaderBackend_BlockNumberFromID_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HeaderBackend_BlockNumberFromID_Call[Hash, N]) RunAndReturn(run func(generic.BlockID) (*N, error)) *HeaderBackend_BlockNumberFromID_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// ExpectBlockHashFromID provides a mock function with given fields: id
func (_m *HeaderBackend[Hash, N]) ExpectBlockHashFromID(id generic.BlockID) (Hash, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ExpectBlockHashFromID")
	}

	var r0 Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(generic.BlockID) (Hash, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(generic.BlockID) Hash); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(Hash)
	}

	if rf, ok := ret.Get(1).(func(generic.BlockID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeaderBackend_ExpectBlockHashFromID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpectBlockHashFromID'
type HeaderBackend_ExpectBlockHashFromID_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// ExpectBlockHashFromID is a helper method to define mock.On call
//   - id generic.BlockID
func (_e *HeaderBackend_Expecter[Hash, N]) ExpectBlockHashFromID(id interface{}) *HeaderBackend_ExpectBlockHashFromID_Call[Hash, N] {
	return &HeaderBackend_ExpectBlockHashFromID_Call[Hash, N]{Call: _e.mock.On("ExpectBlockHashFromID", id)}
}

func (_c *HeaderBackend_ExpectBlockHashFromID_Call[Hash, N]) Run(run func(id generic.BlockID)) *HeaderBackend_ExpectBlockHashFromID_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(generic.BlockID))
	})
	return _c
}

func (_c *HeaderBackend_ExpectBlockHashFromID_Call[Hash, N]) Return(_a0 Hash, _a1 error) *HeaderBackend_ExpectBlockHashFromID_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HeaderBackend_ExpectBlockHashFromID_Call[Hash, N]) RunAndReturn(run func(generic.BlockID) (Hash, error)) *HeaderBackend_ExpectBlockHashFromID_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// ExpectBlockNumberFromID provides a mock function with given fields: id
func (_m *HeaderBackend[Hash, N]) ExpectBlockNumberFromID(id generic.BlockID) (N, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ExpectBlockNumberFromID")
	}

	var r0 N
	var r1 error
	if rf, ok := ret.Get(0).(func(generic.BlockID) (N, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(generic.BlockID) N); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(N)
	}

	if rf, ok := ret.Get(1).(func(generic.BlockID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeaderBackend_ExpectBlockNumberFromID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpectBlockNumberFromID'
type HeaderBackend_ExpectBlockNumberFromID_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// ExpectBlockNumberFromID is a helper method to define mock.On call
//   - id generic.BlockID
func (_e *HeaderBackend_Expecter[Hash, N]) ExpectBlockNumberFromID(id interface{}) *HeaderBackend_ExpectBlockNumberFromID_Call[Hash, N] {
	return &HeaderBackend_ExpectBlockNumberFromID_Call[Hash, N]{Call: _e.mock.On("ExpectBlockNumberFromID", id)}
}

func (_c *HeaderBackend_ExpectBlockNumberFromID_Call[Hash, N]) Run(run func(id generic.BlockID)) *HeaderBackend_ExpectBlockNumberFromID_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(generic.BlockID))
	})
	return _c
}

func (_c *HeaderBackend_ExpectBlockNumberFromID_Call[Hash, N]) Return(_a0 N, _a1 error) *HeaderBackend_ExpectBlockNumberFromID_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HeaderBackend_ExpectBlockNumberFromID_Call[Hash, N]) RunAndReturn(run func(generic.BlockID) (N, error)) *HeaderBackend_ExpectBlockNumberFromID_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// ExpectHeader provides a mock function with given fields: hash
func (_m *HeaderBackend[Hash, N]) ExpectHeader(hash Hash) (runtime.Header[N, Hash], error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for ExpectHeader")
	}

	var r0 runtime.Header[N, Hash]
	var r1 error
	if rf, ok := ret.Get(0).(func(Hash) (runtime.Header[N, Hash], error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(Hash) runtime.Header[N, Hash]); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Header[N, Hash])
		}
	}

	if rf, ok := ret.Get(1).(func(Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeaderBackend_ExpectHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpectHeader'
type HeaderBackend_ExpectHeader_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// ExpectHeader is a helper method to define mock.On call
//   - hash Hash
func (_e *HeaderBackend_Expecter[Hash, N]) ExpectHeader(hash interface{}) *HeaderBackend_ExpectHeader_Call[Hash, N] {
	return &HeaderBackend_ExpectHeader_Call[Hash, N]{Call: _e.mock.On("ExpectHeader", hash)}
}

func (_c *HeaderBackend_ExpectHeader_Call[Hash, N]) Run(run func(hash Hash)) *HeaderBackend_ExpectHeader_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Hash))
	})
	return _c
}

func (_c *HeaderBackend_ExpectHeader_Call[Hash, N]) Return(_a0 runtime.Header[N, Hash], _a1 error) *HeaderBackend_ExpectHeader_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HeaderBackend_ExpectHeader_Call[Hash, N]) RunAndReturn(run func(Hash) (runtime.Header[N, Hash], error)) *HeaderBackend_ExpectHeader_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// Hash provides a mock function with given fields: number
func (_m *HeaderBackend[Hash, N]) Hash(number N) (*Hash, error) {
	ret := _m.Called(number)

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 *Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(N) (*Hash, error)); ok {
		return rf(number)
	}
	if rf, ok := ret.Get(0).(func(N) *Hash); ok {
		r0 = rf(number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(N) error); ok {
		r1 = rf(number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeaderBackend_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type HeaderBackend_Hash_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//   - number N
func (_e *HeaderBackend_Expecter[Hash, N]) Hash(number interface{}) *HeaderBackend_Hash_Call[Hash, N] {
	return &HeaderBackend_Hash_Call[Hash, N]{Call: _e.mock.On("Hash", number)}
}

func (_c *HeaderBackend_Hash_Call[Hash, N]) Run(run func(number N)) *HeaderBackend_Hash_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(N))
	})
	return _c
}

func (_c *HeaderBackend_Hash_Call[Hash, N]) Return(_a0 *Hash, _a1 error) *HeaderBackend_Hash_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HeaderBackend_Hash_Call[Hash, N]) RunAndReturn(run func(N) (*Hash, error)) *HeaderBackend_Hash_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with given fields: hash
func (_m *HeaderBackend[Hash, N]) Header(hash Hash) (runtime.Header[N, Hash], error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 runtime.Header[N, Hash]
	var r1 error
	if rf, ok := ret.Get(0).(func(Hash) (runtime.Header[N, Hash], error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(Hash) runtime.Header[N, Hash]); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Header[N, Hash])
		}
	}

	if rf, ok := ret.Get(1).(func(Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeaderBackend_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type HeaderBackend_Header_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
//   - hash Hash
func (_e *HeaderBackend_Expecter[Hash, N]) Header(hash interface{}) *HeaderBackend_Header_Call[Hash, N] {
	return &HeaderBackend_Header_Call[Hash, N]{Call: _e.mock.On("Header", hash)}
}

func (_c *HeaderBackend_Header_Call[Hash, N]) Run(run func(hash Hash)) *HeaderBackend_Header_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Hash))
	})
	return _c
}

func (_c *HeaderBackend_Header_Call[Hash, N]) Return(_a0 runtime.Header[N, Hash], _a1 error) *HeaderBackend_Header_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HeaderBackend_Header_Call[Hash, N]) RunAndReturn(run func(Hash) (runtime.Header[N, Hash], error)) *HeaderBackend_Header_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields:
func (_m *HeaderBackend[Hash, N]) Info() blockchain.Info[Hash, N] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 blockchain.Info[Hash, N]
	if rf, ok := ret.Get(0).(func() blockchain.Info[Hash, N]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(blockchain.Info[Hash, N])
	}

	return r0
}

// HeaderBackend_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type HeaderBackend_Info_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
func (_e *HeaderBackend_Expecter[Hash, N]) Info() *HeaderBackend_Info_Call[Hash, N] {
	return &HeaderBackend_Info_Call[Hash, N]{Call: _e.mock.On("Info")}
}

func (_c *HeaderBackend_Info_Call[Hash, N]) Run(run func()) *HeaderBackend_Info_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HeaderBackend_Info_Call[Hash, N]) Return(_a0 blockchain.Info[Hash, N]) *HeaderBackend_Info_Call[Hash, N] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HeaderBackend_Info_Call[Hash, N]) RunAndReturn(run func() blockchain.Info[Hash, N]) *HeaderBackend_Info_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// Number provides a mock function with given fields: hash
func (_m *HeaderBackend[Hash, N]) Number(hash Hash) (*N, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for Number")
	}

	var r0 *N
	var r1 error
	if rf, ok := ret.Get(0).(func(Hash) (*N, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(Hash) *N); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*N)
		}
	}

	if rf, ok := ret.Get(1).(func(Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeaderBackend_Number_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Number'
type HeaderBackend_Number_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Number is a helper method to define mock.On call
//   - hash Hash
func (_e *HeaderBackend_Expecter[Hash, N]) Number(hash interface{}) *HeaderBackend_Number_Call[Hash, N] {
	return &HeaderBackend_Number_Call[Hash, N]{Call: _e.mock.On("Number", hash)}
}

func (_c *HeaderBackend_Number_Call[Hash, N]) Run(run func(hash Hash)) *HeaderBackend_Number_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Hash))
	})
	return _c
}

func (_c *HeaderBackend_Number_Call[Hash, N]) Return(_a0 *N, _a1 error) *HeaderBackend_Number_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HeaderBackend_Number_Call[Hash, N]) RunAndReturn(run func(Hash) (*N, error)) *HeaderBackend_Number_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: hash
func (_m *HeaderBackend[Hash, N]) Status(hash Hash) (blockchain.BlockStatus, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 blockchain.BlockStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(Hash) (blockchain.BlockStatus, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(Hash) blockchain.BlockStatus); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(blockchain.BlockStatus)
	}

	if rf, ok := ret.Get(1).(func(Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeaderBackend_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type HeaderBackend_Status_Call[Hash runtime.Hash, N runtime.Number] struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - hash Hash
func (_e *HeaderBackend_Expecter[Hash, N]) Status(hash interface{}) *HeaderBackend_Status_Call[Hash, N] {
	return &HeaderBackend_Status_Call[Hash, N]{Call: _e.mock.On("Status", hash)}
}

func (_c *HeaderBackend_Status_Call[Hash, N]) Run(run func(hash Hash)) *HeaderBackend_Status_Call[Hash, N] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Hash))
	})
	return _c
}

func (_c *HeaderBackend_Status_Call[Hash, N]) Return(_a0 blockchain.BlockStatus, _a1 error) *HeaderBackend_Status_Call[Hash, N] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HeaderBackend_Status_Call[Hash, N]) RunAndReturn(run func(Hash) (blockchain.BlockStatus, error)) *HeaderBackend_Status_Call[Hash, N] {
	_c.Call.Return(run)
	return _c
}

// NewHeaderBackend creates a new instance of HeaderBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHeaderBackend[Hash runtime.Hash, N runtime.Number](t interface {
	mock.TestingT
	Cleanup(func())
}) *HeaderBackend[Hash, N] {
	mock := &HeaderBackend[Hash, N]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
