// Code generated by mockery v2.9.4. DO NOT EDIT.

package network

import (
	peer "github.com/libp2p/go-libp2p-core/peer"
	mock "github.com/stretchr/testify/mock"
)

// MockSyncer is an autogenerated mock type for the Syncer type
type MockSyncer struct {
	mock.Mock
}

// CreateBlockResponse provides a mock function with given fields: _a0
func (_m *MockSyncer) CreateBlockResponse(_a0 *BlockRequestMessage) (*BlockResponseMessage, error) {
	ret := _m.Called(_a0)

	var r0 *BlockResponseMessage
	if rf, ok := ret.Get(0).(func(*BlockRequestMessage) *BlockResponseMessage); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BlockResponseMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*BlockRequestMessage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleBlockAnnounce provides a mock function with given fields: from, msg
func (_m *MockSyncer) HandleBlockAnnounce(from peer.ID, msg *BlockAnnounceMessage) error {
	ret := _m.Called(from, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(peer.ID, *BlockAnnounceMessage) error); ok {
		r0 = rf(from, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleBlockAnnounceHandshake provides a mock function with given fields: from, msg
func (_m *MockSyncer) HandleBlockAnnounceHandshake(from peer.ID, msg *BlockAnnounceHandshake) error {
	ret := _m.Called(from, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(peer.ID, *BlockAnnounceHandshake) error); ok {
		r0 = rf(from, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsSynced provides a mock function with given fields:
func (_m *MockSyncer) IsSynced() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
