# This docker-compose.yml configuration contains:
# - a Gossamer node on the Kusama chain
# - a Prometheus server scrapping metrics from Gossamer
# - a Grafana server using the Prometheus server as source
#
# Prometheus and Grafana are both provisioned to give you a dashboard to play with.
# They are tailored for local development, and Grafana gives you anonymous admin access.
#
# You can run all of the containers with: `docker-compose up`
# Alternatively, you can run select containers with for example: `docker-compose up gossamer`
#
# To rebuild the Gossamer Docker image: `docker-compose build`

version: "3"

services:
  gossamer:
    image: chainsafe/gossamer
    build: .
    volumes:
      # Remove with: docker volume rm gossamer
      - gossamer:/data/gossamer
    command:
      - --basepath=/data/gossamer
      - --chain=kusama
      - --log=info
      - --publish-metrics
      - --metrics-address=:9876
      - --pprofserver
    ports:
      - 6060:6060/tcp # Pprof server
      - 7001:7001/tcp # Network port
      - 8545:8545/tcp # RPC HTTP port
      - 8546:8546/tcp # RPC Websocket port
    expose:
      - 9876/tcp # Prometheus metrics for Prometheus server

  prometheus:
    image: prom/prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      # The following line can be uncommented to persist metrics data.
      # - gossamer-prometheus:/prometheus
    expose:
      - 9090/tcp # Prometheus metrics for Grafana

  grafana:
    image: grafana/grafana-oss
    ports:
      - 3000:3000/tcp # HTTP Web interface at http://localhost:3000/
    volumes:
      - ./docker/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      # The following line can be uncommented to persist modifications.
      # - gossamer-grafana:/var/lib/grafana

volumes:
  gossamer:
  gossamer-prometheus:
  gossamer-grafana:
