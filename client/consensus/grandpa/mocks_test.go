// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ChainSafe/gossamer/client/consensus/grandpa (interfaces: ForkTree)

// Package grandpa is a generated GoMock package.
package grandpa

import (
	reflect "reflect"

	common "github.com/ChainSafe/gossamer/lib/common"
	gomock "github.com/golang/mock/gomock"
)

// MockForkTree is a mock of ForkTree interface.
type MockForkTree struct {
	ctrl     *gomock.Controller
	recorder *MockForkTreeMockRecorder
}

// MockForkTreeMockRecorder is the mock recorder for MockForkTree.
type MockForkTreeMockRecorder struct {
	mock *MockForkTree
}

// NewMockForkTree creates a new mock instance.
func NewMockForkTree(ctrl *gomock.Controller) *MockForkTree {
	mock := &MockForkTree{ctrl: ctrl}
	mock.recorder = &MockForkTreeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForkTree) EXPECT() *MockForkTreeMockRecorder {
	return m.recorder
}

// Import mocks base method.
func (m *MockForkTree) Import(arg0 common.Hash, arg1 uint, arg2 PendingChange, arg3 IsDescendentOf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Import", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Import indicates an expected call of Import.
func (mr *MockForkTreeMockRecorder) Import(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockForkTree)(nil).Import), arg0, arg1, arg2, arg3)
}
