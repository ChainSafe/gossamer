package event

import (
	"github.com/libp2p/go-libp2p"
	dht "github.com/libp2p/go-libp2p-kad-dht"
)

/// Events generated by DHT as a response to get_value and put_value requests.
// #[derive(Debug, Clone)]
// #[must_use]
// pub enum DhtEvent {
// 	/// The value was found.
// 	ValueFound(Vec<(Key, Vec<u8>)>),

// 	/// The requested record has not been found in the DHT.
// 	ValueNotFound(Key),

// 	/// The record has been successfully inserted into the DHT.
// 	ValuePut(Key),

// 	/// An error has occurred while putting a record into the DHT.
// 	ValuePutFailed(Key),
// }
type DHTEvent any

type DHTEvents interface{
	ValueFound | ValuePut | ValuePutFailed
}

type ValueFound []struct{
	Key dht.KeyKadID
	Value []byte
}

type ValuePut dht.KeyKadID

type ValuePutFailed dht.KeyKadID

/// Type for events generated by networking layer.
// #[derive(Debug, Clone)]
// #[must_use]
// pub enum Event {
// 	/// Event generated by a DHT.
// 	Dht(DhtEvent),

// 	/// Opened a substream with the given node with the given notifications protocol.
// 	///
// 	/// The protocol is always one of the notification protocols that have been registered.
// 	NotificationStreamOpened {
// 		/// Node we opened the substream with.
// 		remote: PeerId,
// 		/// The concerned protocol. Each protocol uses a different substream.
// 		/// This is always equal to the value of
// 		/// `sc_network::config::NonDefaultSetConfig::notifications_protocol` of one of the
// 		/// configured sets.
// 		protocol: ProtocolName,
// 		/// If the negotiation didn't use the main name of the protocol (the one in
// 		/// `notifications_protocol`), then this field contains which name has actually been
// 		/// used.
// 		/// Always contains a value equal to the value in
// 		/// `sc_network::config::NonDefaultSetConfig::fallback_names`.
// 		negotiated_fallback: Option<ProtocolName>,
// 		/// Role of the remote.
// 		role: ObservedRole,
// 		/// Received handshake.
// 		received_handshake: Vec<u8>,
// 	},

// 	/// Closed a substream with the given node. Always matches a corresponding previous
// 	/// `NotificationStreamOpened` message.
// 	NotificationStreamClosed {
// 		/// Node we closed the substream with.
// 		remote: PeerId,
// 		/// The concerned protocol. Each protocol uses a different substream.
// 		protocol: ProtocolName,
// 	},

//		/// Received one or more messages from the given node using the given protocol.
//		NotificationsReceived {
//			/// Node we received the message from.
//			remote: PeerId,
//			/// Concerned protocol and associated message.
//			messages: Vec<(ProtocolName, Bytes)>,
//		},
//	}
type Events interface{}

type Event any

type DHT 
