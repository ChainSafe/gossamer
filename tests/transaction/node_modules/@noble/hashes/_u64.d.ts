export declare function fromBig(n: bigint, le?: boolean): {
    h: number;
    l: number;
};
export declare function split(lst: bigint[], le?: boolean): Uint32Array[];
export declare const toBig: (h: number, l: number) => bigint;
export declare const shrSH: (h: number, l: number, s: number) => number;
export declare const shrSL: (h: number, l: number, s: number) => number;
export declare const rotrSH: (h: number, l: number, s: number) => number;
export declare const rotrSL: (h: number, l: number, s: number) => number;
export declare const rotrBH: (h: number, l: number, s: number) => number;
export declare const rotrBL: (h: number, l: number, s: number) => number;
export declare const rotr32H: (h: number, l: number) => number;
export declare const rotr32L: (h: number, l: number) => number;
export declare const rotlSH: (h: number, l: number, s: number) => number;
export declare const rotlSL: (h: number, l: number, s: number) => number;
export declare const rotlBH: (h: number, l: number, s: number) => number;
export declare const rotlBL: (h: number, l: number, s: number) => number;
export declare function add(Ah: number, Al: number, Bh: number, Bl: number): {
    h: number;
    l: number;
};
export declare const add3L: (Al: number, Bl: number, Cl: number) => number;
export declare const add3H: (low: number, Ah: number, Bh: number, Ch: number) => number;
export declare const add4L: (Al: number, Bl: number, Cl: number, Dl: number) => number;
export declare const add4H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number) => number;
export declare const add5L: (Al: number, Bl: number, Cl: number, Dl: number, El: number) => number;
export declare const add5H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) => number;
