"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ownContributions = ownContributions;

var _rxjs = require("rxjs");

var _index = require("../util/index.cjs");

var _util = require("./util.cjs");

// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function _getValues(api, childKey, keys) {
  // We actually would love to use multi-keys https://github.com/paritytech/substrate/issues/9203
  return (0, _rxjs.combineLatest)(keys.map(k => api.rpc.childstate.getStorage(childKey, k))).pipe((0, _rxjs.map)(values => values.map(v => api.registry.createType('Option<StorageData>', v)).map(o => o.isSome ? api.registry.createType('Balance', o.unwrap()) : api.registry.createType('Balance')).reduce((all, b, index) => ({ ...all,
    [keys[index]]: b
  }), {})));
}

function _watchOwnChanges(api, paraId, childkey, keys) {
  return api.query.system.events().pipe((0, _rxjs.switchMap)(events => {
    const changes = (0, _util.extractContributed)(paraId, events);
    const filtered = keys.filter(k => changes.added.includes(k) || changes.removed.includes(k));
    return filtered.length ? _getValues(api, childkey, filtered) : _rxjs.EMPTY;
  }), (0, _rxjs.startWith)({}));
}

function _contributions(api, paraId, childKey, keys) {
  return (0, _rxjs.combineLatest)([_getValues(api, childKey, keys), _watchOwnChanges(api, paraId, childKey, keys)]).pipe((0, _rxjs.map)(_ref => {
    let [all, latest] = _ref;
    return { ...all,
      ...latest
    };
  }));
}

function ownContributions(instanceId, api) {
  return (0, _index.memo)(instanceId, (paraId, keys) => api.derive.crowdloan.childKey(paraId).pipe((0, _rxjs.switchMap)(childKey => childKey && keys.length ? _contributions(api, paraId, childKey, keys) : (0, _rxjs.of)({}))));
}