/// <reference types="bn.js" />
import type { SignOptions } from '@polkadot/keyring/types';
import type { AnyTuple, IMethod as IMethodBase } from '@polkadot/types-codec/types';
import type { BN } from '@polkadot/util';
import type { FunctionMetadataLatest, StorageEntryMetadataLatest } from '../interfaces/metadata';
import type { Registry } from './registry';
export type { ICompact, IEnum, IMap, INumber, IOption, IResult, ISet, IStruct, ITuple, IU8a, IVec } from '@polkadot/types-codec/types';
export interface IMethod<A extends AnyTuple = AnyTuple, M = FunctionMetadataLatest> extends IMethodBase<A, M> {
    readonly registry: Registry;
}
export interface IKeyringPair {
    readonly address: string;
    readonly addressRaw: Uint8Array;
    readonly publicKey: Uint8Array;
    sign: (data: Uint8Array, options?: SignOptions) => Uint8Array;
}
export interface IRuntimeVersion {
    readonly apis: any[];
    readonly authoringVersion: BN;
    readonly implName: String;
    readonly implVersion: BN;
    readonly specName: String;
    readonly specVersion: BN;
    readonly transactionVersion: BN;
}
export interface IStorageKey<A extends AnyTuple> {
    readonly args: A;
    readonly meta: StorageEntryMetadataLatest | undefined;
    readonly method: string | undefined;
    readonly outputType: string;
    readonly section: string | undefined;
    is: (key: IStorageKey<AnyTuple>) => key is IStorageKey<A>;
}
