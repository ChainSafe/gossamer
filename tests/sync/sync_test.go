// Copyright 2021 ChainSafe Systems (ON)

// SPDX-License-Identifier: LGPL-3.0-only

package sync

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"os"
	"testing"
	"time"

	"github.com/ChainSafe/gossamer/dot/network"
	"github.com/ChainSafe/gossamer/dot/state"
	"github.com/ChainSafe/gossamer/dot/types"
	"github.com/ChainSafe/gossamer/internal/database"
	"github.com/ChainSafe/gossamer/internal/log"
	"github.com/ChainSafe/gossamer/lib/common"
	"github.com/ChainSafe/gossamer/lib/runtime"
	"github.com/ChainSafe/gossamer/lib/runtime/storage"
	wazero_runtime "github.com/ChainSafe/gossamer/lib/runtime/wazero"
	"github.com/ChainSafe/gossamer/lib/trie"
	"github.com/ChainSafe/gossamer/pkg/scale"
	"github.com/ChainSafe/gossamer/tests/utils"
	"github.com/ChainSafe/gossamer/tests/utils/config"
	"github.com/stretchr/testify/require"
)

type testRPCCall struct {
	nodeIdx int
	method  string
	params  string
	delay   time.Duration
}

type checkDBCall struct {
	call1idx int
	call2idx int
	field    string
}

var tests = []testRPCCall{
	{nodeIdx: 0, method: "chain_getHeader", params: "[]", delay: 0},
	{nodeIdx: 1, method: "chain_getHeader", params: "[]", delay: 0},
	{nodeIdx: 2, method: "chain_getHeader", params: "[]", delay: 0},
	{nodeIdx: 0, method: "chain_getHeader", params: "[]", delay: time.Second * 10},
	{nodeIdx: 1, method: "chain_getHeader", params: "[]", delay: 0},
	{nodeIdx: 2, method: "chain_getHeader", params: "[]", delay: 0},
}

var checks = []checkDBCall{
	{call1idx: 0, call2idx: 1, field: "parentHash"},
	{call1idx: 0, call2idx: 2, field: "parentHash"},
	{call1idx: 3, call2idx: 4, field: "parentHash"},
	{call1idx: 3, call2idx: 5, field: "parentHash"},
}

// this starts nodes and runs RPC calls (which loads db)
func TestCalls(t *testing.T) {
	if utils.MODE != "sync" {
		t.Skip("MODE != 'sync', skipping stress test")
	}

	err := utils.BuildGossamer()
	require.NoError(t, err)

	ctx := context.Background()

	const qtyNodes = 3
	tomlConfig := config.Default()
	framework, err := utils.InitFramework(ctx, t, qtyNodes, tomlConfig)

	require.NoError(t, err)

	nodesCtx, nodesCancel := context.WithCancel(ctx)

	runtimeErrors, startErr := framework.StartNodes(nodesCtx, t)

	t.Cleanup(func() {
		nodesCancel()
		for _, runtimeError := range runtimeErrors {
			<-runtimeError
		}
	})

	require.NoError(t, startErr)

	for _, call := range tests {
		time.Sleep(call.delay)

		const callRPCTimeout = time.Second
		callRPCCtx, cancel := context.WithTimeout(ctx, callRPCTimeout)

		_, err := framework.CallRPC(callRPCCtx, call.nodeIdx, call.method, call.params)

		cancel()

		require.NoError(t, err)
	}

	framework.PrintDB()

	// test check
	for _, check := range checks {
		res := framework.CheckEqual(check.call1idx, check.call2idx, check.field)
		require.True(t, res)
	}
}

func TestDebugWestendBlock14576855And14576856(t *testing.T) {
	wnd14576854StateTrie := newTrieFromRPC(t, "../../lib/runtime/test_data/14576854trie_state_data.json", trie.V0)
	expectedStorageRootHash := common.MustHexToHash("0xedd08c8c9453f56727a1b307d7458eb192b42830b03ef1314be104b4a6aefd9b")
	require.Equal(t, expectedStorageRootHash, trie.V0.MustHash(*wnd14576854StateTrie))

	db, err := database.NewPebble(t.TempDir(), true)
	require.NoError(t, err)

	storageState, err := state.NewStorageState(db, nil, state.NewTries())
	require.NoError(t, err)

	trieState := storage.NewTrieState(wnd14576854StateTrie)
	codeHash, err := trieState.LoadCodeHash()
	require.NoError(t, err)

	fmt.Printf("code hash at start: %s\n", codeHash.String())

	cfg := wazero_runtime.Config{
		Storage: trieState,
		LogLvl:  log.Critical,
	}

	instance, err := wazero_runtime.NewInstanceFromTrie(wnd14576854StateTrie, cfg)
	require.NoError(t, err)

	blockResponseBytes, err := common.HexToBytes("0x0a91140a200283b22f28a02825206b5cfd1668e117c4c1d3b49ec02a5b4731aff2c3ac1c4012a10240a65a5bad9b346fc4d86fe33eadfa0cd49d0378910b0af5e73159ed503611e35eb37903e8c4636bd5f01d9f9a18fa96949787975c9c3b78a0624ae95e3078da20c33605cf34d6de3155b72a0818608103915619964369e8599482e246a4cdf43df1a7500c0642414245b501030f0000008a22a61000000000821ded3b100e3f68e3ae8109c028e91b0d084bfa6458d5a28203e35b2d01e87bf4f8ef774929e4522b451e3abf892dbbb5aaf21ba7870db5e0efa8d481268e0159463ac6be5114cb953e7bb5d070e785b3ace95680bc6040bab4aed1575bed0708054241424501014ea332ce7e94687b6103adaf88e0fd370879926e95834ca700852fdaff0e260857572d8c7798150b0ffdf60d85d90fc6c6bf10c974606307245d4d4683b64e8e1a0b280402000b6182c93586011abb11e522042d00400c0100000000b6a695e095d905fda4aa41746c0a0752cc3559eb00687d9a13c2a01745290573f6fa11cf3569c116e125d57ec15723653e8f4cda3ec481df1e0d2938f9c3f6880c0101000000740d6868002741aad034c5ffb5dcf31db78f2bb2eb1349bb02dc17d445e9f837914ec9394d52b6d6a3301fc7597de47bc2e48f6f3965999b4ea48fa5667aa4890c01020000002a0962f0b38163dfc2ed4f18727d530d49c05b4e8dbbd1b2c3af310956651277ed247263db04acedb2076ec99b516dff7598ba1f2d328006d4eb04e4c7e7028a0c0103000000f4a8ad3422500b05b5e91f1bae5db4aaa0d576f201ef8f39104764be34b9f229e3e123aec9f98fc9a64b3c4323428bbee3fb358474e2142f273fc3218cc9248c0c0104000000a6a5ee07dafbff4e52ae279f3149d35023751e61a4174c95e3a1afd56ca3365b939b7437f87bda45bfc052a0b0a71cd731296ed6d9edbc127a8e16cdeb52ff800c0105000000b0901765a119c80051f5000b3418b88f328a425b0fbd67aaa0f48acf6347903747cd681c8c4abd4fcb04f0748de2402a3da9ba59f6da9154e07b17e0c1154f890c01060000004cf0b4ec852a062a2cc599ac764a5bd6d6afb469326cfbf736ef0399d987de06ddf842c42f03c479d683aa7c511eb5ccc8f038192ff1fb8a1e1f234446efcb8c0c01070000004aad3d5f2f24ff187a06db9b87a2affa8ac0e219b02512dfd81549bccf62b8111e9961befb215d7e05d7f9ae14f2726098dd95f971e01daac6e720fde387f08c0c01080000004263728475b9e1e48f313e9e4d10cd9a1938d3bd3a80d48ed1418657d303643fac70ba80a6cdad37746e119eb280b668455d297e3b9113edc80ac6762536d18d0c01090000002a9aef1f1b91400ba0d52126b535393ffbfa60c531265efe2bf3dee09aa6f5453a14f3d94bc7f34f3b3d931d46f4726bc87e117a7baa93dd9bb1ac8a9d41da8e0c010a0000000606a0fbaf5f6ba57bc8276aa3e4ad587a1103563d8ea806ded26c8c751fa51dc3e69b4c1f016446cc711be1172a687ee2a5c52f2cb25b9255bf95c4b0fb57810c010b00000054ef1c2e69dd06552fef2b085c4afe5ea1bede23cb912aefb3eff3a3be820f3f1852e54001c15ba05d8b038e2b72207d94c94f8550b0f02fd8c7ee44bcf4df840c010c000000a6b9492a5bc58a4ca6f975c1c50f0c8f09f6b4e842a04a767867c11cc4910f1528efe6a26579981a7d82bda20cdc346fa805703d0aff9988a61ae63443a5008a0c010d000000ca13f5d6336bf7b54351c831d51c3d3aa37c9c1b806ed5715bb72c6a3206d25c893772dac586a3b3e3a616c637947d86119aa54ee4599c4dad23d4ff2f4e7b860c010e0000000e756428f4382e4e540c46a0ea60fdb094129e0d0be80fb7494498d7e714d832c57b158de81ca0f0df736f89035e7eb7449b609adf5c80ef751fb205acac0a800c010f000000820323f879134b5ca5bdcfa4f45a6089c1f5f198633ca8f841349e0e32a6032d20612506730aa5cf0141d56e156234540548164cf1cb6837d767a14d9d5dc18b04ea03000040a65a5bad9b346fc4d86fe33eadfa0cd49d0378910b0af5e73159ed503611e3468b0e01113f2c78d4b7b20efd4bdc38627c60bb4b840c8e7476e891b505d828eb016dba1703a583c3e64688bdf97e2bc29a8b6cb499a432d237a323b1412e90e2f769655c4651e3d298ecdc2a536cb89a3a3f31a0f6441a3ae4aa51c4741d32d1cd99206627a51c448c1dbf1f50009655c98b0c1326ae38420d9515cbbcf93ec8084285c48449903c919b164453fde3c5412badebcee765a01aa1b7a8fd503519283259d37c98ecab006af925b013b57a27fe56800cda5f5feec980cb110f87030f7913bfad164bd2dcff5556e48cf06bc28bb3f1ead5200be27d95adbcac624e714e61e9b3100565ae524c326102f8bc17bd3e9e73a185b8116a9e964e665c000000e902d1eb45830486f22485d977ff49349529742a039db30cb9da5fda419c6302bfa8b6ea0b005ff08f7e128ee3e8d263926c4f682842d2eb319b09f251540a815836db74761490734e7a9fd6e677f451d30e6fe142c52655c15db683a4931659c75ac85fbf6c080661757261204411530800000000056175726101015e53dd83b63d9a65ee2906fcbeb0719f9a7a7281513441e211f448efcdfd472a80fe4cb669fa22b8499961bea7643c3586fd16d26e220cb7e5a9da8a1d07ce8b00000000d66cde001401b0b5c1ee601faedc6101d132c793fcdae39737468c9c3dcc3c57fb5b4e2f14648b002685a67f4aeca1fef16795c2c2c352b5afd91a8fe346b7f278f2fce67b8602d23eb4ca1a20f459e1557a1ccc8976dcc686873f3499262e8cd38d0e6294a4340c1fa00bc26ec9a18df5b1b14d4b90bd3c75c5d35b6dff8eeca23976de2f288301d4fa4f3d94cb63c38ea719e64ae09cd7d6eb409d8d1bc21f1a00377fb30e4118e89dd2b4fba1a538819f4dc57e5cf76e80d953ef4c04ad81918b4d68b050db8f021aba632739c7993e789b4ae276b6c933e82a644d5442443224e9fb12d499e12a41a8b4deeb4ebe503842cf8cb680e84e0e4e6898bf62a3cf722262f654cec086029c38b051968569013dc5c2fbc93db0c4bb86a3f548dc5ddff363f32fbe7704682a5dabb9e9689ba820a5f68ac31a92613e0f760d4862c41f5d97edb22e378d8a141f007d63733ead4d8c05045abe1f10fca05ca02aa44c5aafb59135a841c09afeb3965ab37903edd08c8c9453f56727a1b307d7458eb192b42830b03ef1314be104b4a6aefd9b5f6028c17d04a84ec8811461e52a44e489e67b01bfd421b1e25e002200ab433e080642414245b501030d0000008922a610000000002e1e6cadbc719c66a3a4193c2b577cce37eec5e041213ba010823a9b988da947f942254709d3786c37eebb54253f639584dd149883df229258a3ae02ee81860b5945c6ba5fb7990a0fb7ec0ff19c9d5ea8b7d613cfe7de3a8bcb4bdb8f6fed0f05424142450101266ba8cf6a2b5b86a3a1bda16be242d75b042a8dea21e57e0c265cdbc942612c9531ff2178a02871336d6e326d2a71bbb749c3dbc7e3a82ea1c2c0690a73ca8a")
	require.NoError(t, err)

	blockResponse := new(network.BlockResponseMessage)
	err = blockResponse.Decode(blockResponseBytes)
	require.NoError(t, err)

	blockData := blockResponse.BlockData[0]

	block := &types.Block{
		Header: *blockData.Header,
		Body:   *blockData.Body,
	}
	parentBlockStateRoot := block.Header.StateRoot

	fmt.Printf("Executing block number %d (%s)\n", block.Header.Number, block.Header.Hash().String())
	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)

	fmt.Printf("Storing the trie to the disk, regards block %d\n", block.Header.Number)

	//newTrieState := storage.NewTrieState(trieState.Trie().DeepCopy())
	err = storageState.StoreTrie(trieState, &block.Header)
	require.NoError(t, err)

	codeHash, err = trieState.LoadCodeHash()
	require.NoError(t, err)

	fmt.Printf("code hash from updated state: %s\n", codeHash.String())

	blockResponseBytes, err = common.HexToBytes("0x0ade0d0a20396e794b25deac6c25bc8b5e7b00892934fea53c87bb7128983c7921d72f758112a0020283b22f28a02825206b5cfd1668e117c4c1d3b49ec02a5b4731aff2c3ac1c4062b37903d1b4e4621243629a494fc62b91c92f2d8c378e2c3a0be552af2a05dc3d0dbd7b7ad6e998c94d604101a7e147cf401b041e0ce4996f609b3f5601c77c4922a529080642414245b50103000000008b22a6100000000054741a1a0fbb59012ce3b6c28a9e37487a49113964713cb85485ac24b0b46a5d18785ae8cca9a49ebc11657be3774bca3f93d8326af163290479a77be944370c6b3b763783d6bc086da473b2438389e0d6ae31abbc4a37441b27a6516e57920f05424142450101e2629d073bca188b537fd4715da7f0d3c0be8474a01935f7c25e1c5f374bde742e99423d97698db3975ebbd40819ea352f6d1d1f510dc761c9a623cf3a8975831a0b280402000bd099c93586011a890b1d16042d00400c040000000076b8399ace2a50d5b6fd5cbf464b048178c6fffa047702a416f3d8c8d264ad4a41a4853dc73e37dd91dfaec5d0d41dc01a542a13232cfc56b9372ffcbb83ef840c0401000000d2f839d7eaa667fc2e48a16d98807290e7c10a5ecd2583f8568fcc1bb7d5351e8656146d1365c8619f3202e966877e0f5870c90ecf910ef03f0f1a3dd87266830c0402000000fa36f6a59008ff66a4229c482e8a50315fd5251fc53cd9469b6543bc4930cd2528e827a4fcef270dc9722d37ae23ac04953c4fb08725e1e6bd5615babc42dd800c04030000009497e81b8089a8189918c58c2d5f80690d07f3e0353801e9378efc5a76912b41a8d34b1dd0d93b897441dff3b8c68544bceb9cf27c6e0c83be911ba6eb9574870c04040000006adb55ddc67509b0ddff38ce482fb437d96b0faae302e2b7cf5d5979f5ec45655fafc6045104d9b0d234f42c1ed8ec35c88fe420c8ea6123b780112cb92fa4890c0405000000b80a4c5a180e71a741110b020bacbffba9082d9b76c3e8ce79714be476f144626d6757c6e0efb878754e692c8be83bc2deacd5582f96ceb4f91d68b3e0acaa8a0c0406000000ce8b4daede74064db15bc9a924bc046bde7c9cce04cae4e543266aa691225f2dfc41119900287c9fa43965f82e0e48cc54fc31bf3a06e38a29730b996931e88c0c0407000000b68e00e032c1316faf1415e81501158eba96906b35281f1ff9862dc0b92881430c8d3ae74f16054ab24b313dd3a6e26ca0e57b5206f1a0ee46deb82946a231820c0408000000902e9429fb62ea6de61b0a0da1aae498fe28b27321540848d4ef86c52d684416d3262c3f03826a92dd26eedb5b1ccc220429277822ac0531350c31e43aae90830c04090000007cb92e3ce7438b34d56f5af43af0363520ebd4810c1b8ea8fe717ff1bbcea404528a1765ae3602d3975347ea17554d34613969cdc69718e7fdc47ea7cdc159800c040a0000005ecb6f76ac28e9c9596b46f2571a8380ad0742f7dfae673544b71e7000dbd0039cd13e10fe3e5d7ae14614c5f100f2c72373ea4d2df1f6a34be831db81f62a8a0c040b0000009ca60150ef177cb3168b28470364b611825ad2d86e3e38056b79903d4639205c2799926328d205c4cc66e0f2ca832e6ff8fa4ff9f05f1b57103d63ab465190860c040c00000020aa8c3c211ca39b7d1ae912ef2045064742eb1cb04e073bdb87814386f32a40547f8ba9029d3b830052011273dd6f6bcafdad40efd031bed27fca87747bdf8d0c040d0000006e7204ad9b80e56429c17d0de2aa231dd9b933bb7469bcd124d44aa9c0406b71bedb4a7037bebf8605afb3cf904ed60f359335d9ce2fe3884129f81f4f2e0e850c040e000000a869927414a693a1ff6794fcd975a737434556b1b6970c841657aa831bb1dc1910d9ce3c27d46e59cf4355077ce2b1e76964e0ba5907f2a57a522944e6c73b8b0c040f000000b858993e3b38f0cc7a70b226a40b9a49b11d75ddd0fbf7158d66127830ddca78f50277fe22d6f5b13bf98b82fedaca5fcee11868bbbe3afe2f25ff7d57584583000040a65a5bad9b346fc4d86fe33eadfa0cd49d0378910b0af5e73159ed503611e35eb37903e8c4636bd5f01d9f9a18fa96949787975c9c3b78a0624ae95e3078da20c33605cf34d6de3155b72a0818608103915619964369e8599482e246a4cdf43df1a7500c0642414245b501030f0000008a22a61000000000821ded3b100e3f68e3ae8109c028e91b0d084bfa6458d5a28203e35b2d01e87bf4f8ef774929e4522b451e3abf892dbbb5aaf21ba7870db5e0efa8d481268e0159463ac6be5114cb953e7bb5d070e785b3ace95680bc6040bab4aed1575bed0708054241424501014ea332ce7e94687b6103adaf88e0fd370879926e95834ca700852fdaff0e260857572d8c7798150b0ffdf60d85d90fc6c6bf10c974606307245d4d4683b64e8e")
	require.NoError(t, err)

	blockResponse = new(network.BlockResponseMessage)
	err = blockResponse.Decode(blockResponseBytes)
	require.NoError(t, err)

	blockData = blockResponse.BlockData[0]

	block = &types.Block{
		Header: *blockData.Header,
		Body:   *blockData.Body,
	}

	ts, err := storageState.TrieState(&parentBlockStateRoot)
	require.NoError(t, err)

	// wnd14576855StateTrie := newTrieFromRPC(t, "../test_data/14576855trie_state_data.json")
	// expectedStorageRootHash := common.MustHexToHash("0xe8c4636bd5f01d9f9a18fa96949787975c9c3b78a0624ae95e3078da20c33605")
	// require.Equal(t, expectedStorageRootHash, trie.V0.MustHash(*wnd14576855StateTrie))

	// state := storage.NewTrieState(wnd14576855StateTrie)
	instance, err = wazero_runtime.NewInstanceFromTrie(trieState.Trie(), wazero_runtime.Config{
		Storage: ts,
		LogLvl:  log.Critical,
	})
	require.NoError(t, err)
	// instance.version()
	// instance.SetContextStorage(state)

	fmt.Printf("Executing block number %d\n", block.Header.Number)

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func getRuntimeFromTrieState(t *testing.T, filename string) []byte {
	t.Helper()

	data, err := os.ReadFile(filename)
	require.NoError(t, err)

	encodedTrieEntries := make([]string, 0)
	err = json.Unmarshal(data, &encodedTrieEntries)
	require.NoError(t, err)

	for _, encodedEntry := range encodedTrieEntries {
		bytesEncodedEntry := common.MustHexToBytes(encodedEntry)
		entry := trie.Entry{}
		err := scale.Unmarshal(bytesEncodedEntry, &entry)
		require.NoError(t, err)

		if bytes.Equal(entry.Key, common.CodeKey) {
			return entry.Value
		}
	}

	return nil
}

func newTrieFromRPC(t *testing.T, filename string, trieVersion trie.TrieLayout) *trie.Trie {
	data, err := os.ReadFile(filename)
	require.NoError(t, err)

	encodedTrieEntries := make([]string, 0)
	err = json.Unmarshal(data, &encodedTrieEntries)
	require.NoError(t, err)

	entries := make(map[string]string, len(encodedTrieEntries))
	for _, encodedEntry := range encodedTrieEntries {
		bytesEncodedEntry := common.MustHexToBytes(encodedEntry)
		entry := trie.Entry{}
		err := scale.Unmarshal(bytesEncodedEntry, &entry)
		require.NoError(t, err)

		entries[common.BytesToHex(entry.Key)] = common.BytesToHex(entry.Value)
	}

	tr, err := trie.LoadFromMap(entries, trieVersion)
	require.NoError(t, err)
	return &tr
}

func TestDebugWestendBlock14577546(t *testing.T) {
	wnd14576854Runtime := newTrieFromRPC(t, "../../block14577546triestate.json", trie.V0)
	require.NotNil(t, wnd14576854Runtime)

	// emptyTrieState := storage.NewTrieState(trie.NewEmptyTrie())
	// emptyTrieState.SetVersion(trie.V1)

	// emptyTrieState.Put(common.CodeKey, wnd14576854Runtime)
	// codeHash, err := emptyTrieState.LoadCodeHash()
	// require.NoError(t, err)

	// const expectedRuntimeHash = "0x6eb47852c4f8f8b1ec2cb6084564f88c353f5d6d3a5edd1c85dcd744847652cb"
	// require.Equal(t, codeHash.String(), expectedRuntimeHash)

	ts := storage.NewTrieState(wnd14576854Runtime)

	cfg := wazero_runtime.Config{
		NodeStorage: runtime.NodeStorage{
			BaseDB: runtime.NewInMemoryDB(t),
		},
		Storage: ts,
		LogLvl:  log.Critical,
	}

	instance, err := wazero_runtime.NewInstanceFromTrie(ts.Trie(), cfg)
	require.NoError(t, err)

	blockResponseBytes, err := common.HexToBytes("0x0ae0260a2012e044179cd1d2ee191c71f8fc5d17bc68f70bf97c6d1250be951e1ac524d41412c9075a9e648bfe78322945e25a0c39d3b825fa8a60091903fa2238b2fa173aee40ac2ebe79035e6e7e19bae1468b3b77494c8c020f5455ae8b2b27d7d1c3b4084be42c95b2c04443ebec754aa968aa6e7954549fdf93ea3ad35f44db433781681e65f9075a180c0642414245b50103050000003f25a61000000000645dad89d04f57c9c7f55882ac70ea42588380a3e35757b49b04ff11bd3c9d7a3763ede2161cc70c1c41202fe2b6260e6a23a5a487bc731e010e3a8fb1d3d6057da69c5a47443f3a32436a5be6cd1703472787831270b823a3792b9bba3aaf0b0442414245890a01402694e4bf063c232bc5d1c0068e9bfb28bee7ca7c177372ca2cd1134698c03d6901000000000000009a09fe0aa06b45e97820029311e172bddf0c3ce7fd1597b06590499d380e77710100000000000000bc7c0e3f41b9af06798373c40225afbc599f4b8509997fdde8abf9e522064c66010000000000000054204d0e6b1d4492cfb91e9eb9ecf348dbe70b078c47b893194b611dce8100630100000000000000bafafa4a206ccc38ad5afa73a5cde8cba3aa89d6de94ab60c7e59c868280977d01000000000000009e4971f0d6f1d35badecaf7e9032829ff4a2629122250a5d9cb714f4805641490100000000000000fed87bf3437f55b8b813a9bb751045c6c724481eb9535ba5e120b09d843f1820010000000000000016a03c740cd6b746cbfc9ae2d7c630b4ddd14ca6de6e08034163995e6283396001000000000000000468e29aa426b75e51d9f8d98a9b21688a96d093bcdc9ac82b24e508ea6c8b1d010000000000000076a5a1a0b2b4bef5524de64cf7d5d27b48e35825142b393b1ff297b925f5eb3f0100000000000000ba0085a91f9028cf1ee961c1e5c9ac3cef6e9db6944524dcd3baa178271be13b0100000000000000284b21a986abcb1dc8449e75d1039296d15d9170b709d1d8f80e13f965d2826701000000000000000483b0689164171cca2215638b17d2f70346a072dea3e2a5cda2b0a11614914c0100000000000000d6459c910d17bb21d596611bf08f6e690cdd757a33ac0e7c8c820f77de132e5b01000000000000001c480cd50beda967ba7d31cd02e1fa7e341256b57fd20392634e2db5d298c04b0100000000000000d650846b5a3b4e026efc6a87c8e4c4048ffdc46f5895c5307cf1d1a257a5e8260100000000000000f71b9104c477173500092159d69b7ce6da7e88f3fa2902bb5a54c5facec77d0605424142450101bc7cf81cd40358fc343846e388340c4baed507c32aacc0bd66b7717435615c0e56c4124730fc9bcb529299b126e8d6bad0015ff963b3cbd75bd173fa8869d6891a0b280402000b90f4083686011ae21e813d042d00400c0000000000282cd878ee3c4d099656395bef3ca75ab8db3f20acb25b6130ac883b7de7af2f902eccdcaaa509437ce0f850d6368d17e9e38d8889df479c7b5decc5376f008a0c00010000009aa2ce35475fa20b79a27f33791fdf65408af545b4efcca8ad91840c3db74a2b1440bd9364ff443aaffc2f53d58359eeef952152293f97231fdb9257af24dd830c000200000034dbe9a6359045e8e913f56ca301153f0e7d83bf87c0caac18ddbd3257b44a3e63b7348650146671a5e88f9badac0186952bdc94a37b05b259defe710ce826820c00030000008eceac5be204b40818d16b28b2c5a6f7bbdcc65a4fd734caa06d65faf2c7c7749da4d385d23fa02fb6e2c837ce41ee7af9670ab45391c1c9d4c7e2ae5268c28d0c000400000006df086355e3a189af73e6cff2b9a0f7bcb0960ac2990be164ce02762e0fce75e9d66775f774b87a92e485e72b67617b9f7fbb98dd2e12ee296706d562c069800c0005000000aa268e78631163c127d6613c127916257147a4c54d74e7621c6ae70ed5e27251653e699ce45415cbb6c3c4195b44e6054a45543444c180e6b4b2b67202bf81820c000600000030da3834d2db04e52604bba9359846a4eeaa4e304c0fea26586e8c8497db8a0f543f3c0c079ceeea8f12ad730666d3b21453261f1572cbafb08d70ef9462f9880c000700000016de277fabf66ea966f44e3d5c74902e3b20b6c1259448131ed9505cb1e70b3ec26336f6ae94fc8b5e5c272e6720dbcf6d3fe84ab64b6c56dd0b750879190f810c00080000003215988a218fae78a4d2d1387a5f1be47fae812be03edef900cf0c17e93e646db957e434cff70a5fc768693a6672dc28ce58468970013388bb3ecea4ad440a890c000900000010622ef8626a403ba790ebc1b6baf151e5157b96fb8a2a907dbb494a036abc38897ae5f987228ec9fc5f98ed4b04001fb7170946e5c92996d151327025b45e8e0c000a00000082947afd222ec1e6f064e9bcd2211be9f2426e992cc35ba043e4760445bde03fe51ef26feaf1f4a328ea19b99a67e2a14ca257a02ddf4b53a807349e7485118a0c000b000000c0380013c086ac13292350bfe4d845bc73c4656beeb1bc371d09bc907b694a2b0af79c42a7e6e1706f022cf096894e09a316e5c97f14b688c36910adadbcc98f0c000c0000004a57e784fe9266e053b0da84efdffde29c1b28862cc988239aafa1f3f090e069dbe61b6ab898f261036cc45fe1199e4a8176b2615be52735a8180dbba3fee88b0c000d0000002233fc7ca2dbe698a26901b476a437e4e74fa72544b6243eb07d9a6dd6a27f58ce67d57911c9b156cdf0f1192241c98a0c2de4fa7db98d0c2d280b1f5db238810c000e000000dcbcdfca9945c7ae2435c967deb7b22880fcf4f5f7773381aa2440dba4071c305e92a3511b91c41b696f60fc4c8ba77f9eccaf7753b023f383403b7469152a880c000f000000180e459a053ddc2e861d9515d267ba7f657566623ca01ffa9e968adc33f3545e3789ece8a428ee5cc376cc811dfe1f463a4635a12cdd54571791748bfb61058f0ce80300005a9e648bfe78322945e25a0c39d3b825fa8a60091903fa2238b2fa173aee40acfcac6d0a0541ca368261d0d6eef36f15016366108af4c0c7df5abcf7dd3f2d63e47d8c713e6e0704b31c4af7fe9bbe6cfba766ea3a89cbb2734359ec7094d521436395e4a4436135785e3537d13de36fbaa4967926ccf90f0cab5522c225b795021b8a3b8c1e9b69a3672206c25a9974db19f1aa186ccdf30239dfcbbf35af1a18045f924a02a0a3cefa7bcbfafab4d3cb8c789615c727e87899ac421b1614366e0ecfd619df6e4b4f4aecbc96156cab4ee2fe16b7138fa6e6c72765b87c778190dd1078d333c796d76a68ecb75eeaadd5cd49765b877a65258828e5327040ca07f4c5b9c3a6d001a54d9a96bc1b0e69e9266bfa4bf0f8ba0b6256ca10c23d1e000000e9025c1b988e3c110da6d2c8ed6de7b430a00f0dc2cda610ab8a47d392c80ee64781c2b3ef0045e847ea1bf5355597d5a112c3af5859aea9a6951bec5dca635ca24765459fb9d9eb42eabfb44fddb25dc19520c0ba327a5b883bd7215a6bbfebc3cda34e74af080661757261209f1253080000000005617572610101c4244a3f1bfa9c7add7a890d7054fbd05ba40c266de3a65041024eaf756c0b2bb2b1d2d6a2a662cb7f4a9c219d735a2e48621f1bedcf50ea790722a486585087000000008a6fde001402ea7014b10a51a1d68ec75474d38efcfda095472ca575c4aa5c5f4103714749167b67dac947ff57b27066ba64df2ad5dd8180329c79d6d6a2d2c2db9ad059f48701f2d04beb608dd69ed1850e79b1f45fa212f6e84d69489585842b7128b828dc676ae34d870220233503374c0be18fbcb45eaaa206ed706cc1586c275b09b76a8601e2617495b1877a544f5dfcbfb79d863cb7e6ff3670c7a3d8a805ff5fd8ae0248ff4b940c27408443ac53dc81205a9c78ec712d129247dbbbce0cb048a81e648602dc244ca12936e4d9fe49e6ac21de74018691481a5af618e57d1e1067f6c7775e05e4ce9739cdb2549f7a37a9cbcdfc0978cf002ef6b14dfdc0b54ee6b48d698a01d8f68e65630f3209473d780ff68d1cfdd6379a46525c88a25be662c2fe50f121ccc8d658be2089ddc8a4f5602c7a8ed3df751eebf37637c2576ffa17c7ce548e141fe90300005a9e648bfe78322945e25a0c39d3b825fa8a60091903fa2238b2fa173aee40acfc9891270d421262a649631f6f0abf2dafdbd88080bade974a352c9be7c55903c67e2361e43357f8f71b2e6bd231c4690ab3226628dc821fd2db56c2355f0aae5880a69c4cefe465bb41098aceaa6b2b92d64762c92a70bb28d3c6c4d1d987bd6914222a13f5e216fc7f68252708c961d12f2ebe25ccef107aa81ef1904c81552401967c4c4403e002be2be5d9cd979193bdacc86beea12ca7d1f5142ed08e0a0de6daf1ef3fc6e88ee6c98f202c1b439cf8a659d7015ae2c87ee5accef8348fd4d2fc780ff36ef444aaee59c5a0afa1b79c18a4696a6f3475876dc7284797f1dcc6cda49b51efbe0fd184b974074d1258ca9f15b9fccfedc35b7dee6e1ab9e9000000e902e00f87682d3d0c208425c144859f621e33f8e001c889b1f1e03988be7093f06206992f00ecd5da9a370f5c514ec210f554bfb2b4fc1b578f91167caa6508e89b51fd62970e10a1124d7b133d14706af98fe1602fda88b547897ee847821533f900fc7713080661757261209f12530800000000056175726101018630144dce66464df6d51dd511e3a2cc8b23a03d2d817d27dbc9a72beda81d187093379c491f50f5fad802ee1ee2ae088f92bb0818b762c1dbe07f17de665880000000008a6fde0018021c58cbb963b4e4897c4fb4b2e0d9222deb069152a439716f71fae9cc1f78d56fce80ced3f584ec9160678d1d50231d69796ee2a400f7e801eb7528a5371de98f0258556fd015c61d55c47b99ebe642854dc6909ceabf7bdc4416f54e3a8f2e5b6f55c8d29baf8c9092eea3515cb4b45f25fb90aa2cb115ee2cfbc46c3894d31b810120ffa6b942052f1ba9c9d9ea3ec6605b4ef761cdc6dbab1dc7f7c1556d1fad1523343837a94c4468df191dbf657075f5dc4ffab509309137cf3151ec6298a98d02eeb0bc2b560b0d8016a885543fabf07e2bbb1c3239f94a42bc2a91d59e684019be4a9929cb9642c8f1540e5bec6c7488fa393132eeae60b200b7a4b5f6c64b8b0120e4cd84d399b0a39a2ec947570d014200928c7f3f552a80be4915b483906f2acb8d642d3c733da1df00834a0e304c72a6a9fd94a06bd7c0d456351e302e4b8d015e56e2c35b417fe427f9656d362c74d6b97750af50e814b9afa3ed5230cffe6f4cfb0e25041ed96043f34f91b7776ee0a2415e58455608260710ec23ae240987183fea0300005a9e648bfe78322945e25a0c39d3b825fa8a60091903fa2238b2fa173aee40ac2e382b3b34921a40e50343cf2ebe326059fd0f972cb34a060ee159c56acca44836568000e96ed361f8e35f2fc825c729b0a412b5427865249067f3106528a351330b63c2ceccfbe6e8d7658bc8c177827b21d85612adcaac5bc72add07f1b0d5d3885f7e6b46f198c2284120ac5a4867efe4480df0305d1c65e8be4d2864ebdd084e445f9d0c9d389f2e24c630b5c5545851e2f52703b4ca89bc0ff69745461864f5a77afd0ab8f373702a2ee2b4914e67707a9270004527126a3fa11361b189223821c406f958a20700021444299d6ae72fc900428f0b7c0106ce55a9a3e19b4e714e61e9b3100565ae524c326102f8bc17bd3e9e73a185b8116a9e964e665c000000e902924645e09c811193071c23010729e40ea2b03bcaec22108ff91dc04daedcfe9f1ef00b008039066af19c53ec45a5d491be58392fa9ba2575407e1977265070b56e8d45492ca3b04e42f429749aa691199813f5d526ea26346456bfdc940b07429be23a52080661757261209f1253080000000005617572610101389ac297b3b047f0825537e1845479951c25a3a2f1c5037350b98ea25aaaa61489cb053a36ade2933ea9794a5972b2222efb746605fb90f8e27abd8493424c89000000008a6fde001401b0ad4d6ab7c5bdecb1314b76c0c2b0c5e97c6a26a1fca9f2c2c78c86fb85070047cc0405609e9a4455effb72d261f6fa37ee04dbd1b274d68540a2375709988c01f4d0977086efc2b63294f9a5afbaa94085b02964f6f2a8b42257a3ccde0d6b4adaccb0884f5ce827af1d0fba6e96a1ab6ef8fb2dd6b12f582512fa8206ba718a01ea8c4ac88cc5c7a59c181beee80192a512ce7d3a3080ab3ddd164af17faa3f0279930108dce00540ff19658f63725ad2b766d61b645f555955b4870b3763898f0178fc4005624ec6baf421055f45c6aedcee3878fdbdeca8c6c52a7ed672a202059668fa6eb617da2b12ef8445ff624b8110b295a33b4ce1a1d135cdf6735e6f8502d214e61f0ac9af706b545a75bc53bbec0c9a9cf218862c540f667e9b9875a158a882486390be76751fddaf7f8110b3e888328846ec6884fe1591e3658b1d7883141f00da7ab5b7ad416bed4b0774f8e971c54ed4a2d2ff842da496df36fd0e1db70cb52abe79031fef5448ee43a28cb3c48e1890b7eeabdc9bb96dd689e23796a8514add12640ba40bda317e4c6103419a926c93deb156ad8148916ffeaf171e5b3740e36efc1b080642414245b501010e0000003e25a6100000000008db4e182734dcbff213060c659394561644cbd04bc908201b25b43a0108892a858f25b729ab79582898cd06b9e9255ad07489cb44536bfe7eb31104776e410aef9ee077326492d813a40146879691a1dcf19b1ce645f897c2b392ac306d0d07054241424501018a94a290fd5070e1df9b78f5feebce41be592777a001e125e521caa0fb99a70970fdb35df5d6551fe9b970a8423a652b2d98783160c49a63268a6d5d97dd8b8b")
	require.NoError(t, err)

	blockResponse := new(network.BlockResponseMessage)
	err = blockResponse.Decode(blockResponseBytes)
	require.NoError(t, err)

	blockData := blockResponse.BlockData[0]

	block := &types.Block{
		Header: *blockData.Header,
		Body:   *blockData.Body,
	}

	fmt.Printf("Executing block number %d (%s)\n", block.Header.Number, block.Header.Hash().String())
	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)

	// db, err := database.NewPebble(t.TempDir(), true)
	// require.NoError(t, err)

	// storageState, err := state.NewStorageState(db, nil, state.NewTries())
	// require.NoError(t, err)

	// trieState := storage.NewTrieState(wnd14576854StateTrie)
	// codeHash, err := trieState.LoadCodeHash()
	// require.NoError(t, err)

	// fmt.Printf("code hash at start: %s\n", codeHash.String())

	// cfg := wazero_runtime.Config{
	// 	Storage: trieState,
	// 	LogLvl:  log.Critical,
	// }

	// instance, err := wazero_runtime.NewInstanceFromTrie(wnd14576854StateTrie, cfg)
	// require.NoError(t, err)

	// blockResponseBytes, err := common.HexToBytes("")
	// require.NoError(t, err)

	// blockResponse := new(network.BlockResponseMessage)
	// err = blockResponse.Decode(blockResponseBytes)
	// require.NoError(t, err)

	// blockData := blockResponse.BlockData[0]

	// block := &types.Block{
	// 	Header: *blockData.Header,
	// 	Body:   *blockData.Body,
	// }
	// parentBlockStateRoot := block.Header.StateRoot

	// fmt.Printf("Executing block number %d (%s)\n", block.Header.Number, block.Header.Hash().String())
	// _, err = instance.ExecuteBlock(block)
	// require.NoError(t, err)

	// fmt.Printf("Storing the trie to the disk, regards block %d\n", block.Header.Number)

	// //newTrieState := storage.NewTrieState(trieState.Trie().DeepCopy())
	// err = storageState.StoreTrie(trieState, &block.Header)
	// require.NoError(t, err)

	// codeHash, err = trieState.LoadCodeHash()
	// require.NoError(t, err)

	// fmt.Printf("code hash from updated state: %s\n", codeHash.String())

	// blockResponseBytes, err = common.HexToBytes("0x0ade0d0a20396e794b25deac6c25bc8b5e7b00892934fea53c87bb7128983c7921d72f758112a0020283b22f28a02825206b5cfd1668e117c4c1d3b49ec02a5b4731aff2c3ac1c4062b37903d1b4e4621243629a494fc62b91c92f2d8c378e2c3a0be552af2a05dc3d0dbd7b7ad6e998c94d604101a7e147cf401b041e0ce4996f609b3f5601c77c4922a529080642414245b50103000000008b22a6100000000054741a1a0fbb59012ce3b6c28a9e37487a49113964713cb85485ac24b0b46a5d18785ae8cca9a49ebc11657be3774bca3f93d8326af163290479a77be944370c6b3b763783d6bc086da473b2438389e0d6ae31abbc4a37441b27a6516e57920f05424142450101e2629d073bca188b537fd4715da7f0d3c0be8474a01935f7c25e1c5f374bde742e99423d97698db3975ebbd40819ea352f6d1d1f510dc761c9a623cf3a8975831a0b280402000bd099c93586011a890b1d16042d00400c040000000076b8399ace2a50d5b6fd5cbf464b048178c6fffa047702a416f3d8c8d264ad4a41a4853dc73e37dd91dfaec5d0d41dc01a542a13232cfc56b9372ffcbb83ef840c0401000000d2f839d7eaa667fc2e48a16d98807290e7c10a5ecd2583f8568fcc1bb7d5351e8656146d1365c8619f3202e966877e0f5870c90ecf910ef03f0f1a3dd87266830c0402000000fa36f6a59008ff66a4229c482e8a50315fd5251fc53cd9469b6543bc4930cd2528e827a4fcef270dc9722d37ae23ac04953c4fb08725e1e6bd5615babc42dd800c04030000009497e81b8089a8189918c58c2d5f80690d07f3e0353801e9378efc5a76912b41a8d34b1dd0d93b897441dff3b8c68544bceb9cf27c6e0c83be911ba6eb9574870c04040000006adb55ddc67509b0ddff38ce482fb437d96b0faae302e2b7cf5d5979f5ec45655fafc6045104d9b0d234f42c1ed8ec35c88fe420c8ea6123b780112cb92fa4890c0405000000b80a4c5a180e71a741110b020bacbffba9082d9b76c3e8ce79714be476f144626d6757c6e0efb878754e692c8be83bc2deacd5582f96ceb4f91d68b3e0acaa8a0c0406000000ce8b4daede74064db15bc9a924bc046bde7c9cce04cae4e543266aa691225f2dfc41119900287c9fa43965f82e0e48cc54fc31bf3a06e38a29730b996931e88c0c0407000000b68e00e032c1316faf1415e81501158eba96906b35281f1ff9862dc0b92881430c8d3ae74f16054ab24b313dd3a6e26ca0e57b5206f1a0ee46deb82946a231820c0408000000902e9429fb62ea6de61b0a0da1aae498fe28b27321540848d4ef86c52d684416d3262c3f03826a92dd26eedb5b1ccc220429277822ac0531350c31e43aae90830c04090000007cb92e3ce7438b34d56f5af43af0363520ebd4810c1b8ea8fe717ff1bbcea404528a1765ae3602d3975347ea17554d34613969cdc69718e7fdc47ea7cdc159800c040a0000005ecb6f76ac28e9c9596b46f2571a8380ad0742f7dfae673544b71e7000dbd0039cd13e10fe3e5d7ae14614c5f100f2c72373ea4d2df1f6a34be831db81f62a8a0c040b0000009ca60150ef177cb3168b28470364b611825ad2d86e3e38056b79903d4639205c2799926328d205c4cc66e0f2ca832e6ff8fa4ff9f05f1b57103d63ab465190860c040c00000020aa8c3c211ca39b7d1ae912ef2045064742eb1cb04e073bdb87814386f32a40547f8ba9029d3b830052011273dd6f6bcafdad40efd031bed27fca87747bdf8d0c040d0000006e7204ad9b80e56429c17d0de2aa231dd9b933bb7469bcd124d44aa9c0406b71bedb4a7037bebf8605afb3cf904ed60f359335d9ce2fe3884129f81f4f2e0e850c040e000000a869927414a693a1ff6794fcd975a737434556b1b6970c841657aa831bb1dc1910d9ce3c27d46e59cf4355077ce2b1e76964e0ba5907f2a57a522944e6c73b8b0c040f000000b858993e3b38f0cc7a70b226a40b9a49b11d75ddd0fbf7158d66127830ddca78f50277fe22d6f5b13bf98b82fedaca5fcee11868bbbe3afe2f25ff7d57584583000040a65a5bad9b346fc4d86fe33eadfa0cd49d0378910b0af5e73159ed503611e35eb37903e8c4636bd5f01d9f9a18fa96949787975c9c3b78a0624ae95e3078da20c33605cf34d6de3155b72a0818608103915619964369e8599482e246a4cdf43df1a7500c0642414245b501030f0000008a22a61000000000821ded3b100e3f68e3ae8109c028e91b0d084bfa6458d5a28203e35b2d01e87bf4f8ef774929e4522b451e3abf892dbbb5aaf21ba7870db5e0efa8d481268e0159463ac6be5114cb953e7bb5d070e785b3ace95680bc6040bab4aed1575bed0708054241424501014ea332ce7e94687b6103adaf88e0fd370879926e95834ca700852fdaff0e260857572d8c7798150b0ffdf60d85d90fc6c6bf10c974606307245d4d4683b64e8e")
	// require.NoError(t, err)

	// blockResponse = new(network.BlockResponseMessage)
	// err = blockResponse.Decode(blockResponseBytes)
	// require.NoError(t, err)

	// blockData = blockResponse.BlockData[0]

	// block = &types.Block{
	// 	Header: *blockData.Header,
	// 	Body:   *blockData.Body,
	// }

	// ts, err := storageState.TrieState(&parentBlockStateRoot)
	// require.NoError(t, err)

	// // wnd14576855StateTrie := newTrieFromRPC(t, "../test_data/14576855trie_state_data.json")
	// // expectedStorageRootHash := common.MustHexToHash("0xe8c4636bd5f01d9f9a18fa96949787975c9c3b78a0624ae95e3078da20c33605")
	// // require.Equal(t, expectedStorageRootHash, trie.V0.MustHash(*wnd14576855StateTrie))

	// // state := storage.NewTrieState(wnd14576855StateTrie)
	// instance, err = wazero_runtime.NewInstanceFromTrie(trieState.Trie(), wazero_runtime.Config{
	// 	Storage: ts,
	// 	LogLvl:  log.Critical,
	// })
	// require.NoError(t, err)
	// // instance.version()
	// // instance.SetContextStorage(state)

	// fmt.Printf("Executing block number %d\n", block.Header.Number)

	// _, err = instance.ExecuteBlock(block)
	// require.NoError(t, err)
}
