// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ChainSafe/gossamer/lib/common"

	mock "github.com/stretchr/testify/mock"
)

// PublicKey is an autogenerated mock type for the PublicKey type
type PublicKey struct {
	mock.Mock
}

// Address provides a mock function with given fields:
func (_m *PublicKey) Address() common.Address {
	ret := _m.Called()

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(common.Address)
	}

	return r0
}

// Decode provides a mock function with given fields: _a0
func (_m *PublicKey) Decode(_a0 []byte) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Encode provides a mock function with given fields:
func (_m *PublicKey) Encode() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Hex provides a mock function with given fields:
func (_m *PublicKey) Hex() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Verify provides a mock function with given fields: msg, sig
func (_m *PublicKey) Verify(msg []byte, sig []byte) (bool, error) {
	ret := _m.Called(msg, sig)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte, []byte) bool); ok {
		r0 = rf(msg, sig)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(msg, sig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
