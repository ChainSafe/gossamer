// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	crypto "github.com/ChainSafe/gossamer/lib/crypto"
	mock "github.com/stretchr/testify/mock"
)

// Keypair is an autogenerated mock type for the Keypair type
type Keypair struct {
	mock.Mock
}

// Private provides a mock function with given fields:
func (_m *Keypair) Private() crypto.PrivateKey {
	ret := _m.Called()

	var r0 crypto.PrivateKey
	if rf, ok := ret.Get(0).(func() crypto.PrivateKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PrivateKey)
		}
	}

	return r0
}

// Public provides a mock function with given fields:
func (_m *Keypair) Public() crypto.PublicKey {
	ret := _m.Called()

	var r0 crypto.PublicKey
	if rf, ok := ret.Get(0).(func() crypto.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PublicKey)
		}
	}

	return r0
}

// Sign provides a mock function with given fields: msg
func (_m *Keypair) Sign(msg []byte) ([]byte, error) {
	ret := _m.Called(msg)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Type provides a mock function with given fields:
func (_m *Keypair) Type() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
