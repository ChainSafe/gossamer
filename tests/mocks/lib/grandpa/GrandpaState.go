// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ChainSafe/gossamer/dot/types"
)

// GrandpaState is an autogenerated mock type for the GrandpaState type
type GrandpaState struct {
	mock.Mock
}

// GetAuthorities provides a mock function with given fields: setID
func (_m *GrandpaState) GetAuthorities(setID uint64) ([]*types.GrandpaVoter, error) {
	ret := _m.Called(setID)

	var r0 []*types.GrandpaVoter
	if rf, ok := ret.Get(0).(func(uint64) []*types.GrandpaVoter); ok {
		r0 = rf(setID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.GrandpaVoter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(setID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentSetID provides a mock function with given fields:
func (_m *GrandpaState) GetCurrentSetID() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSetIDByBlockNumber provides a mock function with given fields: num
func (_m *GrandpaState) GetSetIDByBlockNumber(num *big.Int) (uint64, error) {
	ret := _m.Called(num)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(*big.Int) uint64); ok {
		r0 = rf(num)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*big.Int) error); ok {
		r1 = rf(num)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
