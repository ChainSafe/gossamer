// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	crypto "github.com/ChainSafe/gossamer/lib/crypto"

	mock "github.com/stretchr/testify/mock"
)

// Keyring is an autogenerated mock type for the Keyring type
type Keyring struct {
	mock.Mock
}

// Alice provides a mock function with given fields:
func (_m *Keyring) Alice() crypto.Keypair {
	ret := _m.Called()

	var r0 crypto.Keypair
	if rf, ok := ret.Get(0).(func() crypto.Keypair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Keypair)
		}
	}

	return r0
}

// Bob provides a mock function with given fields:
func (_m *Keyring) Bob() crypto.Keypair {
	ret := _m.Called()

	var r0 crypto.Keypair
	if rf, ok := ret.Get(0).(func() crypto.Keypair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Keypair)
		}
	}

	return r0
}

// Charlie provides a mock function with given fields:
func (_m *Keyring) Charlie() crypto.Keypair {
	ret := _m.Called()

	var r0 crypto.Keypair
	if rf, ok := ret.Get(0).(func() crypto.Keypair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Keypair)
		}
	}

	return r0
}

// Dave provides a mock function with given fields:
func (_m *Keyring) Dave() crypto.Keypair {
	ret := _m.Called()

	var r0 crypto.Keypair
	if rf, ok := ret.Get(0).(func() crypto.Keypair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Keypair)
		}
	}

	return r0
}

// Eve provides a mock function with given fields:
func (_m *Keyring) Eve() crypto.Keypair {
	ret := _m.Called()

	var r0 crypto.Keypair
	if rf, ok := ret.Get(0).(func() crypto.Keypair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Keypair)
		}
	}

	return r0
}

// Ferdie provides a mock function with given fields:
func (_m *Keyring) Ferdie() crypto.Keypair {
	ret := _m.Called()

	var r0 crypto.Keypair
	if rf, ok := ret.Get(0).(func() crypto.Keypair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Keypair)
		}
	}

	return r0
}

// George provides a mock function with given fields:
func (_m *Keyring) George() crypto.Keypair {
	ret := _m.Called()

	var r0 crypto.Keypair
	if rf, ok := ret.Get(0).(func() crypto.Keypair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Keypair)
		}
	}

	return r0
}

// Heather provides a mock function with given fields:
func (_m *Keyring) Heather() crypto.Keypair {
	ret := _m.Called()

	var r0 crypto.Keypair
	if rf, ok := ret.Get(0).(func() crypto.Keypair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Keypair)
		}
	}

	return r0
}

// Ian provides a mock function with given fields:
func (_m *Keyring) Ian() crypto.Keypair {
	ret := _m.Called()

	var r0 crypto.Keypair
	if rf, ok := ret.Get(0).(func() crypto.Keypair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Keypair)
		}
	}

	return r0
}
