// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ChainSafe/gossamer/dot/types"
)

// GrandpaState is an autogenerated mock type for the GrandpaState type
type GrandpaState struct {
	mock.Mock
}

// GetCurrentSetID provides a mock function with given fields:
func (_m *GrandpaState) GetCurrentSetID() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementSetID provides a mock function with given fields:
func (_m *GrandpaState) IncrementSetID() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetNextChange provides a mock function with given fields: authorities, number
func (_m *GrandpaState) SetNextChange(authorities []*types.GrandpaVoter, number *big.Int) error {
	ret := _m.Called(authorities, number)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*types.GrandpaVoter, *big.Int) error); ok {
		r0 = rf(authorities, number)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetNextPause provides a mock function with given fields: number
func (_m *GrandpaState) SetNextPause(number *big.Int) error {
	ret := _m.Called(number)

	var r0 error
	if rf, ok := ret.Get(0).(func(*big.Int) error); ok {
		r0 = rf(number)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetNextResume provides a mock function with given fields: number
func (_m *GrandpaState) SetNextResume(number *big.Int) error {
	ret := _m.Called(number)

	var r0 error
	if rf, ok := ret.Get(0).(func(*big.Int) error); ok {
		r0 = rf(number)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
