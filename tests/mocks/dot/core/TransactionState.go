// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ChainSafe/gossamer/lib/common"

	mock "github.com/stretchr/testify/mock"

	transaction "github.com/ChainSafe/gossamer/lib/transaction"

	types "github.com/ChainSafe/gossamer/dot/types"
)

// TransactionState is an autogenerated mock type for the TransactionState type
type TransactionState struct {
	mock.Mock
}

// AddToPool provides a mock function with given fields: vt
func (_m *TransactionState) AddToPool(vt *transaction.ValidTransaction) common.Hash {
	ret := _m.Called(vt)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*transaction.ValidTransaction) common.Hash); ok {
		r0 = rf(vt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// PendingInPool provides a mock function with given fields:
func (_m *TransactionState) PendingInPool() []*transaction.ValidTransaction {
	ret := _m.Called()

	var r0 []*transaction.ValidTransaction
	if rf, ok := ret.Get(0).(func() []*transaction.ValidTransaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*transaction.ValidTransaction)
		}
	}

	return r0
}

// Push provides a mock function with given fields: vt
func (_m *TransactionState) Push(vt *transaction.ValidTransaction) (common.Hash, error) {
	ret := _m.Called(vt)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*transaction.ValidTransaction) common.Hash); ok {
		r0 = rf(vt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*transaction.ValidTransaction) error); ok {
		r1 = rf(vt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveExtrinsic provides a mock function with given fields: ext
func (_m *TransactionState) RemoveExtrinsic(ext types.Extrinsic) {
	_m.Called(ext)
}

// RemoveExtrinsicFromPool provides a mock function with given fields: ext
func (_m *TransactionState) RemoveExtrinsicFromPool(ext types.Extrinsic) {
	_m.Called(ext)
}
