// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ChainSafe/gossamer/lib/common"
	mock "github.com/stretchr/testify/mock"
)

// NetworkAPI is an autogenerated mock type for the NetworkAPI type
type NetworkAPI struct {
	mock.Mock
}

// Health provides a mock function with given fields:
func (_m *NetworkAPI) Health() common.Health {
	ret := _m.Called()

	var r0 common.Health
	if rf, ok := ret.Get(0).(func() common.Health); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(common.Health)
	}

	return r0
}

// IsStopped provides a mock function with given fields:
func (_m *NetworkAPI) IsStopped() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NetworkState provides a mock function with given fields:
func (_m *NetworkAPI) NetworkState() common.NetworkState {
	ret := _m.Called()

	var r0 common.NetworkState
	if rf, ok := ret.Get(0).(func() common.NetworkState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(common.NetworkState)
	}

	return r0
}

// NodeRoles provides a mock function with given fields:
func (_m *NetworkAPI) NodeRoles() byte {
	ret := _m.Called()

	var r0 byte
	if rf, ok := ret.Get(0).(func() byte); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(byte)
	}

	return r0
}

// Peers provides a mock function with given fields:
func (_m *NetworkAPI) Peers() []common.PeerInfo {
	ret := _m.Called()

	var r0 []common.PeerInfo
	if rf, ok := ret.Get(0).(func() []common.PeerInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.PeerInfo)
		}
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *NetworkAPI) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *NetworkAPI) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
