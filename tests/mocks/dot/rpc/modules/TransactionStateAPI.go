// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ChainSafe/gossamer/lib/common"
	mock "github.com/stretchr/testify/mock"

	transaction "github.com/ChainSafe/gossamer/lib/transaction"
)

// TransactionStateAPI is an autogenerated mock type for the TransactionStateAPI type
type TransactionStateAPI struct {
	mock.Mock
}

// AddToPool provides a mock function with given fields: _a0
func (_m *TransactionStateAPI) AddToPool(_a0 *transaction.ValidTransaction) common.Hash {
	ret := _m.Called(_a0)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*transaction.ValidTransaction) common.Hash); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// Peek provides a mock function with given fields:
func (_m *TransactionStateAPI) Peek() *transaction.ValidTransaction {
	ret := _m.Called()

	var r0 *transaction.ValidTransaction
	if rf, ok := ret.Get(0).(func() *transaction.ValidTransaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.ValidTransaction)
		}
	}

	return r0
}

// Pending provides a mock function with given fields:
func (_m *TransactionStateAPI) Pending() []*transaction.ValidTransaction {
	ret := _m.Called()

	var r0 []*transaction.ValidTransaction
	if rf, ok := ret.Get(0).(func() []*transaction.ValidTransaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*transaction.ValidTransaction)
		}
	}

	return r0
}

// Pop provides a mock function with given fields:
func (_m *TransactionStateAPI) Pop() *transaction.ValidTransaction {
	ret := _m.Called()

	var r0 *transaction.ValidTransaction
	if rf, ok := ret.Get(0).(func() *transaction.ValidTransaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.ValidTransaction)
		}
	}

	return r0
}
