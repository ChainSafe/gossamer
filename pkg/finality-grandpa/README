# finality-grandpa

**GRANDPA**, **G**HOST-based **R**ecursive **AN**cestor **D**eriving **P**refix **A**greement, is a
finality gadget for blockchains, implemented in Go, ported from the [parity rust implementation][rust-impl]. It 
allows a set of nodes to come to BFT agreement on what is the canonical chain, which is produced by 
some external block production mechanism. It works under the assumption of a partially synchronous 
network model and with the presence of up to 1/3 Byzantine nodes.

### Integration

This package only implements the state machine for the GRANDPA protocol. In order to use this package it
is necessary to implement some interfaces to do the integration which are responsible for providing 
access to the underyling blockchain and setting up all the network communication.

#### `Chain`

The `Chain` interface allows the GRANDPA voter to check ancestry of a given block and also to query the
best block in a given chain (which will be used for voting on).

#### `Environment`

The `Environment` trait defines the types that will be used for the input and output stream to
receive and broadcast messages. It is also responsible for setting these up for a given round
(through `RoundData`), as well as timers which are used for timeouts in the protocol.

The interface exposes callbacks for the full lifecycle of a round:

- proposed
- prevoted
- precommitted
- completed

As well as callbacks for notifying about block finality and voter misbehavior (equivocations).

## Resources

- [White paper][paper]
- [Parity rust implementation][rust-impl]

[paper]: https://github.com/w3f/consensus/blob/master/pdf/grandpa.pdf
[rust-impl]: https://github.com/paritytech/finality-grandpa