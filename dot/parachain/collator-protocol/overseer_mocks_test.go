// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ChainSafe/gossamer/dot/parachain/overseer (interfaces: OverseerI)
//
// Generated by this command:
//
//	mockgen -destination=overseer_mocks_test.go -package=collatorprotocol github.com/ChainSafe/gossamer/dot/parachain/overseer OverseerI
//

// Package collatorprotocol is a generated GoMock package.
package collatorprotocol

import (
	reflect "reflect"

	overseer "github.com/ChainSafe/gossamer/dot/parachain/overseer"
	gomock "go.uber.org/mock/gomock"
)

// MockOverseerI is a mock of OverseerI interface.
type MockOverseerI struct {
	ctrl     *gomock.Controller
	recorder *MockOverseerIMockRecorder
}

// MockOverseerIMockRecorder is the mock recorder for MockOverseerI.
type MockOverseerIMockRecorder struct {
	mock *MockOverseerI
}

// NewMockOverseerI creates a new mock instance.
func NewMockOverseerI(ctrl *gomock.Controller) *MockOverseerI {
	mock := &MockOverseerI{ctrl: ctrl}
	mock.recorder = &MockOverseerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOverseerI) EXPECT() *MockOverseerIMockRecorder {
	return m.recorder
}

// RegisterSubsystem mocks base method.
func (m *MockOverseerI) RegisterSubsystem(arg0 overseer.Subsystem) chan any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSubsystem", arg0)
	ret0, _ := ret[0].(chan any)
	return ret0
}

// RegisterSubsystem indicates an expected call of RegisterSubsystem.
func (mr *MockOverseerIMockRecorder) RegisterSubsystem(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSubsystem", reflect.TypeOf((*MockOverseerI)(nil).RegisterSubsystem), arg0)
}

// Send mocks base method.
func (m *MockOverseerI) Send(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", arg0)
}

// Send indicates an expected call of Send.
func (mr *MockOverseerIMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockOverseerI)(nil).Send), arg0)
}

// Start mocks base method.
func (m *MockOverseerI) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockOverseerIMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockOverseerI)(nil).Start))
}

// Stop mocks base method.
func (m *MockOverseerI) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockOverseerIMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockOverseerI)(nil).Stop))
}
