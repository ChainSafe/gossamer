package messages

import (
	parachaintypes "github.com/ChainSafe/gossamer/dot/parachain/types"
	"github.com/ChainSafe/gossamer/lib/common"
)

type CollateOn parachaintypes.ParaID

type DistributeCollation struct {
	CandidateReceipt parachaintypes.CandidateReceipt
	PoV              parachaintypes.PoV
}

type ReportCollator parachaintypes.CollatorID

type NetworkBridgeUpdate struct {
	// TODO: not quite sure if we would need this or something similar to this
}

// SecondedOverseerMsg represents that the candidate we recommended to be seconded was validated
// successfully.
type SecondedOverseerMsg struct {
	Parent common.Hash
	Stmt   parachaintypes.UncheckedSignedFullStatement
}

// Backed message indicates that the candidate received enough validity votes from the backing group.
type Backed struct {
	ParaID parachaintypes.ParaID
	// Hash of the para head generated by candidate
	ParaHead common.Hash
}

// InvalidOverseerMsg represents an invalid candidata.
// We recommended a particular candidate to be seconded, but it was invalid; penalise the collator.
type InvalidOverseerMsg struct {
	Parent           common.Hash
	CandidateReceipt parachaintypes.CandidateReceipt
}
