// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ChainSafe/gossamer/dot/parachain/runtime (interfaces: ValidatorInstance)
//
// Generated by this command:
//
//	mockgen -destination=mocks_validation_instance_test.go -package candidatevalidation github.com/ChainSafe/gossamer/dot/parachain/runtime ValidatorInstance
//

// Package candidatevalidation is a generated GoMock package.
package candidatevalidation

import (
	reflect "reflect"

	parachain "github.com/ChainSafe/gossamer/dot/parachain/runtime"
	gomock "go.uber.org/mock/gomock"
)

// MockValidatorInstance is a mock of ValidatorInstance interface.
type MockValidatorInstance struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorInstanceMockRecorder
}

// MockValidatorInstanceMockRecorder is the mock recorder for MockValidatorInstance.
type MockValidatorInstanceMockRecorder struct {
	mock *MockValidatorInstance
}

// NewMockValidatorInstance creates a new mock instance.
func NewMockValidatorInstance(ctrl *gomock.Controller) *MockValidatorInstance {
	mock := &MockValidatorInstance{ctrl: ctrl}
	mock.recorder = &MockValidatorInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatorInstance) EXPECT() *MockValidatorInstanceMockRecorder {
	return m.recorder
}

// ValidateBlock mocks base method.
func (m *MockValidatorInstance) ValidateBlock(arg0 parachain.ValidationParameters) (*parachain.ValidationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBlock", arg0)
	ret0, _ := ret[0].(*parachain.ValidationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateBlock indicates an expected call of ValidateBlock.
func (mr *MockValidatorInstanceMockRecorder) ValidateBlock(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBlock", reflect.TypeOf((*MockValidatorInstance)(nil).ValidateBlock), arg0)
}
