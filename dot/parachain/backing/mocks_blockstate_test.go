// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ChainSafe/gossamer/dot/parachain/backing (interfaces: Blockstate)
//
// Generated by this command:
//
//	mockgen -destination=mocks_blockstate_test.go -package=backing . Blockstate
//

// Package backing is a generated GoMock package.
package backing

import (
	reflect "reflect"

	common "github.com/ChainSafe/gossamer/lib/common"
	runtime "github.com/ChainSafe/gossamer/lib/runtime"
	gomock "go.uber.org/mock/gomock"
)

// MockBlockstate is a mock of Blockstate interface.
type MockBlockstate struct {
	ctrl     *gomock.Controller
	recorder *MockBlockstateMockRecorder
}

// MockBlockstateMockRecorder is the mock recorder for MockBlockstate.
type MockBlockstateMockRecorder struct {
	mock *MockBlockstate
}

// NewMockBlockstate creates a new mock instance.
func NewMockBlockstate(ctrl *gomock.Controller) *MockBlockstate {
	mock := &MockBlockstate{ctrl: ctrl}
	mock.recorder = &MockBlockstateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockstate) EXPECT() *MockBlockstateMockRecorder {
	return m.recorder
}

// GetRuntime mocks base method.
func (m *MockBlockstate) GetRuntime(arg0 common.Hash) (runtime.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntime", arg0)
	ret0, _ := ret[0].(runtime.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuntime indicates an expected call of GetRuntime.
func (mr *MockBlockstateMockRecorder) GetRuntime(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntime", reflect.TypeOf((*MockBlockstate)(nil).GetRuntime), arg0)
}
