package types

import (
	"github.com/ChainSafe/gossamer/lib/common"
	"github.com/ChainSafe/gossamer/lib/crypto"
	"github.com/ChainSafe/gossamer/lib/crypto/sr25519"
	"github.com/ChainSafe/gossamer/pkg/scale"
	"github.com/centrifuge/go-substrate-rpc-client/v4/types"
)

// ValidatorID represents a validator ID
type ValidatorID [sr25519.PublicKeyLength]byte

// Validator represents a validator
type Validator struct {
	Key crypto.PublicKey
}

// FromRawSr25519 sets the Validator given ValidatorID. It converts the byte representations of
// the authority public keys into a sr25519.PublicKey.
func (a *Validator) FromRawSr25519(id ValidatorID) error {
	key, err := sr25519.NewPublicKey(id[:])
	if err != nil {
		return err
	}

	a.Key = key
	return nil
}

// ValidatorIDToValidator turns a slice of ValidatorID into a slice of Validator
func ValidatorIDToValidator(ids []ValidatorID) ([]Validator, error) {
	validators := make([]Validator, len(ids))
	for i, r := range ids {
		validators[i] = Validator{}
		err := validators[i].FromRawSr25519(r)
		if err != nil {
			return nil, err
		}
	}

	return validators, nil
}

// ValidatorIndex represents a validator index
type ValidatorIndex uint32

// GroupRotationInfo represents the group rotation info
type GroupRotationInfo struct {
	// SessionStartBlock is the block number at which the session started
	SessionStartBlock uint64 `scale:"1"`
	// GroupRotationFrequency indicates how often groups rotate. 0 means never.
	GroupRotationFrequency uint64 `scale:"2"`
	// Now indicates the current block number.
	Now uint64 `scale:"3"`
}

type ValidatorGroups struct {
	// Validators is an array the validator set Ids
	Validators [][]ValidatorIndex `scale:"1"`
	// GroupRotationInfo is the group rotation info
	GroupRotationInfo GroupRotationInfo `scale:"2"`
}

//

// ParaID The ID of a para scheduled.
type ParaID uint32

// GroupIndex The unique (during session) index of a validator group.
type GroupIndex uint32

// CollatorID represents a collator ID
type CollatorID [sr25519.PublicKeyLength]byte

// Collator represents a collator
type Collator struct {
	Key crypto.PublicKey
}

// CollatorSignature is the signature on a candidate's block data signed by a collator.
type CollatorSignature [sr25519.SignatureLength]byte

// ValidationCodeHash is the blake2-256 hash of the validation code bytes.
type ValidationCodeHash common.Hash

// CandidateDescriptor is a unique descriptor of the candidate receipt.
type CandidateDescriptor struct {
	// The ID of the para this is a candidate for.
	ParaID uint32 `scale:"1"`

	// RelayParent is the hash of the relay-chain block this should be executed in
	// the context of.
	// NOTE: the fact that the hash includes this value means that code depends
	// on this for deduplication. Removing this field is likely to break things.
	RelayParent common.Hash `scale:"2"`

	// Collator is the collator's relay-chain account ID
	Collator sr25519.PublicKey `scale:"3"`

	// PersistedValidationDataHash is the blake2-256 hash of the persisted validation data. This is extra data derived from
	// relay-chain state which may vary based on bitfields included before the candidate.
	// Thus, it cannot be derived entirely from the relay-parent.
	PersistedValidationDataHash common.Hash `scale:"4"`

	// PovHash is the hash of the `pov-block`.
	PovHash common.Hash `scale:"5"`
	// ErasureRoot is the root of a block's erasure encoding Merkle tree.
	ErasureRoot common.Hash `scale:"6"`

	// Signature on blake2-256 of components of this receipt:
	// The parachain index, the relay parent, the validation data hash, and the `pov_hash`.
	// this is basically sr25519::Signature
	Signature CollatorSignature `scale:"7"`

	// ParaHead is the hash of the para header that is being generated by this candidate.
	ParaHead common.Hash `scale:"8"`
	// ValidationCodeHash is the blake2-256 hash of the validation code bytes.
	ValidationCodeHash ValidationCodeHash `scale:"9"`
}

// ScheduledCore Information about a core which is currently occupied.
type ScheduledCore struct {
	// The ID of a para scheduled.
	ParaID ParaID
	// The collator required to author the block, if any.
	Collator *Collator
}

// OccupiedCore Information about a core which is currently occupied.
type OccupiedCore struct {
	// NOTE: this has no ParaId as it can be deduced from the candidate descriptor.
	// If this core is freed by availability, this is the assignment that is next up on this
	// core, if any. None if there is nothing queued for this core.
	NextUpOnAvailable *ScheduledCore `scale:"1"`
	// The relay-chain block number this began occupying the core at.
	OccupiedSince types.BlockNumber `scale:"2"`
	// The relay-chain block this will time-out at, if any.
	TimeoutAt types.BlockNumber `scale:"3"`
	// If this core is freed by being timed-out, this is the assignment that is next up on this
	// core. None if there is nothing queued for this core or there is no possibility of timing
	// out.
	NextUpOnTimeOut *ScheduledCore `scale:"4"`
	// A bitfield with 1 bit for each validator in the set. `1` bits mean that the corresponding
	// validators has attested to availability on-chain. A 2/3+ majority of `1` bits means that
	// this will be available.
	// TODO: this should be a bitvec
	Availability []byte `scale:"5"`
	// The group assigned to distribute availability pieces of this candidate.
	GroupResponsible GroupIndex `scale:"6"`
	// The hash of the candidate occupying the core.
	CandidateHash common.Hash `scale:"7"`
	// The descriptor of the candidate occupying the core.
	CandidateDescriptor types.CandidateDescriptor `scale:"8"`
}

type Occupied scale.VaryingDataType

func (Occupied) Index() uint {
	return 0
}

type Scheduled scale.VaryingDataType

func (Scheduled) Index() uint {
	return 1
}

type Free scale.VaryingDataType

func (Free) Index() uint {
	return 2
}
