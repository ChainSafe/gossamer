// Code generated by mockery v2.8.0. DO NOT EDIT.

package modules

import (
	ed25519 "github.com/ChainSafe/gossamer/lib/crypto/ed25519"
	grandpa "github.com/ChainSafe/gossamer/lib/grandpa"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ChainSafe/gossamer/dot/types"
)

// MockBlockFinalityAPI is an autogenerated mock type for the BlockFinalityAPI type
type MockBlockFinalityAPI struct {
	mock.Mock
}

// GetRound provides a mock function with given fields:
func (_m *MockBlockFinalityAPI) GetRound() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetSetID provides a mock function with given fields:
func (_m *MockBlockFinalityAPI) GetSetID() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetVoters provides a mock function with given fields:
func (_m *MockBlockFinalityAPI) GetVoters() types.GrandpaVoters {
	ret := _m.Called()

	var r0 types.GrandpaVoters
	if rf, ok := ret.Get(0).(func() types.GrandpaVoters); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.GrandpaVoters)
		}
	}

	return r0
}

// PreCommits provides a mock function with given fields:
func (_m *MockBlockFinalityAPI) PreCommits() (map[ed25519.PublicKeyBytes]*grandpa.Vote, map[ed25519.PublicKeyBytes][]*grandpa.Vote) {
	ret := _m.Called()

	var r0 map[ed25519.PublicKeyBytes]*grandpa.Vote
	if rf, ok := ret.Get(0).(func() map[ed25519.PublicKeyBytes]*grandpa.Vote); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[ed25519.PublicKeyBytes]*grandpa.Vote)
		}
	}

	var r1 map[ed25519.PublicKeyBytes][]*grandpa.Vote
	if rf, ok := ret.Get(1).(func() map[ed25519.PublicKeyBytes][]*grandpa.Vote); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[ed25519.PublicKeyBytes][]*grandpa.Vote)
		}
	}

	return r0, r1
}

// PreVotes provides a mock function with given fields:
func (_m *MockBlockFinalityAPI) PreVotes() (map[ed25519.PublicKeyBytes]*grandpa.Vote, map[ed25519.PublicKeyBytes][]*grandpa.Vote) {
	ret := _m.Called()

	var r0 map[ed25519.PublicKeyBytes]*grandpa.Vote
	if rf, ok := ret.Get(0).(func() map[ed25519.PublicKeyBytes]*grandpa.Vote); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[ed25519.PublicKeyBytes]*grandpa.Vote)
		}
	}

	var r1 map[ed25519.PublicKeyBytes][]*grandpa.Vote
	if rf, ok := ret.Get(1).(func() map[ed25519.PublicKeyBytes][]*grandpa.Vote); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[ed25519.PublicKeyBytes][]*grandpa.Vote)
		}
	}

	return r0, r1
}
