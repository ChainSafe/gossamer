// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces_mock_source.go

// Package modules is a generated GoMock package.
package modules

import (
	json "encoding/json"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MocktelemetryClient is a mock of telemetryClient interface.
type MocktelemetryClient struct {
	ctrl     *gomock.Controller
	recorder *MocktelemetryClientMockRecorder
}

// MocktelemetryClientMockRecorder is the mock recorder for MocktelemetryClient.
type MocktelemetryClientMockRecorder struct {
	mock *MocktelemetryClient
}

// NewMocktelemetryClient creates a new mock instance.
func NewMocktelemetryClient(ctrl *gomock.Controller) *MocktelemetryClient {
	mock := &MocktelemetryClient{ctrl: ctrl}
	mock.recorder = &MocktelemetryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktelemetryClient) EXPECT() *MocktelemetryClientMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MocktelemetryClient) SendMessage(msg json.Marshaler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessage", msg)
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MocktelemetryClientMockRecorder) SendMessage(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MocktelemetryClient)(nil).SendMessage), msg)
}
