// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ChainSafe/gossamer/dot/core (interfaces: DigestHandler)

// Package rpc is a generated GoMock package.
package rpc

import (
	reflect "reflect"

	types "github.com/ChainSafe/gossamer/dot/types"
	gomock "github.com/golang/mock/gomock"
)

// MockDigestHandler is a mock of DigestHandler interface.
type MockDigestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDigestHandlerMockRecorder
}

// MockDigestHandlerMockRecorder is the mock recorder for MockDigestHandler.
type MockDigestHandlerMockRecorder struct {
	mock *MockDigestHandler
}

// NewMockDigestHandler creates a new mock instance.
func NewMockDigestHandler(ctrl *gomock.Controller) *MockDigestHandler {
	mock := &MockDigestHandler{ctrl: ctrl}
	mock.recorder = &MockDigestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDigestHandler) EXPECT() *MockDigestHandlerMockRecorder {
	return m.recorder
}

// HandleDigests mocks base method.
func (m *MockDigestHandler) HandleDigests(arg0 *types.Header) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleDigests", arg0)
}

// HandleDigests indicates an expected call of HandleDigests.
func (mr *MockDigestHandlerMockRecorder) HandleDigests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDigests", reflect.TypeOf((*MockDigestHandler)(nil).HandleDigests), arg0)
}
