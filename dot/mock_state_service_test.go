// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ChainSafe/gossamer/dot/state (interfaces: Service)

// Package dot is a generated GoMock package.
package dot

import (
	reflect "reflect"

	chaindb "github.com/ChainSafe/chaindb"
	state "github.com/ChainSafe/gossamer/dot/state"
	telemetry "github.com/ChainSafe/gossamer/dot/telemetry"
	types "github.com/ChainSafe/gossamer/dot/types"
	common "github.com/ChainSafe/gossamer/lib/common"
	genesis "github.com/ChainSafe/gossamer/lib/genesis"
	runtime "github.com/ChainSafe/gossamer/lib/runtime"
	trie "github.com/ChainSafe/gossamer/lib/trie"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// BaseState mocks base method.
func (m *MockService) BaseState() *state.BaseState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseState")
	ret0, _ := ret[0].(*state.BaseState)
	return ret0
}

// BaseState indicates an expected call of BaseState.
func (mr *MockServiceMockRecorder) BaseState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseState", reflect.TypeOf((*MockService)(nil).BaseState))
}

// BlockState mocks base method.
func (m *MockService) BlockState() *state.BlockState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockState")
	ret0, _ := ret[0].(*state.BlockState)
	return ret0
}

// BlockState indicates an expected call of BlockState.
func (mr *MockServiceMockRecorder) BlockState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockState", reflect.TypeOf((*MockService)(nil).BlockState))
}

// CreateGenesisRuntime mocks base method.
func (m *MockService) CreateGenesisRuntime(arg0 *trie.Trie, arg1 *genesis.Genesis) (runtime.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenesisRuntime", arg0, arg1)
	ret0, _ := ret[0].(runtime.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenesisRuntime indicates an expected call of CreateGenesisRuntime.
func (mr *MockServiceMockRecorder) CreateGenesisRuntime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenesisRuntime", reflect.TypeOf((*MockService)(nil).CreateGenesisRuntime), arg0, arg1)
}

// DB mocks base method.
func (m *MockService) DB() chaindb.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(chaindb.Database)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockServiceMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockService)(nil).DB))
}

// EpochState mocks base method.
func (m *MockService) EpochState() *state.EpochState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpochState")
	ret0, _ := ret[0].(*state.EpochState)
	return ret0
}

// EpochState indicates an expected call of EpochState.
func (mr *MockServiceMockRecorder) EpochState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpochState", reflect.TypeOf((*MockService)(nil).EpochState))
}

// GrandpaState mocks base method.
func (m *MockService) GrandpaState() *state.GrandpaState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrandpaState")
	ret0, _ := ret[0].(*state.GrandpaState)
	return ret0
}

// GrandpaState indicates an expected call of GrandpaState.
func (mr *MockServiceMockRecorder) GrandpaState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrandpaState", reflect.TypeOf((*MockService)(nil).GrandpaState))
}

// Import mocks base method.
func (m *MockService) Import(arg0 *types.Header, arg1 *trie.Trie, arg2 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Import", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Import indicates an expected call of Import.
func (mr *MockServiceMockRecorder) Import(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockService)(nil).Import), arg0, arg1, arg2)
}

// Initialise mocks base method.
func (m *MockService) Initialise(arg0 *genesis.Genesis, arg1 *types.Header, arg2 *trie.Trie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialise", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialise indicates an expected call of Initialise.
func (mr *MockServiceMockRecorder) Initialise(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialise", reflect.TypeOf((*MockService)(nil).Initialise), arg0, arg1, arg2)
}

// Rewind mocks base method.
func (m *MockService) Rewind(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rewind", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rewind indicates an expected call of Rewind.
func (mr *MockServiceMockRecorder) Rewind(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rewind", reflect.TypeOf((*MockService)(nil).Rewind), arg0)
}

// SetBlockState mocks base method.
func (m *MockService) SetBlockState(arg0 *state.BlockState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBlockState", arg0)
}

// SetBlockState indicates an expected call of SetBlockState.
func (mr *MockServiceMockRecorder) SetBlockState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlockState", reflect.TypeOf((*MockService)(nil).SetBlockState), arg0)
}

// SetEpochState mocks base method.
func (m *MockService) SetEpochState(arg0 *state.EpochState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEpochState", arg0)
}

// SetEpochState indicates an expected call of SetEpochState.
func (mr *MockServiceMockRecorder) SetEpochState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEpochState", reflect.TypeOf((*MockService)(nil).SetEpochState), arg0)
}

// SetTelemetryClient mocks base method.
func (m *MockService) SetTelemetryClient(arg0 telemetry.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTelemetryClient", arg0)
}

// SetTelemetryClient indicates an expected call of SetTelemetryClient.
func (mr *MockServiceMockRecorder) SetTelemetryClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTelemetryClient", reflect.TypeOf((*MockService)(nil).SetTelemetryClient), arg0)
}

// SetupBase mocks base method.
func (m *MockService) SetupBase() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupBase")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupBase indicates an expected call of SetupBase.
func (mr *MockServiceMockRecorder) SetupBase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupBase", reflect.TypeOf((*MockService)(nil).SetupBase))
}

// Start mocks base method.
func (m *MockService) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServiceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockService)(nil).Start))
}

// Stop mocks base method.
func (m *MockService) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockService)(nil).Stop))
}

// StorageEntries mocks base method.
func (m *MockService) StorageEntries(arg0 *common.Hash) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageEntries", arg0)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageEntries indicates an expected call of StorageEntries.
func (mr *MockServiceMockRecorder) StorageEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageEntries", reflect.TypeOf((*MockService)(nil).StorageEntries), arg0)
}

// StorageState mocks base method.
func (m *MockService) StorageState() *state.StorageState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageState")
	ret0, _ := ret[0].(*state.StorageState)
	return ret0
}

// StorageState indicates an expected call of StorageState.
func (mr *MockServiceMockRecorder) StorageState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageState", reflect.TypeOf((*MockService)(nil).StorageState))
}

// TransactionState mocks base method.
func (m *MockService) TransactionState() *state.TransactionState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionState")
	ret0, _ := ret[0].(*state.TransactionState)
	return ret0
}

// TransactionState indicates an expected call of TransactionState.
func (mr *MockServiceMockRecorder) TransactionState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionState", reflect.TypeOf((*MockService)(nil).TransactionState))
}

// UseMemDB mocks base method.
func (m *MockService) UseMemDB() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseMemDB")
}

// UseMemDB indicates an expected call of UseMemDB.
func (mr *MockServiceMockRecorder) UseMemDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseMemDB", reflect.TypeOf((*MockService)(nil).UseMemDB))
}
