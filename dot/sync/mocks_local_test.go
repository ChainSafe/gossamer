// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces_mock_source.go

// Package sync is a generated GoMock package.
package sync

import (
	reflect "reflect"

	types "github.com/ChainSafe/gossamer/dot/types"
	common "github.com/ChainSafe/gossamer/lib/common"
	gomock "github.com/golang/mock/gomock"
	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockreadyBlocksProcessor is a mock of readyBlocksProcessor interface.
type MockreadyBlocksProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockreadyBlocksProcessorMockRecorder
}

// MockreadyBlocksProcessorMockRecorder is the mock recorder for MockreadyBlocksProcessor.
type MockreadyBlocksProcessorMockRecorder struct {
	mock *MockreadyBlocksProcessor
}

// NewMockreadyBlocksProcessor creates a new mock instance.
func NewMockreadyBlocksProcessor(ctrl *gomock.Controller) *MockreadyBlocksProcessor {
	mock := &MockreadyBlocksProcessor{ctrl: ctrl}
	mock.recorder = &MockreadyBlocksProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockreadyBlocksProcessor) EXPECT() *MockreadyBlocksProcessorMockRecorder {
	return m.recorder
}

// processReadyBlocks mocks base method.
func (m *MockreadyBlocksProcessor) processReadyBlocks() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "processReadyBlocks")
}

// processReadyBlocks indicates an expected call of processReadyBlocks.
func (mr *MockreadyBlocksProcessorMockRecorder) processReadyBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processReadyBlocks", reflect.TypeOf((*MockreadyBlocksProcessor)(nil).processReadyBlocks))
}

// stop mocks base method.
func (m *MockreadyBlocksProcessor) stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "stop")
}

// stop indicates an expected call of stop.
func (mr *MockreadyBlocksProcessorMockRecorder) stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "stop", reflect.TypeOf((*MockreadyBlocksProcessor)(nil).stop))
}

// MockdisjointBlockSetInterface is a mock of disjointBlockSetInterface interface.
type MockdisjointBlockSetInterface struct {
	ctrl     *gomock.Controller
	recorder *MockdisjointBlockSetInterfaceMockRecorder
}

// MockdisjointBlockSetInterfaceMockRecorder is the mock recorder for MockdisjointBlockSetInterface.
type MockdisjointBlockSetInterfaceMockRecorder struct {
	mock *MockdisjointBlockSetInterface
}

// NewMockdisjointBlockSetInterface creates a new mock instance.
func NewMockdisjointBlockSetInterface(ctrl *gomock.Controller) *MockdisjointBlockSetInterface {
	mock := &MockdisjointBlockSetInterface{ctrl: ctrl}
	mock.recorder = &MockdisjointBlockSetInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdisjointBlockSetInterface) EXPECT() *MockdisjointBlockSetInterfaceMockRecorder {
	return m.recorder
}

// addBlock mocks base method.
func (m *MockdisjointBlockSetInterface) addBlock(arg0 *types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// addBlock indicates an expected call of addBlock.
func (mr *MockdisjointBlockSetInterfaceMockRecorder) addBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addBlock", reflect.TypeOf((*MockdisjointBlockSetInterface)(nil).addBlock), arg0)
}

// addHashAndNumber mocks base method.
func (m *MockdisjointBlockSetInterface) addHashAndNumber(hash common.Hash, number uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addHashAndNumber", hash, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// addHashAndNumber indicates an expected call of addHashAndNumber.
func (mr *MockdisjointBlockSetInterfaceMockRecorder) addHashAndNumber(hash, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addHashAndNumber", reflect.TypeOf((*MockdisjointBlockSetInterface)(nil).addHashAndNumber), hash, number)
}

// addHeader mocks base method.
func (m *MockdisjointBlockSetInterface) addHeader(arg0 *types.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// addHeader indicates an expected call of addHeader.
func (mr *MockdisjointBlockSetInterfaceMockRecorder) addHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addHeader", reflect.TypeOf((*MockdisjointBlockSetInterface)(nil).addHeader), arg0)
}

// addJustification mocks base method.
func (m *MockdisjointBlockSetInterface) addJustification(arg0 common.Hash, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addJustification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// addJustification indicates an expected call of addJustification.
func (mr *MockdisjointBlockSetInterfaceMockRecorder) addJustification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addJustification", reflect.TypeOf((*MockdisjointBlockSetInterface)(nil).addJustification), arg0, arg1)
}

// getBlock mocks base method.
func (m *MockdisjointBlockSetInterface) getBlock(arg0 common.Hash) *pendingBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getBlock", arg0)
	ret0, _ := ret[0].(*pendingBlock)
	return ret0
}

// getBlock indicates an expected call of getBlock.
func (mr *MockdisjointBlockSetInterfaceMockRecorder) getBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getBlock", reflect.TypeOf((*MockdisjointBlockSetInterface)(nil).getBlock), arg0)
}

// getBlocks mocks base method.
func (m *MockdisjointBlockSetInterface) getBlocks() []*pendingBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getBlocks")
	ret0, _ := ret[0].([]*pendingBlock)
	return ret0
}

// getBlocks indicates an expected call of getBlocks.
func (mr *MockdisjointBlockSetInterfaceMockRecorder) getBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getBlocks", reflect.TypeOf((*MockdisjointBlockSetInterface)(nil).getBlocks))
}

// getReadyDescendants mocks base method.
func (m *MockdisjointBlockSetInterface) getReadyDescendants(curr common.Hash, ready []*types.BlockData) []*types.BlockData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getReadyDescendants", curr, ready)
	ret0, _ := ret[0].([]*types.BlockData)
	return ret0
}

// getReadyDescendants indicates an expected call of getReadyDescendants.
func (mr *MockdisjointBlockSetInterfaceMockRecorder) getReadyDescendants(curr, ready interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getReadyDescendants", reflect.TypeOf((*MockdisjointBlockSetInterface)(nil).getReadyDescendants), curr, ready)
}

// removeBlock mocks base method.
func (m *MockdisjointBlockSetInterface) removeBlock(arg0 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "removeBlock", arg0)
}

// removeBlock indicates an expected call of removeBlock.
func (mr *MockdisjointBlockSetInterfaceMockRecorder) removeBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "removeBlock", reflect.TypeOf((*MockdisjointBlockSetInterface)(nil).removeBlock), arg0)
}

// removeLowerBlocks mocks base method.
func (m *MockdisjointBlockSetInterface) removeLowerBlocks(num uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "removeLowerBlocks", num)
}

// removeLowerBlocks indicates an expected call of removeLowerBlocks.
func (mr *MockdisjointBlockSetInterfaceMockRecorder) removeLowerBlocks(num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "removeLowerBlocks", reflect.TypeOf((*MockdisjointBlockSetInterface)(nil).removeLowerBlocks), num)
}

// run mocks base method.
func (m *MockdisjointBlockSetInterface) run(done <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "run", done)
}

// run indicates an expected call of run.
func (mr *MockdisjointBlockSetInterfaceMockRecorder) run(done interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "run", reflect.TypeOf((*MockdisjointBlockSetInterface)(nil).run), done)
}

// size mocks base method.
func (m *MockdisjointBlockSetInterface) size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "size")
	ret0, _ := ret[0].(int)
	return ret0
}

// size indicates an expected call of size.
func (mr *MockdisjointBlockSetInterfaceMockRecorder) size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "size", reflect.TypeOf((*MockdisjointBlockSetInterface)(nil).size))
}

// MockchainSyncer is a mock of chainSyncer interface.
type MockchainSyncer struct {
	ctrl     *gomock.Controller
	recorder *MockchainSyncerMockRecorder
}

// MockchainSyncerMockRecorder is the mock recorder for MockchainSyncer.
type MockchainSyncerMockRecorder struct {
	mock *MockchainSyncer
}

// NewMockchainSyncer creates a new mock instance.
func NewMockchainSyncer(ctrl *gomock.Controller) *MockchainSyncer {
	mock := &MockchainSyncer{ctrl: ctrl}
	mock.recorder = &MockchainSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockchainSyncer) EXPECT() *MockchainSyncerMockRecorder {
	return m.recorder
}

// getHighestBlock mocks base method.
func (m *MockchainSyncer) getHighestBlock() (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getHighestBlock")
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getHighestBlock indicates an expected call of getHighestBlock.
func (mr *MockchainSyncerMockRecorder) getHighestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getHighestBlock", reflect.TypeOf((*MockchainSyncer)(nil).getHighestBlock))
}

// setBlockAnnounce mocks base method.
func (m *MockchainSyncer) setBlockAnnounce(from peer.ID, header *types.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setBlockAnnounce", from, header)
	ret0, _ := ret[0].(error)
	return ret0
}

// setBlockAnnounce indicates an expected call of setBlockAnnounce.
func (mr *MockchainSyncerMockRecorder) setBlockAnnounce(from, header interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setBlockAnnounce", reflect.TypeOf((*MockchainSyncer)(nil).setBlockAnnounce), from, header)
}

// setPeerHead mocks base method.
func (m *MockchainSyncer) setPeerHead(p peer.ID, hash common.Hash, number uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setPeerHead", p, hash, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// setPeerHead indicates an expected call of setPeerHead.
func (mr *MockchainSyncerMockRecorder) setPeerHead(p, hash, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setPeerHead", reflect.TypeOf((*MockchainSyncer)(nil).setPeerHead), p, hash, number)
}

// start mocks base method.
func (m *MockchainSyncer) start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "start")
}

// start indicates an expected call of start.
func (mr *MockchainSyncerMockRecorder) start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "start", reflect.TypeOf((*MockchainSyncer)(nil).start))
}

// stop mocks base method.
func (m *MockchainSyncer) stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "stop")
}

// stop indicates an expected call of stop.
func (mr *MockchainSyncerMockRecorder) stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "stop", reflect.TypeOf((*MockchainSyncer)(nil).stop))
}

// syncState mocks base method.
func (m *MockchainSyncer) syncState() chainSyncState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "syncState")
	ret0, _ := ret[0].(chainSyncState)
	return ret0
}

// syncState indicates an expected call of syncState.
func (mr *MockchainSyncerMockRecorder) syncState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "syncState", reflect.TypeOf((*MockchainSyncer)(nil).syncState))
}

// MockworkHandler is a mock of workHandler interface.
type MockworkHandler struct {
	ctrl     *gomock.Controller
	recorder *MockworkHandlerMockRecorder
}

// MockworkHandlerMockRecorder is the mock recorder for MockworkHandler.
type MockworkHandlerMockRecorder struct {
	mock *MockworkHandler
}

// NewMockworkHandler creates a new mock instance.
func NewMockworkHandler(ctrl *gomock.Controller) *MockworkHandler {
	mock := &MockworkHandler{ctrl: ctrl}
	mock.recorder = &MockworkHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockworkHandler) EXPECT() *MockworkHandlerMockRecorder {
	return m.recorder
}

// handleNewPeerState mocks base method.
func (m *MockworkHandler) handleNewPeerState(arg0 *peerState) (*worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleNewPeerState", arg0)
	ret0, _ := ret[0].(*worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// handleNewPeerState indicates an expected call of handleNewPeerState.
func (mr *MockworkHandlerMockRecorder) handleNewPeerState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleNewPeerState", reflect.TypeOf((*MockworkHandler)(nil).handleNewPeerState), arg0)
}

// handleTick mocks base method.
func (m *MockworkHandler) handleTick() ([]*worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleTick")
	ret0, _ := ret[0].([]*worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// handleTick indicates an expected call of handleTick.
func (mr *MockworkHandlerMockRecorder) handleTick() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleTick", reflect.TypeOf((*MockworkHandler)(nil).handleTick))
}

// handleWorkerResult mocks base method.
func (m *MockworkHandler) handleWorkerResult(w *worker) (*worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleWorkerResult", w)
	ret0, _ := ret[0].(*worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// handleWorkerResult indicates an expected call of handleWorkerResult.
func (mr *MockworkHandlerMockRecorder) handleWorkerResult(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleWorkerResult", reflect.TypeOf((*MockworkHandler)(nil).handleWorkerResult), w)
}

// hasCurrentWorker mocks base method.
func (m *MockworkHandler) hasCurrentWorker(arg0 *worker, arg1 map[uint64]*worker) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "hasCurrentWorker", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// hasCurrentWorker indicates an expected call of hasCurrentWorker.
func (mr *MockworkHandlerMockRecorder) hasCurrentWorker(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "hasCurrentWorker", reflect.TypeOf((*MockworkHandler)(nil).hasCurrentWorker), arg0, arg1)
}
