// Code generated by MockGen. DO NOT EDIT.
// Source: fullsync.go
//
// Generated by this command:
//
//	mockgen -destination=mock_importer.go -source=fullsync.go -package=sync
//

// Package sync is a generated GoMock package.
package sync

import (
	reflect "reflect"

	types "github.com/ChainSafe/gossamer/dot/types"
	gomock "go.uber.org/mock/gomock"
)

// Mockimporter is a mock of importer interface.
type Mockimporter struct {
	ctrl     *gomock.Controller
	recorder *MockimporterMockRecorder
}

// MockimporterMockRecorder is the mock recorder for Mockimporter.
type MockimporterMockRecorder struct {
	mock *Mockimporter
}

// NewMockimporter creates a new mock instance.
func NewMockimporter(ctrl *gomock.Controller) *Mockimporter {
	mock := &Mockimporter{ctrl: ctrl}
	mock.recorder = &MockimporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockimporter) EXPECT() *MockimporterMockRecorder {
	return m.recorder
}

// importBlock mocks base method.
func (m *Mockimporter) importBlock(arg0 *types.BlockData, arg1 BlockOrigin) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "importBlock", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// importBlock indicates an expected call of importBlock.
func (mr *MockimporterMockRecorder) importBlock(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "importBlock", reflect.TypeOf((*Mockimporter)(nil).importBlock), arg0, arg1)
}
