// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ChainSafe/gossamer/dot/sync (interfaces: ChainProcessor)

// Package sync is a generated GoMock package.
package sync

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChainProcessor is a mock of ChainProcessor interface.
type MockChainProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockChainProcessorMockRecorder
}

// MockChainProcessorMockRecorder is the mock recorder for MockChainProcessor.
type MockChainProcessorMockRecorder struct {
	mock *MockChainProcessor
}

// NewMockChainProcessor creates a new mock instance.
func NewMockChainProcessor(ctrl *gomock.Controller) *MockChainProcessor {
	mock := &MockChainProcessor{ctrl: ctrl}
	mock.recorder = &MockChainProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainProcessor) EXPECT() *MockChainProcessorMockRecorder {
	return m.recorder
}

// processReadyBlocks mocks base method.
func (m *MockChainProcessor) processReadyBlocks() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "processReadyBlocks")
}

// processReadyBlocks indicates an expected call of processReadyBlocks.
func (mr *MockChainProcessorMockRecorder) processReadyBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processReadyBlocks", reflect.TypeOf((*MockChainProcessor)(nil).processReadyBlocks))
}

// stop mocks base method.
func (m *MockChainProcessor) stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "stop")
}

// stop indicates an expected call of stop.
func (mr *MockChainProcessorMockRecorder) stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "stop", reflect.TypeOf((*MockChainProcessor)(nil).stop))
}
