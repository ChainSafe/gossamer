// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ChainSafe/gossamer/dot/sync (interfaces: DisjointBlockSet)

// Package sync is a generated GoMock package.
package sync

import (
	big "math/big"
	reflect "reflect"

	types "github.com/ChainSafe/gossamer/dot/types"
	common "github.com/ChainSafe/gossamer/lib/common"
	gomock "github.com/golang/mock/gomock"
)

// MockDisjointBlockSet is a mock of DisjointBlockSet interface.
type MockDisjointBlockSet struct {
	ctrl     *gomock.Controller
	recorder *MockDisjointBlockSetMockRecorder
}

// MockDisjointBlockSetMockRecorder is the mock recorder for MockDisjointBlockSet.
type MockDisjointBlockSetMockRecorder struct {
	mock *MockDisjointBlockSet
}

// NewMockDisjointBlockSet creates a new mock instance.
func NewMockDisjointBlockSet(ctrl *gomock.Controller) *MockDisjointBlockSet {
	mock := &MockDisjointBlockSet{ctrl: ctrl}
	mock.recorder = &MockDisjointBlockSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisjointBlockSet) EXPECT() *MockDisjointBlockSetMockRecorder {
	return m.recorder
}

// addBlock mocks base method.
func (m *MockDisjointBlockSet) addBlock(arg0 *types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// addBlock indicates an expected call of addBlock.
func (mr *MockDisjointBlockSetMockRecorder) addBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addBlock", reflect.TypeOf((*MockDisjointBlockSet)(nil).addBlock), arg0)
}

// addHashAndNumber mocks base method.
func (m *MockDisjointBlockSet) addHashAndNumber(arg0 common.Hash, arg1 *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addHashAndNumber", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// addHashAndNumber indicates an expected call of addHashAndNumber.
func (mr *MockDisjointBlockSetMockRecorder) addHashAndNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addHashAndNumber", reflect.TypeOf((*MockDisjointBlockSet)(nil).addHashAndNumber), arg0, arg1)
}

// addHeader mocks base method.
func (m *MockDisjointBlockSet) addHeader(arg0 *types.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// addHeader indicates an expected call of addHeader.
func (mr *MockDisjointBlockSetMockRecorder) addHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addHeader", reflect.TypeOf((*MockDisjointBlockSet)(nil).addHeader), arg0)
}

// addJustification mocks base method.
func (m *MockDisjointBlockSet) addJustification(arg0 common.Hash, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addJustification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// addJustification indicates an expected call of addJustification.
func (mr *MockDisjointBlockSetMockRecorder) addJustification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addJustification", reflect.TypeOf((*MockDisjointBlockSet)(nil).addJustification), arg0, arg1)
}

// getBlock mocks base method.
func (m *MockDisjointBlockSet) getBlock(arg0 common.Hash) *pendingBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getBlock", arg0)
	ret0, _ := ret[0].(*pendingBlock)
	return ret0
}

// getBlock indicates an expected call of getBlock.
func (mr *MockDisjointBlockSetMockRecorder) getBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getBlock", reflect.TypeOf((*MockDisjointBlockSet)(nil).getBlock), arg0)
}

// getBlocks mocks base method.
func (m *MockDisjointBlockSet) getBlocks() []*pendingBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getBlocks")
	ret0, _ := ret[0].([]*pendingBlock)
	return ret0
}

// getBlocks indicates an expected call of getBlocks.
func (mr *MockDisjointBlockSetMockRecorder) getBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getBlocks", reflect.TypeOf((*MockDisjointBlockSet)(nil).getBlocks))
}

// getChildren mocks base method.
func (m *MockDisjointBlockSet) getChildren(arg0 common.Hash) map[common.Hash]struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getChildren", arg0)
	ret0, _ := ret[0].(map[common.Hash]struct{})
	return ret0
}

// getChildren indicates an expected call of getChildren.
func (mr *MockDisjointBlockSetMockRecorder) getChildren(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getChildren", reflect.TypeOf((*MockDisjointBlockSet)(nil).getChildren), arg0)
}

// getReadyDescendants mocks base method.
func (m *MockDisjointBlockSet) getReadyDescendants(arg0 common.Hash, arg1 []*types.BlockData) []*types.BlockData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getReadyDescendants", arg0, arg1)
	ret0, _ := ret[0].([]*types.BlockData)
	return ret0
}

// getReadyDescendants indicates an expected call of getReadyDescendants.
func (mr *MockDisjointBlockSetMockRecorder) getReadyDescendants(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getReadyDescendants", reflect.TypeOf((*MockDisjointBlockSet)(nil).getReadyDescendants), arg0, arg1)
}

// hasBlock mocks base method.
func (m *MockDisjointBlockSet) hasBlock(arg0 common.Hash) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "hasBlock", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// hasBlock indicates an expected call of hasBlock.
func (mr *MockDisjointBlockSetMockRecorder) hasBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "hasBlock", reflect.TypeOf((*MockDisjointBlockSet)(nil).hasBlock), arg0)
}

// removeBlock mocks base method.
func (m *MockDisjointBlockSet) removeBlock(arg0 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "removeBlock", arg0)
}

// removeBlock indicates an expected call of removeBlock.
func (mr *MockDisjointBlockSetMockRecorder) removeBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "removeBlock", reflect.TypeOf((*MockDisjointBlockSet)(nil).removeBlock), arg0)
}

// removeLowerBlocks mocks base method.
func (m *MockDisjointBlockSet) removeLowerBlocks(arg0 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "removeLowerBlocks", arg0)
}

// removeLowerBlocks indicates an expected call of removeLowerBlocks.
func (mr *MockDisjointBlockSetMockRecorder) removeLowerBlocks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "removeLowerBlocks", reflect.TypeOf((*MockDisjointBlockSet)(nil).removeLowerBlocks), arg0)
}

// run mocks base method.
func (m *MockDisjointBlockSet) run(arg0 <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "run", arg0)
}

// run indicates an expected call of run.
func (mr *MockDisjointBlockSetMockRecorder) run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "run", reflect.TypeOf((*MockDisjointBlockSet)(nil).run), arg0)
}

// size mocks base method.
func (m *MockDisjointBlockSet) size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "size")
	ret0, _ := ret[0].(int)
	return ret0
}

// size indicates an expected call of size.
func (mr *MockDisjointBlockSetMockRecorder) size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "size", reflect.TypeOf((*MockDisjointBlockSet)(nil).size))
}
