// Code generated by mockery v2.8.0. DO NOT EDIT.

package network

import (
	big "math/big"

	common "github.com/ChainSafe/gossamer/lib/common"
	mock "github.com/stretchr/testify/mock"

	types "github.com/ChainSafe/gossamer/dot/types"
)

// mockBlockState is an autogenerated mock type for the BlockState type
type mockBlockState struct {
	mock.Mock
}

// BestBlockHeader provides a mock function with given fields:
func (_m *mockBlockState) BestBlockHeader() (*types.HeaderVdt, error) {
	ret := _m.Called()

	var r0 *types.HeaderVdt
	if rf, ok := ret.Get(0).(func() *types.HeaderVdt); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.HeaderVdt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BestBlockNumber provides a mock function with given fields:
func (_m *mockBlockState) BestBlockNumber() (*big.Int, error) {
	ret := _m.Called()

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenesisHash provides a mock function with given fields:
func (_m *mockBlockState) GenesisHash() common.Hash {
	ret := _m.Called()

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// GetHashByNumber provides a mock function with given fields: num
func (_m *mockBlockState) GetHashByNumber(num *big.Int) (common.Hash, error) {
	ret := _m.Called(num)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*big.Int) common.Hash); ok {
		r0 = rf(num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*big.Int) error); ok {
		r1 = rf(num)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHighestFinalisedHeader provides a mock function with given fields:
func (_m *mockBlockState) GetHighestFinalisedHeader() (*types.HeaderVdt, error) {
	ret := _m.Called()

	var r0 *types.HeaderVdt
	if rf, ok := ret.Get(0).(func() *types.HeaderVdt); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.HeaderVdt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasBlockBody provides a mock function with given fields: _a0
func (_m *mockBlockState) HasBlockBody(_a0 common.Hash) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.Hash) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
