// Code generated by mockery v2.8.0. DO NOT EDIT.

package network

import (
	types "github.com/ChainSafe/gossamer/dot/types"
	mock "github.com/stretchr/testify/mock"
)

// MockSyncer is an autogenerated mock type for the Syncer type
type MockSyncer struct {
	mock.Mock
}

// CreateBlockResponse provides a mock function with given fields: _a0
func (_m *MockSyncer) CreateBlockResponse(_a0 *BlockRequestMessage) (*BlockResponseMessage, error) {
	ret := _m.Called(_a0)

	var r0 *BlockResponseMessage
	if rf, ok := ret.Get(0).(func(*BlockRequestMessage) *BlockResponseMessage); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BlockResponseMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*BlockRequestMessage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleBlockAnnounce provides a mock function with given fields: _a0
func (_m *MockSyncer) HandleBlockAnnounce(_a0 *BlockAnnounceMessage) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*BlockAnnounceMessage) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsSynced provides a mock function with given fields:
func (_m *MockSyncer) IsSynced() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ProcessBlockData provides a mock function with given fields: data
func (_m *MockSyncer) ProcessBlockData(data []*types.BlockData) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func([]*types.BlockData) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*types.BlockData) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessJustification provides a mock function with given fields: data
func (_m *MockSyncer) ProcessJustification(data []*types.BlockData) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func([]*types.BlockData) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*types.BlockData) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetSyncing provides a mock function with given fields: _a0
func (_m *MockSyncer) SetSyncing(_a0 bool) {
	_m.Called(_a0)
}
