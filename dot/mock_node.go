// Code generated by MockGen. DO NOT EDIT.
// Source: node.go

// Package dot is a generated GoMock package.
package dot

import (
	reflect "reflect"

	core "github.com/ChainSafe/gossamer/dot/core"
	digest "github.com/ChainSafe/gossamer/dot/digest"
	network "github.com/ChainSafe/gossamer/dot/network"
	rpc "github.com/ChainSafe/gossamer/dot/rpc"
	modules "github.com/ChainSafe/gossamer/dot/rpc/modules"
	state "github.com/ChainSafe/gossamer/dot/state"
	sync "github.com/ChainSafe/gossamer/dot/sync"
	system "github.com/ChainSafe/gossamer/dot/system"
	types "github.com/ChainSafe/gossamer/dot/types"
	babe "github.com/ChainSafe/gossamer/lib/babe"
	grandpa "github.com/ChainSafe/gossamer/lib/grandpa"
	keystore "github.com/ChainSafe/gossamer/lib/keystore"
	runtime "github.com/ChainSafe/gossamer/lib/runtime"
	gomock "github.com/golang/mock/gomock"
)

// MocknewNodeIface is a mock of newNodeIface interface.
type MocknewNodeIface struct {
	ctrl     *gomock.Controller
	recorder *MocknewNodeIfaceMockRecorder
}

// MocknewNodeIfaceMockRecorder is the mock recorder for MocknewNodeIface.
type MocknewNodeIfaceMockRecorder struct {
	mock *MocknewNodeIface
}

// NewMocknewNodeIface creates a new mock instance.
func NewMocknewNodeIface(ctrl *gomock.Controller) *MocknewNodeIface {
	mock := &MocknewNodeIface{ctrl: ctrl}
	mock.recorder = &MocknewNodeIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknewNodeIface) EXPECT() *MocknewNodeIfaceMockRecorder {
	return m.recorder
}

// createBABEService mocks base method.
func (m *MocknewNodeIface) createBABEService(cfg *Config, st *state.Service, ks keystore.Keystore, cs *core.Service) (*babe.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createBABEService", cfg, st, ks, cs)
	ret0, _ := ret[0].(*babe.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createBABEService indicates an expected call of createBABEService.
func (mr *MocknewNodeIfaceMockRecorder) createBABEService(cfg, st, ks, cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createBABEService", reflect.TypeOf((*MocknewNodeIface)(nil).createBABEService), cfg, st, ks, cs)
}

// createBlockVerifier mocks base method.
func (m *MocknewNodeIface) createBlockVerifier(st *state.Service) (*babe.VerificationManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createBlockVerifier", st)
	ret0, _ := ret[0].(*babe.VerificationManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createBlockVerifier indicates an expected call of createBlockVerifier.
func (mr *MocknewNodeIfaceMockRecorder) createBlockVerifier(st interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createBlockVerifier", reflect.TypeOf((*MocknewNodeIface)(nil).createBlockVerifier), st)
}

// createCoreService mocks base method.
func (m *MocknewNodeIface) createCoreService(cfg *Config, ks *keystore.GlobalKeystore, st *state.Service, net *network.Service, dh *digest.Handler) (*core.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createCoreService", cfg, ks, st, net, dh)
	ret0, _ := ret[0].(*core.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createCoreService indicates an expected call of createCoreService.
func (mr *MocknewNodeIfaceMockRecorder) createCoreService(cfg, ks, st, net, dh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createCoreService", reflect.TypeOf((*MocknewNodeIface)(nil).createCoreService), cfg, ks, st, net, dh)
}

// createDigestHandler mocks base method.
func (m *MocknewNodeIface) createDigestHandler(st *state.Service) (*digest.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createDigestHandler", st)
	ret0, _ := ret[0].(*digest.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createDigestHandler indicates an expected call of createDigestHandler.
func (mr *MocknewNodeIfaceMockRecorder) createDigestHandler(st interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createDigestHandler", reflect.TypeOf((*MocknewNodeIface)(nil).createDigestHandler), st)
}

// createGRANDPAService mocks base method.
func (m *MocknewNodeIface) createGRANDPAService(cfg *Config, st *state.Service, dh *digest.Handler, ks keystore.Keystore, net *network.Service) (*grandpa.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createGRANDPAService", cfg, st, dh, ks, net)
	ret0, _ := ret[0].(*grandpa.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createGRANDPAService indicates an expected call of createGRANDPAService.
func (mr *MocknewNodeIfaceMockRecorder) createGRANDPAService(cfg, st, dh, ks, net interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createGRANDPAService", reflect.TypeOf((*MocknewNodeIface)(nil).createGRANDPAService), cfg, st, dh, ks, net)
}

// createNetworkService mocks base method.
func (m *MocknewNodeIface) createNetworkService(cfg *Config, stateSrvc *state.Service) (*network.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createNetworkService", cfg, stateSrvc)
	ret0, _ := ret[0].(*network.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createNetworkService indicates an expected call of createNetworkService.
func (mr *MocknewNodeIfaceMockRecorder) createNetworkService(cfg, stateSrvc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createNetworkService", reflect.TypeOf((*MocknewNodeIface)(nil).createNetworkService), cfg, stateSrvc)
}

// createRPCService mocks base method.
func (m *MocknewNodeIface) createRPCService(cfg *Config, ns *runtime.NodeStorage, stateSrvc *state.Service, coreSrvc *core.Service, networkSrvc *network.Service, bp modules.BlockProducerAPI, sysSrvc *system.Service, finSrvc *grandpa.Service) (*rpc.HTTPServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createRPCService", cfg, ns, stateSrvc, coreSrvc, networkSrvc, bp, sysSrvc, finSrvc)
	ret0, _ := ret[0].(*rpc.HTTPServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createRPCService indicates an expected call of createRPCService.
func (mr *MocknewNodeIfaceMockRecorder) createRPCService(cfg, ns, stateSrvc, coreSrvc, networkSrvc, bp, sysSrvc, finSrvc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createRPCService", reflect.TypeOf((*MocknewNodeIface)(nil).createRPCService), cfg, ns, stateSrvc, coreSrvc, networkSrvc, bp, sysSrvc, finSrvc)
}

// createRuntimeStorage mocks base method.
func (m *MocknewNodeIface) createRuntimeStorage(st *state.Service) (*runtime.NodeStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createRuntimeStorage", st)
	ret0, _ := ret[0].(*runtime.NodeStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createRuntimeStorage indicates an expected call of createRuntimeStorage.
func (mr *MocknewNodeIfaceMockRecorder) createRuntimeStorage(st interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createRuntimeStorage", reflect.TypeOf((*MocknewNodeIface)(nil).createRuntimeStorage), st)
}

// createStateService mocks base method.
func (m *MocknewNodeIface) createStateService(config *Config) (*state.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createStateService", config)
	ret0, _ := ret[0].(*state.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createStateService indicates an expected call of createStateService.
func (mr *MocknewNodeIfaceMockRecorder) createStateService(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createStateService", reflect.TypeOf((*MocknewNodeIface)(nil).createStateService), config)
}

// createSystemService mocks base method.
func (m *MocknewNodeIface) createSystemService(cfg *types.SystemInfo, stateSrvc *state.Service) (*system.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createSystemService", cfg, stateSrvc)
	ret0, _ := ret[0].(*system.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createSystemService indicates an expected call of createSystemService.
func (mr *MocknewNodeIfaceMockRecorder) createSystemService(cfg, stateSrvc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createSystemService", reflect.TypeOf((*MocknewNodeIface)(nil).createSystemService), cfg, stateSrvc)
}

// initKeystore mocks base method.
func (m *MocknewNodeIface) initKeystore(config *Config) (*keystore.GlobalKeystore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "initKeystore", config)
	ret0, _ := ret[0].(*keystore.GlobalKeystore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// initKeystore indicates an expected call of initKeystore.
func (mr *MocknewNodeIfaceMockRecorder) initKeystore(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initKeystore", reflect.TypeOf((*MocknewNodeIface)(nil).initKeystore), config)
}

// initNode mocks base method.
func (m *MocknewNodeIface) initNode(config *Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "initNode", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// initNode indicates an expected call of initNode.
func (mr *MocknewNodeIfaceMockRecorder) initNode(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initNode", reflect.TypeOf((*MocknewNodeIface)(nil).initNode), config)
}

// initialiseTelemetry mocks base method.
func (m *MocknewNodeIface) initialiseTelemetry(cfg *Config, stateSrvc *state.Service, networkSrvc *network.Service, sysSrvc *system.Service) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "initialiseTelemetry", cfg, stateSrvc, networkSrvc, sysSrvc)
}

// initialiseTelemetry indicates an expected call of initialiseTelemetry.
func (mr *MocknewNodeIfaceMockRecorder) initialiseTelemetry(cfg, stateSrvc, networkSrvc, sysSrvc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initialiseTelemetry", reflect.TypeOf((*MocknewNodeIface)(nil).initialiseTelemetry), cfg, stateSrvc, networkSrvc, sysSrvc)
}

// loadRuntime mocks base method.
func (m *MocknewNodeIface) loadRuntime(cfg *Config, ns *runtime.NodeStorage, stateSrvc *state.Service, ks *keystore.GlobalKeystore, net *network.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "loadRuntime", cfg, ns, stateSrvc, ks, net)
	ret0, _ := ret[0].(error)
	return ret0
}

// loadRuntime indicates an expected call of loadRuntime.
func (mr *MocknewNodeIfaceMockRecorder) loadRuntime(cfg, ns, stateSrvc, ks, net interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "loadRuntime", reflect.TypeOf((*MocknewNodeIface)(nil).loadRuntime), cfg, ns, stateSrvc, ks, net)
}

// newSyncService mocks base method.
func (m *MocknewNodeIface) newSyncService(cfg *Config, st *state.Service, fg sync.FinalityGadget, verifier *babe.VerificationManager, cs *core.Service, net *network.Service) (*sync.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "newSyncService", cfg, st, fg, verifier, cs, net)
	ret0, _ := ret[0].(*sync.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// newSyncService indicates an expected call of newSyncService.
func (mr *MocknewNodeIfaceMockRecorder) newSyncService(cfg, st, fg, verifier, cs, net interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newSyncService", reflect.TypeOf((*MocknewNodeIface)(nil).newSyncService), cfg, st, fg, verifier, cs, net)
}

// nodeInitialised mocks base method.
func (m *MocknewNodeIface) nodeInitialised(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "nodeInitialised", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// nodeInitialised indicates an expected call of nodeInitialised.
func (mr *MocknewNodeIfaceMockRecorder) nodeInitialised(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "nodeInitialised", reflect.TypeOf((*MocknewNodeIface)(nil).nodeInitialised), arg0)
}
