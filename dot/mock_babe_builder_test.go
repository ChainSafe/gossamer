// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ChainSafe/gossamer/lib/babe (interfaces: ServiceIFace,ServiceBuilder)

// Package dot is a generated GoMock package.
package dot

import (
	reflect "reflect"

	babe "github.com/ChainSafe/gossamer/lib/babe"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceIFace is a mock of ServiceIFace interface.
type MockServiceIFace struct {
	ctrl     *gomock.Controller
	recorder *MockServiceIFaceMockRecorder
}

// MockServiceIFaceMockRecorder is the mock recorder for MockServiceIFace.
type MockServiceIFaceMockRecorder struct {
	mock *MockServiceIFace
}

// NewMockServiceIFace creates a new mock instance.
func NewMockServiceIFace(ctrl *gomock.Controller) *MockServiceIFace {
	mock := &MockServiceIFace{ctrl: ctrl}
	mock.recorder = &MockServiceIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceIFace) EXPECT() *MockServiceIFaceMockRecorder {
	return m.recorder
}

// EpochLength mocks base method.
func (m *MockServiceIFace) EpochLength() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpochLength")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// EpochLength indicates an expected call of EpochLength.
func (mr *MockServiceIFaceMockRecorder) EpochLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpochLength", reflect.TypeOf((*MockServiceIFace)(nil).EpochLength))
}

// IsPaused mocks base method.
func (m *MockServiceIFace) IsPaused() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPaused")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPaused indicates an expected call of IsPaused.
func (mr *MockServiceIFaceMockRecorder) IsPaused() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPaused", reflect.TypeOf((*MockServiceIFace)(nil).IsPaused))
}

// Pause mocks base method.
func (m *MockServiceIFace) Pause() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause")
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockServiceIFaceMockRecorder) Pause() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockServiceIFace)(nil).Pause))
}

// Resume mocks base method.
func (m *MockServiceIFace) Resume() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume")
	ret0, _ := ret[0].(error)
	return ret0
}

// Resume indicates an expected call of Resume.
func (mr *MockServiceIFaceMockRecorder) Resume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockServiceIFace)(nil).Resume))
}

// SlotDuration mocks base method.
func (m *MockServiceIFace) SlotDuration() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotDuration")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// SlotDuration indicates an expected call of SlotDuration.
func (mr *MockServiceIFaceMockRecorder) SlotDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotDuration", reflect.TypeOf((*MockServiceIFace)(nil).SlotDuration))
}

// Start mocks base method.
func (m *MockServiceIFace) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServiceIFaceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockServiceIFace)(nil).Start))
}

// Stop mocks base method.
func (m *MockServiceIFace) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockServiceIFaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockServiceIFace)(nil).Stop))
}

// MockServiceBuilder is a mock of ServiceBuilder interface.
type MockServiceBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBuilderMockRecorder
}

// MockServiceBuilderMockRecorder is the mock recorder for MockServiceBuilder.
type MockServiceBuilderMockRecorder struct {
	mock *MockServiceBuilder
}

// NewMockServiceBuilder creates a new mock instance.
func NewMockServiceBuilder(ctrl *gomock.Controller) *MockServiceBuilder {
	mock := &MockServiceBuilder{ctrl: ctrl}
	mock.recorder = &MockServiceBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBuilder) EXPECT() *MockServiceBuilderMockRecorder {
	return m.recorder
}

// NewServiceIFace mocks base method.
func (m *MockServiceBuilder) NewServiceIFace(arg0 *babe.ServiceConfig) (babe.ServiceIFace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewServiceIFace", arg0)
	ret0, _ := ret[0].(babe.ServiceIFace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewServiceIFace indicates an expected call of NewServiceIFace.
func (mr *MockServiceBuilderMockRecorder) NewServiceIFace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewServiceIFace", reflect.TypeOf((*MockServiceBuilder)(nil).NewServiceIFace), arg0)
}
