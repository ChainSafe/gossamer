{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#a-go-implementation-of-the-polkadot-host","title":"A Go Implementation of the Polkadot Host","text":"<p>Gossamer is an implementation of the Polkadot Host: a framework used to build and run nodes for different blockchain protocols that are compatible with the Polkadot ecosystem.  The core of the Polkadot Host is the wasm runtime which handles the logic of the chain.</p> <p>Gossamer includes node implementations for major blockchains within the Polkadot ecosystem and simplifies building node implementations for other blockchains. Runtimes built with Substrate can plug their runtime into Gossamer to create a node implementation in Go.</p> <p>Gossamer Docs is an evolving set of documents and resources to help you understand Gossamer, the Polkadot ecosystem, and how to build and run nodes using Gossamer. </p> <ul> <li> <p>If you are new to Gossamer and the Polkadot ecosystem, we recommend starting with this video  and then working your way through General Resources. <li> <p>If you are already familiar with Gossamer and the Polkadot ecosystem, or you just want to dive in, head over to Get Started to run your first node using Gossamer.</p> </li> <li> <p>If you are looking to build a node with Gossamer, learn how Gossamer can be used to build and run custom node implementations using Gossamer as a framework (keep reading).</p> </li>"},{"location":"#framework","title":"Framework","text":"<p>Gossamer is a modular blockchain framework used to build and run nodes for different blockchain protocols within the Polkadot ecosystem.</p> <ul> <li> <p>The simplest way to use the framework is using the base node implementation with a custom configuration file (see Configuration).</p> </li> <li> <p>The more advanced  way to use the framework is using the base node implementation with a compiled runtime and custom runtime imports (see Import Runtime). </p> </li> </ul> <p>Our primary focus has been an initial implementation of the Polkadot Host. Once we feel confident our initial implementation is fully operational and secure, we will expand the Gossamer framework to include a runtime library and other tools and services that will enable Go developers to build, test, and run custom-built blockchain protocols within the Polkadot ecosystem.</p>"},{"location":"#connect","title":"Connect","text":"<p>Let us know if you have any feedback or ideas that might help us improve our documentation or if you have any resources that you would like to see added. If you are planning to use Gossamer or any of the Gossamer packages, please say hello! You can find us on Discord.</p>"},{"location":"contributing/","title":"Contribution Guidelines","text":"<p>Thank you for your interest in our implementation of the Polkadot Runtime Environment Implementation! We're excited to get to know you and work with you on gossamer. We've put together these guidelines to help you figure out how you can help us.</p> <p>At any point in this process feel free to reach out on Discord with any questions or to say Hello :)</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>Generally, it is important to have a basic understanding of Polkadot and the Polkadot Runtime Environment. Having a stronger  understanding will allow you to make more significant contributions. We've put together a list of resources that can help you develop this fundamental knowledge.  </p> <p>The Web3 Foundation has a Polkadot Wiki that would help both part-time and core contributors to the project in order to get up to speed. Our wiki also has some helpful resources. </p> <p>The Polkadot Runtime Specification serves as our primary specification, however it is currently in its draft status so things may be subject to change.</p> <p>One important thing distinction is that we are building the Polkadot Runtime Environment, not Polkadot itself. Given that, although a deep understanding of Polkadot is helpful, it's not critical to contribute to gossamer. To help understand how the Runtime Environment relates to Polkadot, check out this talk that one of our team members gave at DotCon.</p>"},{"location":"contributing/#contribution-steps","title":"Contribution Steps","text":"<p>1. Fork the gossamer repo.</p> <p>2. Create a local clone of gossamer.</p> <pre><code>go get -u github.com/ChainSafe/gossamer\ncd $GOPATH/src/github.com/ChainSafe/gossamer\ngit init\n</code></pre> <p>You may encounter a <code>package github.com/ChainSafe/gossamer: no Go files in ...</code> message when doing <code>go get</code>. This is not an error, since there are no go files in the project root.</p> <p>3. Link your local clone to the fork on your Github repo.</p> <pre><code>$ git remote add your-gossamer-repo https://github.com/&lt;your_github_user_name&gt;/gossamer.git\n</code></pre> <p>4. Link your local clone to the ChainSafe Systems repo so that you can easily fetch future changes to the ChainSafe Systems repo.</p> <pre><code>$ git remote add gossamer https://github.com/ChainSafe/gossamer.git\n$ git remote -v (you should see myrepo and gossamer in the list of remotes)\n</code></pre> <p>5. Find something to work on.</p> <p>To start, check out our open issues. We recommend starting with an issue labeled <code>Good First Issue</code>. Leave a comment to let us know that you would like to work on it. </p> <p>Another option is to improve gossamer where you see fit based on your evaluation of our code. In order to best facilitate collaboration, please create an issue before you start working on it.</p> <p>6. Make improvements to the code.</p> <p>Each time you work on the code be sure that you are working on the branch that you have created as opposed to your local copy of the gossamer repo. Keeping your changes segregated in this branch will make it easier to merge your changes into the repo later.</p> <pre><code>$ git checkout feature-in-progress-branch\n</code></pre> <p>7. Test your changes.</p> <p>Changes that only affect a single file can be tested with</p> <pre><code>$ go test &lt;file_you_are_working_on&gt;\n</code></pre> <p>8. Lint your changes.</p> <p>Before opening a pull request be sure to run the linter</p> <pre><code>$ make lint\n</code></pre> <p>9. Create a pull request.</p> <p>Navigate your browser to https://github.com/ChainSafe/gossamer and click on the new pull request button. In the \u201cbase\u201d box on the left, change the branch to \u201cbase development\u201d, the branch that you want your changes to be applied to. In the \u201ccompare\u201d box on the right, select feature-in-progress-branch, the branch containing the changes you want to apply. You will then be asked to answer a few questions about your pull request. After you complete the questionnaire, the pull request will appear in the list of pull requests at https://github.com/ChainSafe/gossamer/pulls.</p>"},{"location":"contributing/#note-on-memory-intensive-tests","title":"Note on memory intensive tests","text":"<p>Unfortunately, the free tier for CI's have a memory cap and some tests will cause the CI to experience an out of memory error. In order to mitigate this we have introduced the concept of short tests. If your PR causes an out of memory error please separate the tests into two groups like below and make sure to label it <code>large</code>:</p> <pre><code>var stringTest = []string {\n    \"This causes no leaks\"\n}\n\nvar largeStringTest = []string {\n    \"Whoa this test is so big it causes an out of memory issue\"\n}\n\nfunc TestStringTest(t *testing.T) {\n    ...\n}\n\nfunc TestLargeStringTest(t *testing.T) {\n    if testing.Short() {\n        t.Skip(\"\\033[33mSkipping memory intensive test for &lt;TEST NAME&gt; in short mode\\033[0m\")\n    } else {\n        ...\n    }\n}\n</code></pre>"},{"location":"contributing/#contributor-responsibilities","title":"Contributor Responsibilities","text":"<p>We consider two types of contributions to our repo and categorize them as follows:</p>"},{"location":"contributing/#part-time-contributors","title":"Part-Time Contributors","text":"<p>Anyone can become a part-time contributor and help out on gossamer. Contributions can be made in the following ways:</p> <ul> <li>Engaging in Discord conversations, asking questions on how to contribute to the project</li> <li>Opening up Github issues to contribute ideas on how the code can be improved</li> <li>Opening up PRs referencing any open issue in the repo. PRs should include:<ul> <li>Detailed context of what would be required for merge</li> <li>Tests that are consistent with how other tests are written in our implementation</li> </ul> </li> <li>Proper labels, milestones, and projects (see other closed PRs for reference)</li> <li>Follow up on open PRs<ul> <li>Have an estimated timeframe to completion and let the core contributors know if a PR will take longer than expected</li> </ul> </li> </ul> <p>We do not expect all part-time contributors to be experts on all the latest Polkadot documentation, but all contributors should at least be familiarized with the fundamentals of The Polkadot Runtime Specification.</p>"},{"location":"contributing/#core-contributors","title":"Core Contributors","text":"<p>Core contributors are currently comprised of members of the ChainSafe Systems team. Core devs have all of the responsibilities of part-time contributors plus the majority of the following:</p> <ul> <li>Participate in our software development process (standups, sprint planning, retrospectives, etc)</li> <li>Stay up to date on the latest Polkadot research and updates</li> <li>Commit high quality code on core functionality</li> <li>Monitor github issues and PR\u2019s to make sure owner, labels, descriptions are correct</li> <li>Formulate independent ideas, suggest new work to do, point out improvements to existing approaches</li> <li>Participate in code review, ensure code quality is excellent, and ensure high code coverage</li> </ul>"},{"location":"advanced/scale-examples/","title":"SCALE Examples","text":"<p>A byte array <code>A</code> is defined as a set of bytes <code>(b1,...,bn)</code> st. <code>n &lt; 2^536</code>.</p> <p>Let <code>LS(x, n)</code> be the least significant <code>n</code> bits of <code>x</code></p> <p>We encode a mode as the least significant two bits of the first byte of each encoding.</p> <p>We use <code>|</code> to mean append. <code>LE</code> means little endian format</p>"},{"location":"advanced/scale-examples/#n-26-mode-0","title":"n &lt; 2^6; mode = 0","text":"<p><code>Enc(A) := l_1 | b_1 |...| b_n when n &lt; 2^6</code></p> <p><code>l_1</code> is the encoding of <code>n</code>. Since <code>n &lt; 2^6</code> we know <code>n</code> is at most 6 bits. We take these 6 bits and append <code>00</code> to indicate the 'mode' we are using.</p> <p>eg. <code>n = 0x4 = 00000100</code></p> <p><code>=&gt; LS(n, 6) = 000100</code></p> <p><code>=&gt; Enc(A) := 000100| 00 | b_1 | ... | b_4</code>      (ie. <code>LS(n,6)</code> | mode | bytes)</p>"},{"location":"advanced/scale-examples/#26-n-214-mode-1","title":"2^6 &lt;= n &lt; 2^14; mode = 1","text":"<p><code>Enc(A) := i_1 | i_2 | b_1 |...| b_n</code> when <code>2^6 &lt;= n &lt; 2^14</code></p> <p><code>i_1,i_2</code> are the encoding of <code>n</code>. Since <code>2^6 &lt;= n &lt; 2^14</code> we know <code>n</code> is between 7 and 14 bits. We truncate <code>n</code> to 14 bits (removing leading zeros or padding to 14 bits) and append <code>01</code> to indicate the 'mode'.</p> <p>eg. <code>n = 0x1000 = 00010000,00000000</code> </p> <p><code>=&gt; LS(n, 14) = 010000,00000000</code></p> <p><code>=&gt; 01000000,00000001</code> # Append mode bits, will store in LE in next step</p> <p><code>=&gt; Enc(A) := 00000001 | 01000000 | b_1 | ... | b_4096</code> (ie. <code>LS(n,14)</code> | mode | bytes)</p>"},{"location":"advanced/scale-examples/#214-n-230-mode-2","title":"2^14 &lt;= n &lt; 2^30; mode = 2","text":"<p><code>Enc(A) := i_1 | i_2 | i_3 | i_4 | b_1 |...| b_n</code> when <code>2^14 &lt;= n &lt; 2^30</code></p> <p>This is the same as the previous case, but now <code>n</code> occupies 30 bits and the mode is <code>2</code>.</p> <p>eg. <code>n = 0x240FF80 = 00000010,01000000,11111111,10000000</code> </p> <p><code>=&gt; LS(n, 30) = 000010,01000000,11111111,10000000</code></p> <p><code>=&gt; 00001001,00000011,11111110,00000010</code>  # Append mode bits, will store in LE in next step</p> <p><code>=&gt; Enc(A) := 00000010 | 11111110 | 00000011 | 00001001 | b_1 | ... | b_37814144</code> (ie. <code>LS(n,30)</code> | mode | bytes)</p>"},{"location":"advanced/scale-examples/#230-n-2536","title":"2^30 &lt;= n &lt; 2^536","text":"<p><code>Enc(A) := k_1 | k_2 | k_3 | k_4 | k_5 | b_1 |...| b_n</code> when <code>2^30 &lt;= n &lt; 2^536</code></p> <p>In this case we define <code>m</code> to be the number of bytes used to store <code>n</code>. We then assign <code>k_1 := m - 4</code> to indicate how many bytes to read for the size of <code>n</code>. </p> <p>eg. <code>n = 0x100000000 = 00000001 | 0...0 | 0...0 | 0...0 | 0...0</code></p> <p><code>=&gt; m = 5</code></p> <p><code>=&gt; k_1 = m - 4 = 1</code></p> <p><code>=&gt; 000001 | 11 | 0...0 | 0...0 | 0...0 | 0...0 | b_1 | ... | b_4294967296</code> (ie. <code>m - 4</code> | mode | n | bytes)</p>"},{"location":"getting-started/installation/","title":"Get Started","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Install Go version <code>&gt;=1.20</code></p>"},{"location":"getting-started/installation/#installation","title":"Installation","text":"<p>Get the ChainSafe/gossamer repository:</p> <pre><code>git clone git@github.com:ChainSafe/gossamer\ncd gossamer\n</code></pre> <p>Run the following command to build the Gossamer binary:</p> <pre><code>make gossamer\n</code></pre>"},{"location":"getting-started/installation/#run-development-node","title":"Run Development Node","text":"<p>To initialise a development node:</p> <pre><code>./bin/gossamer --chain dev init\n</code></pre> <p>To start the development node:</p> <pre><code>./bin/gossamer --chain dev\n</code></pre> <p>The development node is configured to produce a block every slot and to finalise a block every round (as there is only one authority, <code>alice</code>.)</p>"},{"location":"getting-started/installation/#run-gossamer-node","title":"Run Gossamer Node","text":"<p>The gossamer node runs by default as an authority with 9 authorities set at genesis. The built-in keys, corresponding to the authorities, that are available for the node are <code>alice</code>, <code>bob</code>, <code>charlie</code>, <code>dave</code>, <code>eve</code>, <code>ferdie</code>, <code>george</code>, and <code>ian</code>.</p> <p>To initialise a gossamer node:</p> <pre><code>./bin/gossamer --chain gssmr init\n</code></pre> <p>To start the gossamer node:</p> <pre><code>./bin/gossamer --chain gssmr --key alice\n</code></pre> <p>Note: If you only run one gossamer node, the node will not build blocks every slot or finalize blocks; it will appear that the node is doing nothing, but it is actually waiting for a slot to build a block. This is because there are 9 authorities set, so at least 6 of the authorities should be run for a functional network. If you wish to reduce the number of authorities, you can modify the genesis file in <code>chain/gssmr/genesis-spec.json</code>.</p> <p>If you wish to run the default node as a non-authority, you can specify <code>roles=1</code>:</p> <pre><code>./bin/gossamer --chain gssmr --roles 1\n</code></pre>"},{"location":"getting-started/installation/#run-kusama-node","title":"Run Kusama Node","text":"<p>To run a Kusama node, first initialise the node:</p> <pre><code>./bin/gossamer --chain kusama init\n</code></pre> <p>Then run the node selecting the Kusama chain:</p> <pre><code>./bin/gossamer --chain kusama\n</code></pre> <p>The node may not appear to do anything for the first minute or so (it's bootstrapping to the network.) If you wish to see what is it doing in this time, you can turn on debug logs in <code>chain/kusama/config.toml</code>:</p> <pre><code>[log]\nnetwork = \"debug\"\n</code></pre> <p>After it's finished bootstrapping, the node should begin to sync.</p>"},{"location":"getting-started/installation/#run-polkadot-node","title":"Run Polkadot Node","text":"<p>Initialise polkadot node:</p> <pre><code>./bin/gossamer --chain polkadot init\n</code></pre> <p>Start polkadot node:</p> <pre><code>./bin/gossamer --chain polkadot\n</code></pre>"},{"location":"getting-started/installation/#run-gossamer-node-with-docker","title":"Run Gossamer Node with Docker","text":"<p>Gossamer can also be installed on GNU/Linux, MacOS systems with Docker.</p>"},{"location":"getting-started/installation/#dependencies","title":"Dependencies","text":"<ul> <li>Install the latest release of Docker</li> </ul> <p>Ensure you are running the most recent version of Docker by issuing the command:</p> <pre><code>docker -v\n</code></pre> <p>Pull the latest Gossamer images from DockerHub Registry:</p> <pre><code>docker pull chainsafe/gossamer:latest\n</code></pre> <p>The above command will install all required dependencies.  </p> <p>Next, we need override the default entrypoint so we can run the node as an authority node</p> <pre><code>docker run -it --entrypoint /bin/bash chainsafe/gossamer:latest\n</code></pre> <p>The built-in authorities are <code>alice</code>, <code>bob</code>, <code>charlie</code>, <code>dave</code>, <code>eve</code>, <code>ferdie</code>, <code>george</code>, and <code>ian</code>. To start the node as an authority, provide it with a built-in key:</p> <pre><code>./bin/gossamer --chain gssmr --key alice\n</code></pre>"},{"location":"getting-started/overview/host-architecture/","title":"Host Architecture","text":""},{"location":"getting-started/overview/host-architecture/#nodes","title":"Nodes","text":"<p>Gossamer includes a base node implementation called the host node that implements a shared base protocol for all blockchain protocols within the Polkadot ecosystem. The host node is used as the foundation for all official nodes within Gossamer and all custom nodes built with Gossamer.</p>"},{"location":"getting-started/overview/host-architecture/#host-node","title":"Host Node","text":"<p>The host node is the base node implementation. As the base node implementation, the host node is not complete without a configuration file, genesis file, compiled runtime, and runtime imports.</p>"},{"location":"getting-started/overview/host-architecture/#official-nodes","title":"Official Nodes","text":"<p>The gssmr node is an official node implementation for the Gossamer Testnet - a configuration file, genesis file, compiled runtime, and runtime imports used with the host node.</p> <p>The kusama node is an official node implementation for the Kusama Network - a configuration file, genesis file, compiled runtime, and runtime imports used with the host node.</p> <p>The polkadot node is an official node implementation for the Polkadot Network - a configuration file, genesis file, compiled runtime, and runtime imports used with the host node.</p>"},{"location":"getting-started/overview/host-architecture/#node-services","title":"Node Services","text":"<p>The node services are the main components of the host node:</p> <ul> <li>Core Service</li> <li>Network Service</li> <li>RPC Service</li> <li>State Service</li> </ul> <p>Each node service adheres to a common interface:</p> <pre><code>type Service interface {\n    Start() error\n    Stop() error\n}\n</code></pre> <ul> <li>All goroutines within node services should start inside <code>Start</code></li> <li>All node services  can be terminated without consequences by calling <code>Stop</code></li> <li>All node services whose <code>Start</code> method has not been called can be discarded without consequences</li> </ul>"},{"location":"getting-started/overview/host-architecture/#core-service","title":"Core Service","text":"<p>The core service is responsible for block production and finalisation (consensus) and processing messages received from the network service; it initialises BABE sessions and GRANDPA rounds and validates blocks and transactions before committing them to the state service. </p> <ul> <li>only the core service writes to block state</li> <li>only the core service writes to storage state</li> </ul>"},{"location":"getting-started/overview/host-architecture/#network-service","title":"Network Service","text":"<p>The network service is responsible for coordinating network host and peer interactions. It manages peer connections, receives and parses messages from connected peers and handles each message based on its type. If the message is a non-status message and we have confirmed the status of the connected peer, the message is sent to the core service to be processed.</p> <ul> <li>the network service only reads from block state</li> <li>only the network service writes to network state</li> </ul>"},{"location":"getting-started/overview/host-architecture/#host-submodule","title":"Host Submodule","text":"<p>The host submodule is a wrapper for the libp2p host. This is used to abstract away the details of libp2p and to provide a simple reusable interface for the network host.</p> <pre><code>type host struct {\n    ctx        context.Context\n    h          libp2phost.Host\n    dht        *kaddht.IpfsDHT\n    bootnodes  []peer.AddrInfo\n    protocolID protocol.ID\n}\n</code></pre>"},{"location":"getting-started/overview/host-architecture/#rpc-service","title":"RPC Service","text":"<p>The rpc service is an implementation of the JSON-RPC PSP.</p>"},{"location":"getting-started/overview/host-architecture/#state-service","title":"State Service","text":"<p>The state service is the source of truth for all chain and node state.</p>"},{"location":"getting-started/overview/host-architecture/#block-production","title":"Block production","text":"<p>A block is broken down into two sections, the header &amp; the body.</p> <p>The first step is to get information about the parent block, for new blocks, this would be the head of the chain.</p> <p>The parent hash and state root is added to the block header (point 1 &amp; 2)</p> <p>We then need to process the extrinsics (point 3), extrinsics is used to describe any additional information to include in the block that isn't explicitly required to produce a block, such as signed transactions from accounts, or additional information added by the block author, like a timestamp.</p> <p>Once processed, we get whats called an extrinsic root (point 4), this is used to verify the extrinsics when publishing later on.</p> <p>Finally, once all the contents of the block are in place, we then create the digest(point 5), this is used to verify the blocks contents.</p> <p>Information regarding the authoring of the block is stored in the Babe header, this allows verification of the block producer, the block, and the authority of the producer.</p> <p>Finally, the last item of the digest, much like transactions, is a signature known as a Seal, this is a signature of the header to allow immediate verification of the integrity of a block.</p>"},{"location":"getting-started/overview/package-library/","title":"Package Library","text":""},{"location":"getting-started/overview/package-library/#overview","title":"Overview","text":"<p>Gossamer is a modular blockchain framework; it was designed with a package structure that makes it possible to reuse Gossamer packages to build and run custom nodes and node services.</p> <p>This document provides an overview of the packages that make up the Gossamer framework - more detailed information about each package can be found at pkg.go.dev/ChainSafe/gossamer.</p> <p>Gossamer packages can be categorized into four package types:</p> <ul> <li> <p>cmd packages</p> <ul> <li><code>cmd/...</code> - command-line packages for running nodes and other services</li> </ul> </li> <li> <p>dot packages</p> <ul> <li><code>dot/...</code> - the dot node package and host node service packages</li> </ul> </li> <li> <p>lib packages</p> <ul> <li><code>lib/...</code> - modular packages for building nodes and other services</li> </ul> </li> <li> <p>test packages</p> <ul> <li><code>tests/...</code> - test packages for integration tests</li> </ul> </li> </ul>"},{"location":"getting-started/overview/package-library/#cmd-packages","title":"cmd packages","text":""},{"location":"getting-started/overview/package-library/#cmdgossamer","title":"<code>cmd/gossamer</code>","text":"<ul> <li>The gossamer package is used to run nodes built with Gossamer.</li> </ul>"},{"location":"getting-started/overview/package-library/#dot-packages","title":"dot packages","text":""},{"location":"getting-started/overview/package-library/#dot","title":"<code>dot</code>","text":"<ul> <li>The dot package contains packages that implement the Polkadot Host spec. The dot package implements the Host Node; it is the base node implementation for all Official Nodes and Custom Services built with Gossamer.</li> </ul>"},{"location":"getting-started/overview/package-library/#dotcore","title":"<code>dot/core</code>","text":"<ul> <li>The core package implements the Core Service -  responsible for block production and block finalisation (consensus) and processing messages received from the Network Service.</li> </ul>"},{"location":"getting-started/overview/package-library/#dotnetwork","title":"<code>dot/network</code>","text":"<ul> <li>The network package implements the Network Service - responsible for coordinating network host and peer interactions. It manages peer connections, receives and parses messages from connected peers and handles each message based on its type.</li> </ul>"},{"location":"getting-started/overview/package-library/#dotstate","title":"<code>dot/state</code>","text":"<ul> <li>The state package implements the State Service - the source of truth for all chain and node state that is made accessible to all node services.</li> </ul>"},{"location":"getting-started/overview/package-library/#dotsync","title":"<code>dot/sync</code>","text":"<ul> <li>The sync package implements handling of blocks received from the network layer.</li> </ul>"},{"location":"getting-started/overview/package-library/#dotrpc","title":"<code>dot/rpc</code>","text":"<ul> <li>The rpc package implements the RPC Service - an HTTP server that handles state interactions.</li> </ul>"},{"location":"getting-started/overview/package-library/#dottypes","title":"<code>dot/types</code>","text":"<ul> <li>The types package implements types defined within the Polkadot Host specification.</li> </ul>"},{"location":"getting-started/overview/package-library/#lib-packages","title":"lib packages","text":""},{"location":"getting-started/overview/package-library/#libbabe","title":"<code>lib/babe</code>","text":"<ul> <li>the babe package implements the BABE block production algorithm.</li> </ul>"},{"location":"getting-started/overview/package-library/#libblocktree","title":"<code>lib/blocktree</code>","text":"<ul> <li>the blocktree package implements the blocktree, a data structure which tracks the chain and all its non-finalised forks.</li> </ul>"},{"location":"getting-started/overview/package-library/#libcommon","title":"<code>lib/common</code>","text":"<ul> <li>the common package defines common types and functions.</li> </ul>"},{"location":"getting-started/overview/package-library/#libcrypto","title":"<code>lib/crypto</code>","text":"<ul> <li>the crypto package contains the key types used by the node (sr25519, ed25519, secp256k1).</li> </ul>"},{"location":"getting-started/overview/package-library/#libgrandpa","title":"<code>lib/grandpa</code>","text":"<ul> <li>the grandpa package implements the GRANDPA finality gadget.</li> </ul>"},{"location":"getting-started/overview/package-library/#libkeystore","title":"<code>lib/keystore</code>","text":"<ul> <li>the keystore package manages the keystore and includes test keyrings.</li> </ul>"},{"location":"getting-started/overview/package-library/#libruntime","title":"<code>lib/runtime</code>","text":"<ul> <li>the runtime package contains various wasm interpreters used to interpret the runtime. It currently contains <code>life</code> and <code>wasmer</code>; however, <code>wasmer</code> is the only interpreter that is fully supported at the moment. In the future, all interpreters will be fully supported.</li> </ul>"},{"location":"getting-started/overview/package-library/#libservices","title":"<code>lib/services</code>","text":"<ul> <li>the services package implements a common interface for node services.</li> </ul>"},{"location":"getting-started/overview/package-library/#libtransaction","title":"<code>lib/transaction</code>","text":"<ul> <li>the transaction package contains transaction types and the transaction queue data structure.</li> </ul>"},{"location":"getting-started/overview/package-library/#libtrie","title":"<code>lib/trie</code>","text":"<ul> <li>the trie package implements a modified merkle-patricia trie.</li> </ul>"},{"location":"getting-started/overview/package-library/#libutils","title":"<code>lib/utils</code>","text":"<ul> <li>the utils package is used to manage node and test directories.</li> </ul>"},{"location":"getting-started/overview/package-library/#test-packages","title":"test packages","text":""},{"location":"getting-started/overview/package-library/#testspolkadotjs_test","title":"<code>tests/polkadotjs_test</code>","text":"<ul> <li>the polkadotjs_test section is a node.js implementation to test interaction with Gossamer's RPC.</li> </ul>"},{"location":"getting-started/overview/package-library/#testsrpc","title":"<code>tests/rpc</code>","text":"<ul> <li>the rpc test collection comprises tests to cover the RPC's various endpoints and return data.</li> </ul>"},{"location":"getting-started/overview/package-library/#testsstress","title":"<code>tests/stress</code>","text":"<ul> <li>the stress test collection comprises tests to simulate the node running under various high stress scenarios</li> </ul>"},{"location":"getting-started/overview/package-library/#testssync","title":"<code>tests/sync</code>","text":"<ul> <li>the sync test collection comprises tests to verify the integrity of syncing operations and features</li> </ul>"},{"location":"getting-started/overview/package-library/#testsutils","title":"<code>tests/utils</code>","text":"<ul> <li>the utils test collection comprises tests to validate the function of various utilities throughout the Gossamer stack</li> </ul>"},{"location":"getting-started/resources/developer-resources/","title":"Developer Resources","text":""},{"location":"getting-started/resources/developer-resources/#specification","title":"Specification","text":"<ul> <li>Polkadot Host Specification</li> </ul>"},{"location":"getting-started/resources/developer-resources/#cryptography","title":"Cryptography","text":"<ul> <li>blake2s used for hashing</li> <li>ed25519 (signing)</li> <li>ed25519 (curve)</li> </ul>"},{"location":"getting-started/resources/developer-resources/#networking","title":"Networking","text":"<ul> <li>W3F networking research</li> <li>libp2p Specs</li> <li>Kademlia (DHT) White Paper</li> <li>Kademlia Wiki Page</li> </ul>"},{"location":"getting-started/resources/developer-resources/#wasm","title":"WASM","text":"<ul> <li>WASM Specification</li> <li>Wasm on the Blockchain: The Lesser Evil [blog post]</li> </ul>"},{"location":"getting-started/resources/developer-resources/#polkadot","title":"Polkadot","text":"<ul> <li>Polkadot Wiki</li> <li>Polkadot Consensus Wiki</li> <li>Polkadot Runtime Environment Specification (Section 8.2)</li> <li>Rust Docs: finality_grandpa</li> <li>paritytech/finality_grandpa</li> <li>The State of Crypto Interoperability Explained in Pictures</li> </ul>"},{"location":"getting-started/resources/developer-resources/#parachains","title":"Parachains","text":"<ul> <li>The Parachain (Blog Post)</li> <li>Parachains on Polkadot Wiki</li> <li>Parathreads (Blog Post)</li> <li>Parathreads on Polkadot Wiki</li> <li>The Path of a Parachain Block</li> <li>The Path of a Parachain Block (Video)</li> </ul>"},{"location":"getting-started/resources/developer-resources/#block-production-consensus","title":"Block production &amp; consensus","text":"<ul> <li>BABE Specification</li> <li>GRANDPA Specification</li> <li>Polkadot Consensus Part 1: Introduction</li> <li>Polkadot Consensus Part 2: GRANDPA</li> <li>Polkadot Consensus Part 3: BABE</li> <li>Polkadot Consensus Part 4: Security</li> <li>Staking Diagram</li> </ul>"},{"location":"getting-started/resources/developer-resources/#substrate","title":"Substrate","text":"<ul> <li>Official Substrate Documentation</li> </ul>"},{"location":"getting-started/resources/general-resources/","title":"General Resources","text":""},{"location":"getting-started/resources/general-resources/#welcome","title":"Welcome","text":"<p>Here you will find resources to help facilitate your learning about Polkadot, the Polkadot Host, and Gossamer. Don't worry if you are unfamiliar with these terms, the resources listed here assume no prior knowledge about them. That being said, it would be helpful to have a basic understanding of existing blockchains such as Bitcoin and Ethereum. </p>"},{"location":"getting-started/resources/general-resources/#polkadot","title":"Polkadot","text":"<p>To start, it would be extremely beneficial to have an understanding of the Polkadot Network. For a high-level introduction to Polkadot, check out the  lightpaper. To understand the motivation behind Polkadot's creation and what makes it unique, check out this great blog post A brief summary of everything Substrate and Polkadot. While reading, it would be helpful to note that Substrate and Gossamer are both implementations of the Polkadot Host. </p>"},{"location":"getting-started/resources/general-resources/#additional-resources","title":"Additional Resources","text":""},{"location":"getting-started/resources/general-resources/#docs","title":"Docs","text":"<ul> <li> <p>Polkadot Wiki</p> </li> <li> <p>Polkadot Paper</p> </li> </ul>"},{"location":"getting-started/resources/general-resources/#articles","title":"Articles","text":"<ul> <li>How Polkadot tackles the biggest problems facing blockchain innovators - June 7th 2018</li> </ul>"},{"location":"getting-started/resources/general-resources/#block-explorers","title":"Block explorers","text":"<ul> <li> <p>Polkadot Explorer</p> </li> <li> <p>Polkascan - Polkadot block explorer</p> </li> <li> <p>Polkadot Telemetry Service</p> </li> </ul>"},{"location":"getting-started/resources/general-resources/#polkadot-host","title":"Polkadot Host","text":"<p>[Please Note: The \"Polkadot Host\" was formerly known as the \"Polkadot Runtime Environment\"]</p> <p>The Polkadot Host plays two important roles within the Polkadot ecosystem.</p> <ul> <li> <p>The Polkadot Host implements the fundamental components for a blockchain, ie networking and consensus. These components are not expected to change, and as such, they host part of the blockchain that is expected to change, the Runtime. For more details, check out Polkadot Host.</p> </li> <li> <p>The Polkadot Host is a blockchain development framework, similar to how React and Angular are web development frameworks, but rather than helping developers build web applications, implementations of the Polkadot Host help developers build blockchains. </p> </li> </ul> <p>As mentioned above, both Substrate and Gossamer are implementations of the Polkadot Host. If you're interested in the nitty-gritty technical details, check out the Polkadot Host specification.</p>"},{"location":"getting-started/resources/general-resources/#gossamer","title":"Gossamer","text":"<p>Gossamer is an implementation of the Polkadot Host in Go. To learn more about Gossamer, we recommend the following resources:</p> <ul> <li> <p>To understand the vision behind Gossamer and how it fits into the Polkadot ecosystem, please read this blog post: \"The Future of Polkadot in Golang: Gossamer\".</p> </li> <li> <p>For a more technical explanation, we recommend watching this video.</p> </li> </ul>"},{"location":"getting-started/resources/general-resources/#additional-resources_1","title":"Additional Resources","text":""},{"location":"getting-started/resources/general-resources/#videos","title":"Videos","text":"<ul> <li>Web3 Builders: ChainSafe - GoLang Implementation of Polkadot Host</li> </ul>"},{"location":"getting-started/resources/general-resources/#articles_1","title":"Articles","text":"<ul> <li> <p>Gossamer Update: Introducing Gossamer - March 20th 2019</p> </li> <li> <p>Gossamer Update: Merkle-Patricia Trie - June 5th 2019</p> </li> <li> <p>Towards a Better Internet: Web3, Polkadot, and Gossamer - September 25th, 2019</p> </li> <li> <p>Building the Future with Gossamer - October 23rd 2019</p> </li> <li> <p>ChainSafe Releases Go-Schnorrkel - January 23rd 2020</p> </li> <li> <p>The Future of Polkadot in Golang: Gossamer - February 24th 2020</p> </li> <li> <p>Gossamer Update: August 2020 - August 25th 2020</p> </li> <li> <p>Gossamer Update: September 2020 - October 6th 2020</p> </li> <li> <p>Gossamer Update: November 2020 - November 27th 2020</p> </li> <li> <p>Gossamer: Into the Polkadot-verse Pt.1 - February 26th 2021</p> </li> <li> <p>Building parachains with go-cumulus - April 20th 2021</p> </li> </ul>"},{"location":"getting-started/resources/general-resources/#substrate","title":"Substrate","text":""},{"location":"getting-started/resources/general-resources/#docs_1","title":"Docs","text":"<ul> <li>Substrate Documentation</li> </ul>"},{"location":"getting-started/resources/general-resources/#videos_1","title":"Videos","text":"<ul> <li> <p>Gavin Wood on Substrate at Event Horizon 2018</p> </li> <li> <p>Rob Habermeier presents Parity Substrate</p> </li> </ul>"},{"location":"getting-started/resources/general-resources/#articles_2","title":"Articles","text":"<ul> <li> <p>What is Substrate? - July 9th 2018</p> </li> <li> <p>A brief summary of everything Substrate and Polkadot - March 18th 2019</p> </li> </ul>"},{"location":"getting-started/resources/general-resources/#web3-foundation","title":"Web3 Foundation","text":""},{"location":"getting-started/resources/general-resources/#docs_2","title":"Docs","text":"<ul> <li>Web3 Foundation's General Grants Program</li> </ul>"},{"location":"getting-started/resources/general-resources/#articles_3","title":"Articles","text":"<ul> <li>Why We Need Web 3.0 - September 12th 2018</li> </ul>"},{"location":"integrate/connect-to-polkadot-js/","title":"Connecting to Polkadot.js","text":"<p>To view your running Gossamer node with a UI, Polkadot has created a handy app, which you can use here: https://polkadot.js.org/apps/</p> <p>If using Polkadot's hosted app, you will need to ensure your node has the <code>--rpc-external</code>, <code>--ws</code> &amp; <code>--ws-external</code> flags, if you are running the app locally, just ensure the rpc &amp; websocket servers are running (<code>--rpc</code> &amp;&amp; <code>--ws</code>)</p> <p>For example:</p> <pre><code>bin/gossamer --rpc --ws --wsport 8546 --rpcmods system,author,chain,state,account,rpc --key alice\n</code></pre>"},{"location":"integrate/connect-to-polkadot-js/#connecting-the-app-to-your-node","title":"Connecting the app to your node","text":"<p>You'll need to setup the polkadot.js/apps to use a custom endpoint to connect to your gossamer node.  Open polkadot.js.org/apps.</p> <p>Once you've opened the app in your browser, you should see it connected to the Polkadot network: </p> <p></p> <p>In the top left hand corner, click the logo to open the network selection modal: </p> <p></p> <p>Next, at the bottom of this menu is a \"Development\" dropdown, click to open that</p> <p></p> <p>Now you should see a text area with the label \"custom endpoint\", here you add your local node's websocket address, usually \"ws://127.0.0.1:8586\", click the Save icon on the right of the text box to save the endpoint.</p> <p></p> <p>Finally, click the \"Switch\" button at the top of this modal:</p> <p></p> <p>Congratulations, you've successfully connected to your Gossamer node!</p> <p></p>"},{"location":"integrate/using-prometheus/","title":"Using Prometheus","text":"<ol> <li>Install Docker</li> <li>Install Docker Compose.</li> <li>\ud83d\udce5 Download the repository or <code>git clone https://github.com/ChainSafe/gossamer.git</code> it.</li> <li>\ud83c\udfc3 You can run the repository docker-compose.yml with <code>docker-compose up</code>. By default, it will run a Gossamer node running on the Kusama chain, together with a Prometheus server and Grafana server. Both Prometheus and Grafana are pre-configured to show a nice dashboard of the metrics. All the relevant configuration lives in the <code>docker</code> directory of the repository.</li> <li>\ud83d\uddb1\ufe0f Access the Grafana dashboard at localhost:3000, there is no login required.</li> </ol> <p>\ud83d\udc81 You can modify the <code>docker</code> directory and the <code>docker-compose.yml</code> file to match the desired configuration.</p>"},{"location":"repo/labels/","title":"Labels","text":""},{"location":"repo/labels/#labels","title":"Labels","text":"<p>Below is the list of labels and their descriptions used in Gossamer repository.</p> <ul> <li>Epic - Issue used to track development status of a complex feature, aggregates several issues.</li> <li>Feature-branch - pull request from feature branch to origin.</li> <li>Release - pull request with next release changes.</li> <li>good first issue - issues that are suitable for first-time contributors.</li> <li><code>A-</code>  Action needed label. Marks that there is a specific action needed for issue/PR.</li> <li>A-tooBig - issue or PR needs to be broken down to smaller parts.</li> <li>A-stale - issue or PR is deprecated and needs to be closed. </li> <li>A-blocked - issue or PR is blocked  until something else changes.</li> <li>A-triage - issue description needs refactor and/or labeled.</li> <li>A-debug - issue requires detective debug work to figure out what's going wrong.</li> <li>A-design - issue requires design work to think about how it would best be accomplished.</li> <li><code>T-</code> Describes the type of issue or pull request.</li> <li>T-bug - this issue covers unexpected and/or wrong behaviour. </li> <li>T-feat - this issue/pr is a new feature or functionality.</li> <li>T-enhancement - this issue/pr covers improvement of existing functionality. </li> <li>T-refactor - this issue/pr covers refactoring of existing code.  </li> <li>T-security - this issue/pr covers security sensitive problem.</li> <li>T-research - this issue/pr is a research type issue.</li> <li>T-investigation - this issue/pr is an investigation, probably related to some bug with unknown causes.</li> <li><code>C-</code> Complexity label. We operate only 3 complexity levels.</li> <li>C-simple -  Minor changes changes, no additional research needed. Good first issue/review.</li> <li>C-complex - Complex changes across multiple modules. Possibly will require additional research.</li> <li>C-chaotic - Unpredictable nature of this task/changes makes its chaotic.</li> <li><code>P-</code> Priority level. We only have 3 priority levels, everything else is average by default. </li> <li>P-critical - this must be fixed immediately or contributors or users will be severely impacted.</li> <li>P-high - this should be addressed ASAP. Colour #FBCA04</li> <li>P-low - this is mostly nice to have. Colour #0E8A16</li> <li><code>S-</code> Scope this work related to, could be multiple, but usually this means that task needs to be break down.</li> <li>S-sync-[westend | kusama | polkadot | paseo] -  related to particular network syncing.</li> <li>S-tests - issue related to adding new tests.  </li> <li>S-doc - documentation related.</li> <li>S-cli - issue related to Gossamer CLI.</li> <li>S-ci - issue related to continuous integration tasks or piplelines.</li> <li>S-crypto - issues related to the lib/crypto package.</li> <li>S-grandpa - issues related to block finality.</li> <li>S-babe - issues related to block production functionality. </li> <li>S-runtime- issues related to the lib/runtime package</li> <li>S-telemetry - issue related to node telemetry and metrics reports. </li> <li>S-rpc - issues related to the dot/rpc package.</li> <li>S-scale - issues related to the pkg/scale package.</li> <li>S-utils - issues related to all other lib packages.</li> <li>S-network - issues related to the dot/network package.</li> <li>S-state - issues related to dot/state package.</li> <li>S-subsystems-overseer - issues related to polkadot host overseer functionality.</li> <li>S-subsystems-collator - issues related to polkadot host collator subsystem functionality.</li> <li>S-subsystems-backing -  issues related to polkadot host backing subsystem functionality.</li> <li>S-subsystems-availability - issues related to polkadot host availability subsystem functionality.</li> <li>S-subsystems-disputes - issues related to polkadot host disputes subsystem functionality.</li> <li>S-infrastructure - issues related to infrastructure and DevOps.</li> <li>S-dependencies - issues related to dependencies changes. Used by dependabot.</li> </ul>"},{"location":"testing-and-debugging/debugging/","title":"Debugging","text":""},{"location":"testing-and-debugging/debugging/#logger-commands","title":"Logger Commands","text":"<p>The <code>log</code> command is used for setting the logging levels for the node.</p>"},{"location":"testing-and-debugging/debugging/#config-file","title":"Config File","text":"<p>The logging level can be set using config.toml file, default log level will be set to info</p> <p><code>[log] core = \"trace | debug | info | warn | error | crit\" sync = \"trace | debug | info | warn | error | crit\" network = \"trace | debug | info | warn | error | crit\" rpc = \"trace | debug | info | warn | error | crit\" state = \"trace | debug | info | warn | error | crit\" runtime = \"trace | debug | info | warn | error | crit\" babe = \"trace | debug | info | warn | error | crit\" grandpa = \"trace | debug | info | warn | error | crit\"</code></p>"},{"location":"testing-and-debugging/debugging/#logging-global-flags","title":"Logging Global Flags","text":"<p><code>--log global=value        Supports levels crit (silent) to trce (trace) (default: \"info\")</code></p>"},{"location":"testing-and-debugging/debugging/#running-node-with-log-level-as-debug","title":"Running node with log level as <code>DEBUG</code>","text":"<p><code>./bin/gossamer --config chain/gssmr/config.toml --log global=debug</code></p>"},{"location":"testing-and-debugging/pprof/","title":"Pprof","text":""},{"location":"testing-and-debugging/pprof/#pprof","title":"Pprof","text":"<p>There is a built-in pprof server to facilitate profiling the program. You can enable it with the flag <code>--pprofserver</code> or by modifying the TOML configuration file.</p> <p>Note it does not affect performance unless the server is queried.</p> <p>We assume Gossamer runs on <code>localhost</code> and the Pprof server is listening on the default <code>6060</code> port. You can configure the Pprof server listening address with the pprof TOML key <code>listening-address</code> or the flag <code>--pprofaddress</code>.</p> <p>You need to have Go installed to profile the program.</p>"},{"location":"testing-and-debugging/pprof/#browser","title":"Browser","text":"<p>The easiest way to visualize profiling data is through your browser.</p> <p>For example, the following commands will show interactive results at http://localhost:8000:</p> <pre><code># Check the heap\ngo tool pprof -http=localhost:8000 http://localhost:6060/debug/pprof/heap\n# Check the CPU time spent for 10 seconds\ngo tool pprof -http=localhost:8000 http://localhost:6060/debug/pprof/profile?seconds=10\n</code></pre>"},{"location":"testing-and-debugging/pprof/#compare-heaps","title":"Compare heaps","text":"<p>You can compare heaps with Go's pprof, this is especially useful to find memory leaks.</p> <ol> <li>Download the first heap profile <code>wget -qO heap.1.out http://localhost:6060/debug/pprof/heap</code></li> <li>Download the second heap profile <code>wget -qO heap.2.out http://localhost:6060/debug/pprof/heap</code></li> <li>Compare the second heap profile with the first one using <code>go tool pprof -base ./heap.1.out heap.2.out</code></li> </ol>"},{"location":"testing-and-debugging/pprof/#more-routes","title":"More routes","text":"<p>More routes are available in the HTTP pprof server. You can also list them at http://localhost:6060/debug/pprof/. Notable ones are written below:</p>"},{"location":"testing-and-debugging/pprof/#goroutine-blocking-profile","title":"Goroutine blocking profile","text":"<p>The route <code>/debug/pprof/block</code> is available but requires to set the block profile rate, using either the toml value <code>block-rate</code> or the flag <code>--pprofblockrate</code>.</p>"},{"location":"testing-and-debugging/pprof/#mutex-contention-profile","title":"Mutex contention profile","text":"<p>The route <code>/debug/pprof/mutex</code> is available but requires to set the mutex profile rate, using either the toml value <code>mutex-rate</code> or the flag <code>--pprofmutexrate</code>.</p>"},{"location":"testing-and-debugging/pprof/#other-routes","title":"Other routes","text":"<p>The other routes are listed below, if you need them:</p> <ul> <li><code>/debug/pprof/cmdline</code></li> <li><code>/debug/pprof/symbol</code></li> <li><code>/debug/pprof/trace</code></li> <li><code>/debug/pprof/goroutine</code></li> <li><code>/debug/pprof/threadcreate</code></li> </ul>"},{"location":"testing-and-debugging/test-suite/","title":"Integration Tests","text":""},{"location":"testing-and-debugging/test-suite/#gossamer-test-suite","title":"Gossamer Test Suite","text":"<p>To run Gossamer unit tests run the following command:</p> <pre><code>make test\n</code></pre> <p>The above command will run all tests on project files with a timeout set for 20 minutes, and generate a coverage report in root <code>c.out</code>. </p> <p>You can view the coverage report through HTML by running the below command after running the above unit tests, or by visiting our code coverage report here.</p> <pre><code>go tool cover -html=c.out -o cover.html\n</code></pre> <p>Proceed to open <code>cover.html</code> in your preferred browser. </p>"},{"location":"testing-and-debugging/test-suite/#gossamer-integration-tests","title":"Gossamer Integration Tests","text":"<p>Running Gossamer's integration tests with the below commands will build a Gossamer binary, install required dependencies, and then proceeds to run the provided set of tests. Integration tests can also be run within a docker container.</p> <p>To run Gossamer integration tests in stress mode run the following command:</p> <pre><code>make it-stress\n</code></pre> <p>To run Gossamer integration tests against GRANDPA in stress mode run the following command:</p> <pre><code>make it-grandpa\n</code></pre> <p>To run Gossamer RPC integration tests run the following command:</p> <pre><code>make it-rpc\n</code></pre> <p>To run Gossamer Network integration tests run the following command:</p> <pre><code>make it-network\n</code></pre> <p>To run Gossamer Sync integration tests run the following command:</p> <pre><code>make it-sync\n</code></pre> <p>To run Gossamer Polkadot.js integration tests run the following command:</p> <pre><code>make it-polkadotjs\n</code></pre>"},{"location":"usage/command-line/","title":"Command-Line","text":""},{"location":"usage/command-line/#gossamer-command","title":"Gossamer Command","text":"<p>The <code>gossamer</code> command is the root command for the <code>gossamer</code> package (<code>cmd/gossamer</code>). The root command starts the node (and initialises the node if the node has not already been initialised).</p>"},{"location":"usage/command-line/#flags","title":"Flags","text":"<p>These are the flags that can be used with the <code>gossamer</code> command</p> <pre><code>--babe-authority  Enable BABE authorship\n--base-path       Working directory for the node\n--bootnodes       Comma separated enode URLs for network discovery bootstrap\n--chain           chain-spec-raw.json used to load node configuration. It can also be a chain name (eg. kusama, polkadot, westend, westend-dev and westend-local)\n--discovery-interval Interval between network discovery lookups (in duration format)\n--grandpa-authority Runs as a GRANDPA authority node\n--grandpa-interval GRANDPA voting period in duration (default 10s)\n--help help for gossamer\n--id Identifier used to identify this node in the network\n--key Key to use for the node\n--listen-addr  Overrides the listen address used for peer to peer networking\n--log:  Set a logging filter.\n        Syntax is a list of 'module=logLevel' (comma separated)\n        e.g. --log sync=debug,core=trace\n        Modules are global, core, digest, sync, network, rpc, state, runtime, babe, grandpa, wasmer.\n        Log levels (least to most verbose) are error, warn, info, debug, and trace.\n        By default, all modules log 'info'.\n        The global log level can be set with --log global=debug\n--max-peers Maximum number of peers to connect to (default 50)\n--min-peers Minimum number of peers to connect to (default 0)\n--name Name of the node\n--no-bootstrap Disables network bootstrapping (mdns still enabled)\n--no-mdns Disables network mdns discovery\n--no-telemetry Disables telemetry\n--node-key Overrides the secret Ed25519 key to use for libp2p networking\n--password Password used to encrypt the keystore\n--persistent-peers Comma separated list of peers to always keep connected to\n--port Network port to use (default 7001)\n--pprof.block-profile-rate The frequency at which the Go runtime samples the state of goroutines to generate block profile information.\n--pprof.enabled Enable the pprof profiler\n--pprof.listening-address The address to listen on for pprof profiling\n--pprof.mutex-profile-rate  The frequency at which the Go runtime samples the state of mutexes to generate mutex profile information.\n--prometheus-external Publish prometheus metrics to external network\n--prometheus-port Port to use for prometheus metrics (default 9876)\n--protocol-id  Protocol ID to use (default \"/gossamer/gssmr/0\")\n--public-dns Public DNS name of the node\n--public-ip Public IP address of the node\n--retain-blocks  Retain number of block from latest block while pruning (default 512)\n--rewind Rewind head of chain to the given block number\n--role Role of the node. Can be one of: full, light and authority\n--rpc-external Enable external HTTP-RPC connections\n--rpc-host HTTP-RPC server listening hostname\n--rpc-methods API modules to enable via HTTP-RPC, comma separated list\n--rpc-port HTTP-RPC server listening port (default 8545)\n--state-pruning Pruning strategy to use. Supported strategy: archive\n--telemetry-url URL of telemetry server to connect to\n--unlock Unlock an account. eg. --unlock=0 to unlock account 0.\n--unsafe-rpc Enable unsafe HTTP-RPC methods\n--unsafe-rpc-external Enable external unsafe HTTP-RPC connections\n--unsafe-ws-external Enable external unsafe WebSockets connections\n--validator Run as a validator node\n--wasm-interpreter WASM interpreter (default \"wasmer\")\n--ws-external Enable external WebSockets connections\n--ws-port WebSockets server listening port (default 8546)\n</code></pre>"},{"location":"usage/command-line/#gossamer-subcommands","title":"Gossamer Subcommands","text":"<p>List of available subcommands:</p> <pre><code>SUBCOMMANDS:\n    help, h           Shows a list of commands or help for one command\n    account        Create and manage node keystore accounts\n    export         Export configuration values to TOML configuration file\n    init           Initialise node databases and load genesis data to state\n    build-spec     Generates chain-spec JSON data, and can convert to raw chain-spec data\n    import-runtime Imports a WASM runtime blob into the node's database\n    import-state   Imports a state dump into the node's database\n    prune-state    Prune state will prune the state trie\n</code></pre> <p>List of flags for <code>init</code> subcommand:</p> <pre><code>--force            Disable all confirm prompts (the same as answering \"Y\" to all)\n--chain            Path to genesis JSON file\n--base-path        Working directory for the node\n</code></pre> <p>List of flags for <code>account</code> subcommand:</p> <pre><code>--password      Password used to encrypt the keystore. Used with --generate or --unlock\n--scheme        Keyring scheme (sr25519, ed25519, secp256k1\n--keystore-path path to keystore\n--keystore-file keystore file name\n</code></pre>"},{"location":"usage/command-line/#running-node-roles","title":"Running Node Roles","text":"<p>Run an authority node:</p> <pre><code>./bin/gossamer --key alice --role authority\n</code></pre> <p>Run a non-authority node:</p> <pre><code>./bin/gossamer --key alice --role full\n</code></pre>"},{"location":"usage/command-line/#running-multiple-nodes","title":"Running Multiple Nodes","text":"<p>Two options for running another node at the same time...</p> <p>(1) run <code>gossamer init</code> with two different <code>base-path</code> and manually update <code>port</code> in <code>base-path/config/config.toml</code>:</p> <pre><code>gossamer init --base-path ~/.local/share/gossamer/alice --chain westend-local\ngossamer init --base-path ~/.local/share/gossamer/bob --chain westend-local\n# open ~/.local/share/gossamer/bob/config/config.toml, set port=7002\n# set role=4 to also make bob an authority node, or role=1 to make bob a non-authority node\n</code></pre> <p>(2) run with <code>--base-path</code> flag:</p> <pre><code>./bin/gossamer --base-path ~/.local/share/gossamer/alice --key alice --roles 4\n./bin/gossamer --base-path ~/.local/share/gossamer/bob --key bob --roles 4\n</code></pre> <p>or run with port, base-path flags:</p> <pre><code>./bin/gossamer --base-path ~/.local/share/gossamer/alice --key alice --role 4 --port 7001\n./bin/gossamer --base-path ~/.local/share/gossamer/bob --key bob --role 4 --port 7002\n</code></pre> <p>To run more than two nodes, repeat steps for bob with a new <code>port</code> and <code>base-path</code> replacing <code>bob</code>.</p> <p>Available built-in keys:</p> <pre><code>./bin/gossmer --key alice\n./bin/gossmer --key bob\n./bin/gossmer --key charlie\n./bin/gossmer --key dave\n./bin/gossmer --key eve\n./bin/gossmer --key ferdie\n./bin/gossmer --key george\n./bin/gossmer --key heather\n</code></pre>"},{"location":"usage/command-line/#initialising-nodes","title":"Initialising Nodes","text":"<p>To initialise or re-initialise a node, use the init subcommand <code>init</code>:</p> <pre><code>./bin/gossamer init --base-path ~/.local/share/gossamer/alice --chain westend-local\n./bin/gossamer --base-path ~/.local/share/gossamer/alice --key alice --roles 4\n</code></pre> <p><code>init</code> can be used with the <code>--base-path</code> or <code>--chain</code> flag to re-initialise a custom node (ie, <code>bob</code> from the example above):</p> <pre><code>./bin/gossamer init --base-path ~/.local/share/gossamer/bob --chain westend-local\n</code></pre>"},{"location":"usage/configuration/","title":"Configuration","text":"<p>Gossamer consumes a <code>.toml</code> file containing predefined settings for the node from setting the chain-spec file, to the RPC/WS server, this file allows you to curate the functionality of the node instead of writing out the flags manually</p>"},{"location":"usage/configuration/#full-reference","title":"Full reference","text":"<pre><code># This is a TOML config file.\n# For more information, see https://github.com/toml-lang/toml\n\n# NOTE: Any path below can be absolute (e.g. \"/var/gossamer/data\") or\n# relative to the home directory (e.g. \"data\"). The home directory is\n# \"$HOME/.local/share/gossamer\" by default, but could be changed via\n# $GSSMRHOME env variable or --home cmd flag.\n\n#######################################################################\n###                   Main Base Config Options                      ###\n#######################################################################\n\n# Name of the node\n# Defaults to \"Gossamer\"\nname = \"Westend\"\n\n# Identifier of the node\n# Defaults to a random value\nid = \"westend_dev\"\n\n# Path to the working directory of the node\n# Defaults to \"$HOME/.local/share/gossamer/&lt;CHAIN&gt;\"\nbase-path = \"/Users/user/.local/share/gossamer/alice\"\n\n# Path to the chain-spec raw JSON file\nchain-spec = \"/Users/user/.local/share/gossamer/alice/chain-spec.json\"\n\n# Global log level\n# One of: crit, error, warn, info, debug, trace\n# Defaults to \"info\"\nlog-level = \"info\"\n\n# Listen address for the prometheus server\n# Defaults to \"localhost:9876\"\nprometheus-port = 9876\n\n# Retain number of block from latest block while pruning\n# Defaults to 512\nretain-blocks = 512\n\n# State trie online pruning mode\n# Defaults to \"archive\"\npruning = \"archive\"\n\n# Disable connecting to the Substrate telemetry server\n# Defaults to false\nno-telemetry = false\n\n# List of telemetry server URLs to connect to\n# Format for each entry:\n# [[telemetry-urls]]\n# endpoint = \"wss://telemetry.polkadot.io/submit/\"\n# verbosity = 0\n\n\n# Publish metrics to prometheus\n# Defaults to false\nprometheus-external = false\n\n#######################################################################\n###                 Advanced Configuration Options                  ###\n#######################################################################\n\n#######################################################\n###              Log Configuration Options          ###\n#######################################################\n[log]\n\n# One of: crit, error, warn, info, debug, trace\n# Defaults to \"info\"\n\n# Core module log level\ncore = \"info\"\n\n# Digest module log level\ndigest = \"info\"\n\n# Sync module log level\nsync = \"info\"\n\n# Network module log level\nnetwork = \"info\"\n\n# RPC module log level\nrpc = \"info\"\n\n# State module log level\nstate = \"info\"\n\n# Runtime module log level\nruntime = \"info\"\n\n# BABE module log level\nbabe = \"info\"\n\n# GRANDPA module log level\ngrandpa = \"info\"\n\n# WASM module log level\nwasmer = \"info\"\n\n\n#######################################################\n###          Account Configuration Options          ###\n#######################################################\n[account]\n\n# Keyring to use for the node\nkey = \"alice\"\n\n# Unlock an account. eg. --unlock=0 to unlock account 0\nunlock = \"\"\n\n#######################################################\n###          Network Configuration Options          ###\n#######################################################\n[network]\n\n# Network port to use\n# Defaults to 7001\nport = 7001\n\n# Comma separated node URLs for network discovery bootstrap\nbootnodes = \"\"\n\n# Protocol ID to use\nprotocol-id = \"dot\"\n\n# Disables network bootstrapping (mDNS still enabled)\n# Defaults to false\nno-bootstrap = true\n\n# Disables network mDNS discovery\n# Defaults to false\nno-mdns = true\n\n# Minimum number of peers to connect to\n# Defaults to 25\nmin-peers = 0\n\n# Maximum number of peers to connect to\n# Defaults to 50\nmax-peers = 0\n\n# Comma separated list of peers to always keep connected to\npersistent-peers = \"\"\n\n# Interval to perform peer discovery in duration\n# Format: \"10s\", \"1m\", \"1h\"\ndiscovery-interval = \"1s\"\n\n# Overrides the public IP address used for peer to peer networking\"\npublic-ip = \"\"\n\n# Overrides the public DNS used for peer to peer networking\"\npublic-dns = \"\"\n\n# Overrides the secret Ed25519 key to use for libp2p networking\nnode-key = \"\"\n\n# Multiaddress to listen on\nlisten-addr = \"\"\n\n#######################################################\n###             Core Configuration Options          ###\n#######################################################\n[core]\n\n# Role of the gossamer node\n# Represented as an integer\n# One of: 1 (Full), 2 (Light), 4 (Authority)\nrole = 1\n\n# Enable BABE authoring\n# Defaults to true\nbabe-authority = true\n\n# Enable GRANDPA authoring\n# Defaults to true\ngrandpa-authority = true\n\n# WASM interpreter\n# Defaults to \"wasmer\"\nwasm-interpreter = \"wasmer\"\n\n# Grandpa interval\ngrandpa-interval = \"1s\"\n\n#######################################################\n###            State Configuration Options          ###\n#######################################################\n[state]\n# Rewind head of chain to the given block number\n# Defaults to 0\nrewind = 0\n\n#######################################################\n###              RPC Configuration Options          ###\n#######################################################\n[rpc]\n\n# Enable external HTTP-RPC connections\n# Defaults to false\nrpc-external = false\n\n# Enable unsafe RPC methods\n# Defaults to false\nunsafe-rpc = false\n\n# Enable external HTTP-RPC connections to unsafe procedures\n# Defaults to false\nunsafe-rpc-external = false\n\n# HTTP-RPC server listening port\n# Defaults to 8545\nport = 8545\n\n# HTTP-RPC server listening hostname\n# Defaults to \"localhost\"\nhost = \"localhost\"\n\n# API modules to enable via HTTP-RPC, comma separated list\n# Defaults to \"system, author, chain, state, rpc, grandpa, offchain, childstate, syncstate, payment\"\nmodules = [\"system\", \"author\", \"chain\", \"state\", \"rpc\", \"grandpa\", \"offchain\", \"childstate\", \"syncstate\", \"payment\", ]\n\n# Websockets server listening port\n# Defaults to 8546\nws-port = 8546\n\n# Enable external websocket connections\n# Defaults to false\nws-external = false\n\n# Enable external websocket connections to unsafe procedures\n# Defaults to false\nunsafe-ws-external = false\n\n#######################################################\n###            PPROF Configuration Options          ###\n#######################################################\n[pprof]\n\n# Enable the pprof server\n# Defaults to false\nenabled = false\n\n# Pprof server listening address\n# Defaults to \"localhost:6060\"\nlistening-address = \"localhost:6060\"\n\n# The frequency at which the Go runtime samples the state of goroutines to generate block profile information.\n# Defaults to 0\nblock-profile-rate = 0\n\n# The frequency at which the Go runtime samples the state of mutexes to generate mutex profile information.\n# Defaults to 0\nmutex-profile-rate = 0\n</code></pre>"},{"location":"usage/import-runtime/","title":"Launching a chain with a custom runtime","text":"<p>The main use-case of the Polkadot Host is to create a standalone chain that may be converted to a parachain later.  To do this, you need to have a compiled wasm runtime available for your chain. This can be created using FRAME, a domain-specific language used for creating runtimes.</p> <p>Once you have your runtime ready and compiled into a wasm binary, it is ready to be used with Gossamer.</p>"},{"location":"usage/import-runtime/#1-create-chain-spec-file-with-custom-runtime","title":"1. Create chain spec file with custom runtime","text":"<p>You can use the <code>gossamer import-runtime</code> subcommand to create a chain-spec file containing your custom runtime. The rest of the file is based off the <code>gssmr</code> <code>chain-spec.json</code> file.</p> <pre><code>make gossamer\n./bin/gossamer import-runtime &lt;custom-runtime.wasm&gt; &gt; chain-spec.json\n</code></pre> <p>This creates a chain spec file <code>chain-spec.json</code> with the contents of your given file as the <code>\"system\"</code> <code>\"code\"</code> field. </p> <p>By default, <code>chain-spec.json</code> will contain the 9 built-in keys as authorities with some preset balance. You can edit the fields as you wish.</p> <p>Note: the <code>import-runtime</code> subcommand does not validate that the runtime in the given file is valid. </p>"},{"location":"usage/import-runtime/#2-create-raw-chain-spec-file-from-chain-spec","title":"2. Create raw chain-spec file from chain spec","text":"<p>To create the raw genesis file used by the node, you can use the <code>gossamer build-spec</code> subcommand.</p> <pre><code>./bin/gossamer build-spec --raw --chain chain-spec.json &gt; chain-spec-raw.json\nor\n./bin/gossamer build-spec --raw --chain chain-spec.json --output-path chain-spec-raw.json\n</code></pre> <p>This creates a chain-spec file <code>chain-spec.json</code> that is usable by the node.</p>"},{"location":"usage/import-runtime/#3-initialise-the-node-with-the-chain-spec-file","title":"3. Initialise the node with the chain-spec file","text":"<p>Next, you will need to write the state in <code>chain-spec.json</code> to the database by initialising the node.</p> <pre><code>./bin/gossamer init --chain chain-spec.json\n</code></pre>"},{"location":"usage/import-runtime/#4-start-the-node","title":"4. Start the node","text":"<p>The final step is to launch the node. This is the same as normal, providing a built-in authority key and the base-path:</p> <pre><code>./bin/gossamer --key alice --base-path /tmp/gossamer\n</code></pre> <p>You now have a chain running a custom runtime!</p>"},{"location":"usage/import-state/","title":"Gossamer state import","text":""},{"location":"usage/import-state/#importing-state","title":"Importing state","text":"<p>Gossamer supports the ability to import state exported from gossamer or substrate. To retrieve the state from an existing node, you will need to run the node in archive mode. For example, with Kusama:</p> <pre><code>./target/release/polkadot --chain=kusama --pruning archive --rpc-methods unsafe --rpc-port 8545\n</code></pre> <p>Since we will be using the RPC method <code>state_getPairs</code> which is marked <code>unsafe</code>, you will need to use the <code>--rpc-methods unsafe</code> option.</p> <p>Once the node has synced to the height you wish to export, you can export the state by first finding the block hash of the block you wish to export (can use polkascan.io) or RPC. For example, for block 1000:</p> <pre><code>curl -H \"Content-Type: application/json\" -d '{\"id\":1, \"jsonrpc\":\"2.0\", \"method\": \"chain_getBlockHash\", \"params\":[1000]}' http://localhost:8545\n{\"jsonrpc\":\"2.0\",\"result\":\"0xcf36a1e4a16fc579136137b8388f35490f09c5bdd7b9133835eba907a8b76c30\",\"id\":1}\n</code></pre> <p>For the following steps, you will need <code>jq</code> installed.</p> <p>Then, you can get the state at that block and redirect the output to a file <code>state.json</code>:</p> <pre><code>curl -H \"Content-Type: application/json\" -d '{\"id\":1, \"jsonrpc\":\"2.0\", \"method\": \"state_getPairs\", \"params\":[\"0x\", \"0xcf36a1e4a16fc579136137b8388f35490f09c5bdd7b9133835eba907a8b76c30\"]}' http://localhost:8545 | jq '.result' &gt; state.json\n</code></pre> <p>Then, get the header of the block:</p> <pre><code>curl -H \"Content-Type: application/json\" -d '{\"id\":1, \"jsonrpc\":\"2.0\", \"method\": \"chain_getHeader\", \"params\":[\"0xcf36a1e4a16fc579136137b8388f35490f09c5bdd7b9133835eba907a8b76c30\"]}' http://localhost:8545 | jq '.result' &gt; header.json\n</code></pre> <p>Lastly, get the first slot of the network. This can be find on polkascan.io. First, go to the network which you are importing then search for <code>1</code> (ie. block 1). Then, navigate to <code>Logs -&gt; PreRuntime -&gt; Details</code>.  It will then show the <code>slotNumber</code>, for example, for Kusama, the first slot number is <code>262493679</code>: https://polkascan.io/kusama/log/1-0</p> <p>Now you have all the required info to import the state into gossamer.</p> <p>In the <code>gossamer</code> directory:</p> <pre><code>make gossamer\n./bin/gossamer --chain &lt;chain-name&gt; init --force\n./bin/gossamer import-state --chain &lt;chain-name&gt; --state state.json  --header header.json --first-slot &lt;first-slot&gt;\n</code></pre> <p>If you don't want to use a specific chain, but instead a custom data directory, you can use <code>--base-path</code> instead of <code>--chain</code>.</p> <p>If it is successful, you will see a <code>finished state import</code> log. Now, you can start the node as usual, and the node should begin from the imported state:</p> <pre><code>./bin/gossamer --chain &lt;chain-name&gt; --base-path ~/.local/share/gossamer/kusama\n</code></pre>"},{"location":"usage/running-nodes/","title":"Running Nodes","text":""},{"location":"usage/running-nodes/#run-a-gossamer-node","title":"Run a Gossamer Node","text":"<p>To run default Gossamer node, first initialise the node. This writes the genesis state to the database.</p> <pre><code>./bin/gossamer --chain westend-dev init\n</code></pre> <p>The gossamer node runs as an authority by default. The built-in authorities are <code>alice</code>, <code>bob</code>, <code>charlie</code>, <code>dave</code>, <code>eve</code>, <code>ferdie</code>, <code>george</code>, and <code>ian</code>. To start the node as an authority, provide it with a built-in key:</p> <pre><code>./bin/gossamer --chain westend-dev --key alice\n</code></pre> <p>The node will not build blocks every slot by default; it will appear that the node is doing nothing, but it is actually waiting for a slot to build a block. If you wish to force it to build blocks every slot, you update the <code>[core]</code> section of <code>chain/gssmr/config.toml</code> to the following:</p> <pre><code>[core]\nroles = 4\nbabe-authority = true\ngrandpa-authority = true\n</code></pre> <p>Then, re-run the above steps. NOTE: this feature is for testing only; if you wish to change the BABE block production parameters, you need to create a modified runtime.</p> <p>If you wish to run the default node as a non-authority, you can specify <code>roles=1</code>:</p> <pre><code>./bin/gossamer --chain westend-dev --roles 1 --base-path /tmp/gossamer\n</code></pre>"},{"location":"usage/running-nodes/#run-kusama-node","title":"Run Kusama Node","text":"<p>To run a Kusama node, first initialise the node:</p> <pre><code>./bin/gossamer --chain kusama init --base-path /tmp/gossamer\n</code></pre> <p>Then run the node selecting the Kusama chain:</p> <pre><code>./bin/gossamer --chain kusama --base-path /tmp/gossamer\n</code></pre> <p>The node may not appear to do anything for the first minute or so (it's bootstrapping to the network.) If you wish to see what is it doing in this time, you can turn on debug logs in <code>chain/kusama/config.toml</code>:</p> <pre><code>[log]\nnetwork = \"debug\"\n</code></pre> <p>After it's finished bootstrapping, the node should begin to sync. </p>"},{"location":"usage/running-nodes/#run-polkadot-node","title":"Run Polkadot Node","text":"<p>Initialise polkadot node:</p> <pre><code>./bin/gossamer init --chain polkadot --base-path /tmp/gossamer\n</code></pre> <p>Start polkadot node:</p> <pre><code>./bin/gossamer --chain polkadot --base-path /tmp/gossamer\n</code></pre>"},{"location":"usage/running-nodes/#run-gossamer-node-with-docker","title":"Run Gossamer Node with Docker","text":"<p>Gossamer can also be installed on GNU/Linux, MacOS systems with Docker. </p>"},{"location":"usage/running-nodes/#dependencies","title":"Dependencies","text":"<ul> <li>Install the latest release of Docker</li> </ul> <p>Ensure you are running the most recent version of Docker by issuing the command: </p> <pre><code>docker -v\n</code></pre> <p>Pull the latest Gossamer images from DockerHub Registry: </p> <pre><code>docker pull chainsafe/gossamer:latest\n</code></pre> <p>The above command will install all required dependencies.  </p> <p>Next, we need override the default entrypoint so we can run the node as an authority node</p> <pre><code>docker run -it --entrypoint /bin/bash chainsafe/gossamer:latest\n</code></pre> <p>The built-in authorities are <code>alice</code>, <code>bob</code>, <code>charlie</code>, <code>dave</code>, <code>eve</code>, <code>ferdie</code>, <code>george</code>, and <code>ian</code>. To start the node as an authority, provide it with a built-in key:</p> <pre><code>./bin/gossamer --chain gssmr --key alice\n</code></pre>"}]}