package parachain

import (
	"fmt"
	"github.com/ChainSafe/gossamer/pkg/scale"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestDecodeValidationProtocolApprovalDistributionMessageAssignmentModulo(t *testing.T) {
	// expected encoding is generated by running rust test code:
	//fn try_validation_protocol_approval_distribution() {
	//	let hash = Hash::repeat_byte(0xAA);
	//
	//	let validator_index = ValidatorIndex(1);
	//	let cert = fake_assignment_cert(hash, validator_index);
	//	let assignments = vec![(cert.clone(), 4u32)];
	//
	//let validation = protocol_v1::ValidationProtocol::ApprovalDistribution(
	//protocol_v1::ApprovalDistributionMessage::Assignments(assignments));
	//
	//
	//println!("validation: {:#?}", validation);
	//let evalidation = validation.encode();
	//println!("encode: {:?}", evalidation);
	//
	//}

	encoding := []byte{4, 0, 4, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 1, 0, 0, 0, 0, 1, 0, 0, 0, 148, 135, 197, 216, 56, 91, 116, 252, 5, 96, 57, 78, 200, 18, 136, 6, 101, 213, 50, 43, 217, 235, 144, 141, 182, 36, 247, 18, 165, 215, 103, 72, 33, 160, 63, 243, 178, 111, 232, 6, 120, 21, 241, 39, 91, 44, 64, 138, 114, 138, 136, 243, 32, 149, 221, 26, 142, 99, 16, 61, 151, 126, 231, 5, 11, 102, 81, 251, 238, 171, 45, 249, 248, 251, 218, 167, 27, 252, 199, 145, 187, 62, 244, 95, 133, 27, 87, 243, 75, 217, 50, 247, 33, 192, 81, 1, 4, 0, 0, 0}

	validationProtocol := NewValidationProtocolVDT()

	err := scale.Unmarshal(encoding, &validationProtocol)
	require.NoError(t, err)

	validationProtocolDecoded, err := validationProtocol.Value()
	require.NoError(t, err)
	fmt.Printf("decoded %#v\n", validationProtocolDecoded)
}
