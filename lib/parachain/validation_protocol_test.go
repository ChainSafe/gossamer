package parachain

import (
	_ "embed"
	"fmt"
	"github.com/ChainSafe/gossamer/pkg/scale"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestDecodeValidationProtocolApprovalDistributionMessageAssignmentModulo(t *testing.T) {
	// expected encoding is generated by running rust test code:
	//fn try_validation_protocol_approval_distribution() {
	//	let hash = Hash::repeat_byte(0xAA);
	//
	//	let validator_index = ValidatorIndex(1);
	//	let cert = fake_assignment_cert(hash, validator_index);
	//	let assignments = vec![(cert.clone(), 4u32)];
	//
	//let validation = protocol_v1::ValidationProtocol::ApprovalDistribution(
	//protocol_v1::ApprovalDistributionMessage::Assignments(assignments));
	//
	//
	//println!("validation: {:#?}", validation);
	//let evalidation = validation.encode();
	//println!("encode: {:?}", evalidation);
	//
	//}

	encoding := []byte{4, 0, 4, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 1, 0, 0, 0, 0, 1, 0, 0, 0, 44, 167, 6, 140, 131, 1, 231, 22, 153, 186, 122, 7, 14, 112, 219, 244, 98, 210, 127, 175, 144, 24, 55, 108, 102, 83, 158, 188, 221, 16, 7, 0, 211, 83, 224, 12, 50, 200, 41, 248, 224, 232, 176, 186, 197, 85, 9, 95, 100, 225, 85, 136, 150, 12, 38, 251, 205, 193, 13, 231, 187, 195, 216, 8, 136, 27, 27, 94, 189, 104, 148, 68, 160, 35, 168, 205, 217, 57, 93, 66, 253, 196, 77, 152, 80, 29, 120, 13, 146, 42, 35, 232, 209, 190, 53, 8, 4, 0, 0, 0}

	validationProtocol := NewValidationProtocolVDT()

	err := scale.Unmarshal(encoding, &validationProtocol)
	require.NoError(t, err)

	validationProtocolDecoded, err := validationProtocol.Value()
	require.NoError(t, err)
	fmt.Printf("decoded %#v\n", validationProtocolDecoded)
}

func TestDecodeValidationProtocolStatementDistributionMessageLargeStatement(t *testing.T) {

	encoding := []byte{3, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 198, 124, 185, 59, 240, 163, 111, 206, 227, 210, 157, 232, 166, 166, 154, 117, 150, 89, 104, 10, 207, 72, 100, 117, 224, 162, 85, 42, 95, 190, 216, 126, 69, 173, 206, 95, 41, 6, 152, 216, 89, 96, 149, 114, 43, 51, 89, 146, 39, 247, 70, 31, 81, 175, 134, 23, 200, 190, 116, 184, 148, 207, 27, 134}

	validationProtocol := NewValidationProtocolVDT()

	err := scale.Unmarshal(encoding, &validationProtocol)
	require.NoError(t, err)

	validationProtocolDecoded, err := validationProtocol.Value()
	require.NoError(t, err)
	fmt.Printf("decoded %#v\n", validationProtocolDecoded)
}

func TestDecodeValidationProtocolBitfieldDistributionMessage(t *testing.T) {

	//encoding := []byte{0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 3, 0, 0, 0, 0, 204, 16, 186, 86, 148, 93, 197, 173, 242, 26, 102, 223, 164, 226, 92, 121, 4, 233, 233, 215, 58, 44, 160, 135, 31, 169, 229, 215, 224, 45, 144, 64, 65, 87, 222, 125, 226, 49, 59, 9, 145, 109, 178, 48, 132, 41, 174, 234, 12, 253, 69, 101, 5, 221, 241, 214, 125, 190, 64, 176, 23, 76, 48, 129}
	encoding := []byte{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 255, 255, 255, 255, 0, 0, 0, 0, 188, 242, 61, 236, 111, 110, 130, 111, 37, 165, 133, 249, 82, 21, 73, 109, 250, 181, 93, 143, 116, 179, 2, 189, 110, 66, 32, 93, 222, 133, 85, 64, 244, 171, 250, 163, 249, 185, 120, 59, 184, 36, 43, 138, 189, 152, 161, 242, 246, 240, 86, 253, 28, 68, 65, 248, 63, 207, 245, 89, 150, 213, 187, 129}

	validationProtocol := NewValidationProtocolVDT()

	err := scale.Unmarshal(encoding, &validationProtocol)
	require.NoError(t, err)

	validationProtocolDecoded, err := validationProtocol.Value()
	require.NoError(t, err)
	fmt.Printf("decoded %#v\n", validationProtocolDecoded)
}
