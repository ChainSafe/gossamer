// Code generated by MockGen. DO NOT EDIT.
// Source: node.go

// Package trie is a generated GoMock package.
package trie

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// Copy mocks base method.
func (m *MockNode) Copy() Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(Node)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockNodeMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockNode)(nil).Copy))
}

// Decode mocks base method.
func (m *MockNode) Decode(r io.Reader, h byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", r, h)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockNodeMockRecorder) Decode(r, h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockNode)(nil).Decode), r, h)
}

// EncodeAndHash mocks base method.
func (m *MockNode) EncodeAndHash() ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeAndHash")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EncodeAndHash indicates an expected call of EncodeAndHash.
func (mr *MockNodeMockRecorder) EncodeAndHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeAndHash", reflect.TypeOf((*MockNode)(nil).EncodeAndHash))
}

// GetGeneration mocks base method.
func (m *MockNode) GetGeneration() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeneration")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetGeneration indicates an expected call of GetGeneration.
func (mr *MockNodeMockRecorder) GetGeneration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeneration", reflect.TypeOf((*MockNode)(nil).GetGeneration))
}

// GetHash mocks base method.
func (m *MockNode) GetHash() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetHash indicates an expected call of GetHash.
func (mr *MockNodeMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockNode)(nil).GetHash))
}

// IsDirty mocks base method.
func (m *MockNode) IsDirty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDirty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDirty indicates an expected call of IsDirty.
func (mr *MockNodeMockRecorder) IsDirty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDirty", reflect.TypeOf((*MockNode)(nil).IsDirty))
}

// SetDirty mocks base method.
func (m *MockNode) SetDirty(dirty bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDirty", dirty)
}

// SetDirty indicates an expected call of SetDirty.
func (mr *MockNodeMockRecorder) SetDirty(dirty interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDirty", reflect.TypeOf((*MockNode)(nil).SetDirty), dirty)
}

// SetEncodingAndHash mocks base method.
func (m *MockNode) SetEncodingAndHash(arg0, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEncodingAndHash", arg0, arg1)
}

// SetEncodingAndHash indicates an expected call of SetEncodingAndHash.
func (mr *MockNodeMockRecorder) SetEncodingAndHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEncodingAndHash", reflect.TypeOf((*MockNode)(nil).SetEncodingAndHash), arg0, arg1)
}

// SetGeneration mocks base method.
func (m *MockNode) SetGeneration(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGeneration", arg0)
}

// SetGeneration indicates an expected call of SetGeneration.
func (mr *MockNodeMockRecorder) SetGeneration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGeneration", reflect.TypeOf((*MockNode)(nil).SetGeneration), arg0)
}

// SetKey mocks base method.
func (m *MockNode) SetKey(key []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetKey", key)
}

// SetKey indicates an expected call of SetKey.
func (mr *MockNodeMockRecorder) SetKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKey", reflect.TypeOf((*MockNode)(nil).SetKey), key)
}

// String mocks base method.
func (m *MockNode) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockNodeMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockNode)(nil).String))
}
