// Code generated by MockGen. DO NOT EDIT.
// Source: node.go

// Package trie is a generated GoMock package.
package trie

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mocknode is a mock of node interface.
type Mocknode struct {
	ctrl     *gomock.Controller
	recorder *MocknodeMockRecorder
}

// MocknodeMockRecorder is the mock recorder for Mocknode.
type MocknodeMockRecorder struct {
	mock *Mocknode
}

// NewMocknode creates a new mock instance.
func NewMocknode(ctrl *gomock.Controller) *Mocknode {
	mock := &Mocknode{ctrl: ctrl}
	mock.recorder = &MocknodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocknode) EXPECT() *MocknodeMockRecorder {
	return m.recorder
}

// String mocks base method.
func (m *Mocknode) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MocknodeMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*Mocknode)(nil).String))
}

// copy mocks base method.
func (m *Mocknode) copy() node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "copy")
	ret0, _ := ret[0].(node)
	return ret0
}

// copy indicates an expected call of copy.
func (mr *MocknodeMockRecorder) copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "copy", reflect.TypeOf((*Mocknode)(nil).copy))
}

// decode mocks base method.
func (m *Mocknode) decode(r io.Reader, h byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "decode", r, h)
	ret0, _ := ret[0].(error)
	return ret0
}

// decode indicates an expected call of decode.
func (mr *MocknodeMockRecorder) decode(r, h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "decode", reflect.TypeOf((*Mocknode)(nil).decode), r, h)
}

// encodeAndHash mocks base method.
func (m *Mocknode) encodeAndHash() ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "encodeAndHash")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// encodeAndHash indicates an expected call of encodeAndHash.
func (mr *MocknodeMockRecorder) encodeAndHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "encodeAndHash", reflect.TypeOf((*Mocknode)(nil).encodeAndHash))
}

// getGeneration mocks base method.
func (m *Mocknode) getGeneration() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getGeneration")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// getGeneration indicates an expected call of getGeneration.
func (mr *MocknodeMockRecorder) getGeneration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getGeneration", reflect.TypeOf((*Mocknode)(nil).getGeneration))
}

// getHash mocks base method.
func (m *Mocknode) getHash() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getHash")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// getHash indicates an expected call of getHash.
func (mr *MocknodeMockRecorder) getHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getHash", reflect.TypeOf((*Mocknode)(nil).getHash))
}

// isDirty mocks base method.
func (m *Mocknode) isDirty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isDirty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// isDirty indicates an expected call of isDirty.
func (mr *MocknodeMockRecorder) isDirty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isDirty", reflect.TypeOf((*Mocknode)(nil).isDirty))
}

// setDirty mocks base method.
func (m *Mocknode) setDirty(dirty bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setDirty", dirty)
}

// setDirty indicates an expected call of setDirty.
func (mr *MocknodeMockRecorder) setDirty(dirty interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setDirty", reflect.TypeOf((*Mocknode)(nil).setDirty), dirty)
}

// setEncodingAndHash mocks base method.
func (m *Mocknode) setEncodingAndHash(arg0, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setEncodingAndHash", arg0, arg1)
}

// setEncodingAndHash indicates an expected call of setEncodingAndHash.
func (mr *MocknodeMockRecorder) setEncodingAndHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setEncodingAndHash", reflect.TypeOf((*Mocknode)(nil).setEncodingAndHash), arg0, arg1)
}

// setGeneration mocks base method.
func (m *Mocknode) setGeneration(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setGeneration", arg0)
}

// setGeneration indicates an expected call of setGeneration.
func (mr *MocknodeMockRecorder) setGeneration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setGeneration", reflect.TypeOf((*Mocknode)(nil).setGeneration), arg0)
}

// setKey mocks base method.
func (m *Mocknode) setKey(key []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setKey", key)
}

// setKey indicates an expected call of setKey.
func (mr *MocknodeMockRecorder) setKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setKey", reflect.TypeOf((*Mocknode)(nil).setKey), key)
}
