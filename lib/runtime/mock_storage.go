// Code generated by mockery v2.8.0. DO NOT EDIT.

package runtime

import (
	common "github.com/ChainSafe/gossamer/lib/common"
	mock "github.com/stretchr/testify/mock"

	trie "github.com/ChainSafe/gossamer/lib/trie"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

// BeginStorageTransaction provides a mock function with given fields:
func (_m *MockStorage) BeginStorageTransaction() {
	_m.Called()
}

// ClearChildStorage provides a mock function with given fields: keyToChild, key
func (_m *MockStorage) ClearChildStorage(keyToChild []byte, key []byte) error {
	ret := _m.Called(keyToChild, key)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(keyToChild, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClearPrefix provides a mock function with given fields: prefix
func (_m *MockStorage) ClearPrefix(prefix []byte) error {
	ret := _m.Called(prefix)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(prefix)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClearPrefixInChild provides a mock function with given fields: keyToChild, prefix
func (_m *MockStorage) ClearPrefixInChild(keyToChild []byte, prefix []byte) error {
	ret := _m.Called(keyToChild, prefix)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(keyToChild, prefix)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommitStorageTransaction provides a mock function with given fields:
func (_m *MockStorage) CommitStorageTransaction() {
	_m.Called()
}

// Delete provides a mock function with given fields: key
func (_m *MockStorage) Delete(key []byte) {
	_m.Called(key)
}

// DeleteChild provides a mock function with given fields: keyToChild
func (_m *MockStorage) DeleteChild(keyToChild []byte) {
	_m.Called(keyToChild)
}

// Get provides a mock function with given fields: key
func (_m *MockStorage) Get(key []byte) []byte {
	ret := _m.Called(key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetChild provides a mock function with given fields: keyToChild
func (_m *MockStorage) GetChild(keyToChild []byte) (*trie.Trie, error) {
	ret := _m.Called(keyToChild)

	var r0 *trie.Trie
	if rf, ok := ret.Get(0).(func([]byte) *trie.Trie); ok {
		r0 = rf(keyToChild)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*trie.Trie)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(keyToChild)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChildNextKey provides a mock function with given fields: keyToChild, key
func (_m *MockStorage) GetChildNextKey(keyToChild []byte, key []byte) ([]byte, error) {
	ret := _m.Called(keyToChild, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, []byte) []byte); ok {
		r0 = rf(keyToChild, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(keyToChild, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChildStorage provides a mock function with given fields: keyToChild, key
func (_m *MockStorage) GetChildStorage(keyToChild []byte, key []byte) ([]byte, error) {
	ret := _m.Called(keyToChild, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, []byte) []byte); ok {
		r0 = rf(keyToChild, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(keyToChild, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NextKey provides a mock function with given fields: _a0
func (_m *MockStorage) NextKey(_a0 []byte) []byte {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// RollbackStorageTransaction provides a mock function with given fields:
func (_m *MockStorage) RollbackStorageTransaction() {
	_m.Called()
}

// Root provides a mock function with given fields:
func (_m *MockStorage) Root() (common.Hash, error) {
	ret := _m.Called()

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: key, value
func (_m *MockStorage) Set(key []byte, value []byte) {
	_m.Called(key, value)
}

// SetChild provides a mock function with given fields: keyToChild, child
func (_m *MockStorage) SetChild(keyToChild []byte, child *trie.Trie) error {
	ret := _m.Called(keyToChild, child)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, *trie.Trie) error); ok {
		r0 = rf(keyToChild, child)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetChildStorage provides a mock function with given fields: keyToChild, key, value
func (_m *MockStorage) SetChildStorage(keyToChild []byte, key []byte, value []byte) error {
	ret := _m.Called(keyToChild, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte, []byte) error); ok {
		r0 = rf(keyToChild, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
