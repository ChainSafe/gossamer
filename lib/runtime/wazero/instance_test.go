// Copyright 2021 ChainSafe Systems (ON)
// SPDX-License-Identifier: LGPL-3.0-only

package wazero_runtime

import (
	_ "embed"

	"bytes"
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"path/filepath"
	"testing"

	parachaintypes "github.com/ChainSafe/gossamer/dot/parachain/types"
	"gopkg.in/yaml.v3"

	"github.com/ChainSafe/gossamer/dot/types"
	"github.com/ChainSafe/gossamer/internal/log"
	"github.com/ChainSafe/gossamer/lib/common"
	"github.com/ChainSafe/gossamer/lib/crypto/ed25519"
	"github.com/ChainSafe/gossamer/lib/genesis"
	"github.com/ChainSafe/gossamer/lib/runtime"
	"github.com/ChainSafe/gossamer/lib/runtime/storage"
	"github.com/ChainSafe/gossamer/lib/runtime/wazero/testdata"
	"github.com/ChainSafe/gossamer/lib/trie"
	"github.com/ChainSafe/gossamer/lib/utils"
	"github.com/ChainSafe/gossamer/pkg/scale"
	"github.com/centrifuge/go-substrate-rpc-client/v4/signature"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

//go:embed testdata/parachain.yaml
var parachainTestDataRaw string

//go:embed testdata/parachains_configuration_v180.yaml
var parachainsConfigV180TestDataRaw string

type Storage struct {
	Name  string `yaml:"name"`
	Key   string `yaml:"key"`
	Value string `yaml:"value"`
}

type Data struct {
	Storage  []Storage         `yaml:"storage"`
	Expected map[string]string `yaml:"expected"`
	Lookups  map[string]any    `yaml:"-"`
}

var parachainTestData, parachainsConfigV180TestData Data

func init() {
	err := yaml.Unmarshal([]byte(parachainTestDataRaw), &parachainTestData)
	if err != nil {
		fmt.Println("Error unmarshalling test data:", err)
		return
	}
	parachainTestData.Lookups = make(map[string]any)

	for _, s := range parachainTestData.Storage {
		if s.Name != "" {
			parachainTestData.Lookups[s.Name] = common.MustHexToBytes(s.Value)
		}
	}

	err = yaml.Unmarshal([]byte(parachainsConfigV180TestDataRaw), &parachainsConfigV180TestData)
	if err != nil {
		fmt.Println("Error unmarshalling test data:", err)
		return
	}
	parachainsConfigV180TestData.Lookups = make(map[string]any)

	for _, s := range parachainsConfigV180TestData.Storage {
		if s.Name != "" {
			parachainsConfigV180TestData.Lookups[s.Name] = common.MustHexToBytes(s.Value)
		}
	}
}

func mustHexTo64BArray(t *testing.T, inputHex string) (outputArray [64]byte) {
	t.Helper()
	copy(outputArray[:], common.MustHexToBytes(inputHex))
	return outputArray
}

func genesisFromRawJSON(t *testing.T, jsonFilepath string) (gen genesis.Genesis) {
	t.Helper()

	fp, err := filepath.Abs(jsonFilepath)
	require.NoError(t, err)

	data, err := os.ReadFile(filepath.Clean(fp))
	require.NoError(t, err)

	err = json.Unmarshal(data, &gen)
	require.NoError(t, err)

	return gen
}

// this is generated by printing key ownership proof while running `test_generate_equivocation_report_blob`
// https://github.com/paritytech/substrate/blob/ded44948e2d5a398abcb4e342b0513cb690961bb/frame/grandpa/src/benchmarking.rs#L85
var testKeyOwnershipProof types.OpaqueKeyOwnershipProof = types.OpaqueKeyOwnershipProof([]byte{64, 138, 252, 29, 127, 102, 189, 129, 207, 47, 157, 60, 17, 138, 194, 121, 139, 92, 176, 175, 224, 16, 185, 93, 175, 251, 224, 81, 209, 61, 0, 71}) //nolint:lll

func Test_Instance_Version(t *testing.T) {
	type instanceVersioner interface {
		Version() (runtime.Version, error)
	}

	testCases := map[string]struct {
		instanceBuilder func(t *testing.T) instanceVersioner
		expectedVersion runtime.Version
	}{
		"kusama": {
			instanceBuilder: func(t *testing.T) instanceVersioner {
				genesisPath := utils.GetKusamaGenesisPath(t)
				kusamaGenesis := genesisFromRawJSON(t, genesisPath)
				genesisTrie, err := runtime.NewTrieFromGenesis(kusamaGenesis)
				require.NoError(t, err)

				cfg := Config{
					Storage: storage.NewTrieState(&genesisTrie),
					LogLvl:  log.Critical,
				}

				instance, err := NewRuntimeFromGenesis(cfg)
				require.NoError(t, err)
				return instance
			},
			expectedVersion: runtime.Version{
				SpecName:         []byte("kusama"),
				ImplName:         []byte("parity-kusama"),
				AuthoringVersion: 2,
				SpecVersion:      1020,
				ImplVersion:      0,
				APIItems: []runtime.APIItem{
					{Name: [8]uint8{0xdf, 0x6a, 0xcb, 0x68, 0x99, 0x7, 0x60, 0x9b}, Ver: 0x2},
					{Name: [8]uint8{0x37, 0xe3, 0x97, 0xfc, 0x7c, 0x91, 0xf5, 0xe4}, Ver: 0x1},
					{Name: [8]uint8{0x40, 0xfe, 0x3a, 0xd4, 0x1, 0xf8, 0x95, 0x9a}, Ver: 0x4},
					{Name: [8]uint8{0xd2, 0xbc, 0x98, 0x97, 0xee, 0xd0, 0x8f, 0x15}, Ver: 0x1},
					{Name: [8]uint8{0xf7, 0x8b, 0x27, 0x8b, 0xe5, 0x3f, 0x45, 0x4c}, Ver: 0x1},
					{Name: [8]uint8{0xaf, 0x2c, 0x2, 0x97, 0xa2, 0x3e, 0x6d, 0x3d}, Ver: 0x1},
					{Name: [8]uint8{0xed, 0x99, 0xc5, 0xac, 0xb2, 0x5e, 0xed, 0xf5}, Ver: 0x2},
					{Name: [8]uint8{0xcb, 0xca, 0x25, 0xe3, 0x9f, 0x14, 0x23, 0x87}, Ver: 0x1},
					{Name: [8]uint8{0x68, 0x7a, 0xd4, 0x4a, 0xd3, 0x7f, 0x3, 0xc2}, Ver: 0x1},
					{Name: [8]uint8{0xab, 0x3c, 0x5, 0x72, 0x29, 0x1f, 0xeb, 0x8b}, Ver: 0x1},
					{Name: [8]uint8{0xbc, 0x9d, 0x89, 0x90, 0x4f, 0x5b, 0x92, 0x3f}, Ver: 0x1},
					{Name: [8]uint8{0x37, 0xc8, 0xbb, 0x13, 0x50, 0xa9, 0xa2, 0xa8}, Ver: 0x1},
				},
			},
		},
		"polkadot_v0929": {
			instanceBuilder: func(t *testing.T) instanceVersioner {
				return NewTestInstance(t, runtime.POLKADOT_RUNTIME_v0929)
			},
			expectedVersion: runtime.Version{
				SpecName:         []byte("polkadot"),
				ImplName:         []byte("parity-polkadot"),
				AuthoringVersion: 0,
				SpecVersion:      9290,
				ImplVersion:      0,
				APIItems: []runtime.APIItem{
					{Name: [8]uint8{0xdf, 0x6a, 0xcb, 0x68, 0x99, 0x7, 0x60, 0x9b}, Ver: 0x4},
					{Name: [8]uint8{0x37, 0xe3, 0x97, 0xfc, 0x7c, 0x91, 0xf5, 0xe4}, Ver: 0x1},
					{Name: [8]uint8{0x40, 0xfe, 0x3a, 0xd4, 0x1, 0xf8, 0x95, 0x9a}, Ver: 0x6},
					{Name: [8]uint8{0x17, 0xa6, 0xbc, 0xd, 0x0, 0x62, 0xae, 0xb3}, Ver: 0x1},
					{Name: [8]uint8{0xd2, 0xbc, 0x98, 0x97, 0xee, 0xd0, 0x8f, 0x15}, Ver: 0x3},
					{Name: [8]uint8{0xf7, 0x8b, 0x27, 0x8b, 0xe5, 0x3f, 0x45, 0x4c}, Ver: 0x2},
					{Name: [8]uint8{0xaf, 0x2c, 0x2, 0x97, 0xa2, 0x3e, 0x6d, 0x3d}, Ver: 0x2},
					{Name: [8]uint8{0x49, 0xea, 0xaf, 0x1b, 0x54, 0x8a, 0xc, 0xb0}, Ver: 0x1},
					{Name: [8]uint8{0x91, 0xd5, 0xdf, 0x18, 0xb0, 0xd2, 0xcf, 0x58}, Ver: 0x1},
					{Name: [8]uint8{0xed, 0x99, 0xc5, 0xac, 0xb2, 0x5e, 0xed, 0xf5}, Ver: 0x3},
					{Name: [8]uint8{0xcb, 0xca, 0x25, 0xe3, 0x9f, 0x14, 0x23, 0x87}, Ver: 0x2},
					{Name: [8]uint8{0x68, 0x7a, 0xd4, 0x4a, 0xd3, 0x7f, 0x3, 0xc2}, Ver: 0x1},
					{Name: [8]uint8{0xab, 0x3c, 0x5, 0x72, 0x29, 0x1f, 0xeb, 0x8b}, Ver: 0x1},
					{Name: [8]uint8{0xbc, 0x9d, 0x89, 0x90, 0x4f, 0x5b, 0x92, 0x3f}, Ver: 0x1},
					{Name: [8]uint8{0x37, 0xc8, 0xbb, 0x13, 0x50, 0xa9, 0xa2, 0xa8}, Ver: 0x1},
					{Name: [8]uint8{0xf3, 0xff, 0x14, 0xd5, 0xab, 0x52, 0x70, 0x59}, Ver: 0x1},
				},
				TransactionVersion: 14,
			},
		},
		"westend_v0929": {
			instanceBuilder: func(t *testing.T) instanceVersioner {
				return NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
			},
			expectedVersion: runtime.Version{
				SpecName:         []byte("westend"),
				ImplName:         []byte("parity-westend"),
				AuthoringVersion: 2,
				SpecVersion:      9290,
				ImplVersion:      0,
				APIItems: []runtime.APIItem{
					{Name: [8]uint8{0xdf, 0x6a, 0xcb, 0x68, 0x99, 0x7, 0x60, 0x9b}, Ver: 0x4},
					{Name: [8]uint8{0x37, 0xe3, 0x97, 0xfc, 0x7c, 0x91, 0xf5, 0xe4}, Ver: 0x1},
					{Name: [8]uint8{0x40, 0xfe, 0x3a, 0xd4, 0x1, 0xf8, 0x95, 0x9a}, Ver: 0x6},
					{Name: [8]uint8{0xd2, 0xbc, 0x98, 0x97, 0xee, 0xd0, 0x8f, 0x15}, Ver: 0x3},
					{Name: [8]uint8{0xf7, 0x8b, 0x27, 0x8b, 0xe5, 0x3f, 0x45, 0x4c}, Ver: 0x2},
					{Name: [8]uint8{0xaf, 0x2c, 0x2, 0x97, 0xa2, 0x3e, 0x6d, 0x3d}, Ver: 0x2},
					{Name: [8]uint8{0x49, 0xea, 0xaf, 0x1b, 0x54, 0x8a, 0xc, 0xb0}, Ver: 0x1},
					{Name: [8]uint8{0x91, 0xd5, 0xdf, 0x18, 0xb0, 0xd2, 0xcf, 0x58}, Ver: 0x1},
					{Name: [8]uint8{0xed, 0x99, 0xc5, 0xac, 0xb2, 0x5e, 0xed, 0xf5}, Ver: 0x3},
					{Name: [8]uint8{0xcb, 0xca, 0x25, 0xe3, 0x9f, 0x14, 0x23, 0x87}, Ver: 0x2},
					{Name: [8]uint8{0x68, 0x7a, 0xd4, 0x4a, 0xd3, 0x7f, 0x3, 0xc2}, Ver: 0x1},
					{Name: [8]uint8{0xab, 0x3c, 0x5, 0x72, 0x29, 0x1f, 0xeb, 0x8b}, Ver: 0x1},
					{Name: [8]uint8{0xbc, 0x9d, 0x89, 0x90, 0x4f, 0x5b, 0x92, 0x3f}, Ver: 0x1},
					{Name: [8]uint8{0x37, 0xc8, 0xbb, 0x13, 0x50, 0xa9, 0xa2, 0xa8}, Ver: 0x1},
					{Name: [8]uint8{0xf3, 0xff, 0x14, 0xd5, 0xab, 0x52, 0x70, 0x59}, Ver: 0x1},
					{Name: [8]uint8{0x17, 0xa6, 0xbc, 0xd, 0x0, 0x62, 0xae, 0xb3}, Ver: 0x1},
				},
				TransactionVersion: 12,
			},
		},
	}

	for name, testCase := range testCases {
		testCase := testCase
		t.Run(name, func(t *testing.T) {
			instance := testCase.instanceBuilder(t)
			version, err := instance.Version()
			require.NoError(t, err)
			assert.Equal(t, testCase.expectedVersion, version)
		})
	}
}

func balanceKey(t *testing.T, pub []byte) []byte {
	h0, err := common.Twox128Hash([]byte("System"))
	require.NoError(t, err)
	h1, err := common.Twox128Hash([]byte("Account"))
	require.NoError(t, err)
	h2, err := common.Blake2b128(pub)
	require.NoError(t, err)
	return append(append(append(h0, h1...), h2...), pub...)
}

func TestWestendRuntime_ValidateTransaction(t *testing.T) {
	genesisPath := utils.GetWestendDevRawGenesisPath(t)
	gen := genesisFromRawJSON(t, genesisPath)
	genTrie, err := runtime.NewTrieFromGenesis(gen)
	require.NoError(t, err)

	// set state to genesis state
	genState := storage.NewTrieState(&genTrie)

	cfg := Config{
		Storage: genState,
		LogLvl:  log.Critical,
	}

	nodeStorage := runtime.NodeStorage{}
	nodeStorage.BaseDB = runtime.NewInMemoryDB(t)
	cfg.NodeStorage = nodeStorage

	rt, err := NewRuntimeFromGenesis(cfg)
	require.NoError(t, err)

	alicePub := common.MustHexToBytes("0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d")
	aliceBalanceKey := balanceKey(t, alicePub)

	accInfo := types.AccountInfo{
		Nonce: 0,
		Data: types.AccountData{
			Free:       scale.MustNewUint128(big.NewInt(1152921504606846976)),
			Reserved:   scale.MustNewUint128(big.NewInt(0)),
			MiscFrozen: scale.MustNewUint128(big.NewInt(0)),
			FreeFrozen: scale.MustNewUint128(big.NewInt(0)),
		},
	}

	encBal, err := scale.Marshal(accInfo)
	require.NoError(t, err)

	rt.Context.Storage.Put(aliceBalanceKey, encBal)
	// this key is System.UpgradedToDualRefCount -> set to true since all accounts have been upgraded to v0.9 format
	rt.Context.Storage.Put(common.UpgradedToDualRefKey, []byte{1})

	genesisHeader := &types.Header{
		Number:    0,
		StateRoot: trie.V0.MustHash(genTrie), // Get right state version from runtime
	}

	extHex := runtime.NewTestExtrinsic(t, rt, genesisHeader.Hash(), genesisHeader.Hash(),
		0, signature.TestKeyringPairAlice, "System.remark", []byte{0xab, 0xcd})

	genesisHashBytes := genesisHeader.Hash().ToBytes()

	validateTransactionArguments := [][]byte{
		{byte(types.TxnExternal)},
		common.MustHexToBytes(extHex),
		genesisHashBytes}

	extrinsicsBytes := bytes.Join(validateTransactionArguments, nil)

	runtime.InitializeRuntimeToTest(t, rt, genesisHeader)
	_, err = rt.ValidateTransaction(extrinsicsBytes)
	require.NoError(t, err)
}

func TestInstance_GrandpaAuthorities_NodeRuntime(t *testing.T) {
	tt := trie.NewEmptyTrie()

	value, err := common.HexToBytes("0x0108eea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d714103640100000000000000b64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d7170100000000000000") //nolint:lll
	require.NoError(t, err)

	key := common.MustHexToBytes(genesis.GrandpaAuthoritiesKeyHex)
	tt.Put(key, value)

	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v0929, tt)

	auths, err := rt.GrandpaAuthorities()
	require.NoError(t, err)

	authABytes, _ := common.HexToBytes("0xeea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d71410364")
	authBBytes, _ := common.HexToBytes("0xb64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d717")

	authA, _ := ed25519.NewPublicKey(authABytes)
	authB, _ := ed25519.NewPublicKey(authBBytes)

	expected := []types.Authority{
		{Key: authA, Weight: 1},
		{Key: authB, Weight: 1},
	}

	require.Equal(t, expected, auths)
}

func TestInstance_GrandpaAuthorities_PolkadotRuntime(t *testing.T) {
	tt := trie.NewEmptyTrie()

	value, err := common.HexToBytes("0x0108eea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d714103640100000000000000b64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d7170100000000000000") //nolint:lll
	require.NoError(t, err)

	key := common.MustHexToBytes(genesis.GrandpaAuthoritiesKeyHex)
	tt.Put(key, value)

	rt := NewTestInstanceWithTrie(t, runtime.POLKADOT_RUNTIME_v0929, tt)

	auths, err := rt.GrandpaAuthorities()
	require.NoError(t, err)

	authABytes, _ := common.HexToBytes("0xeea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d71410364")
	authBBytes, _ := common.HexToBytes("0xb64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d717")

	authA, _ := ed25519.NewPublicKey(authABytes)
	authB, _ := ed25519.NewPublicKey(authBBytes)

	expected := []types.Authority{
		{Key: authA, Weight: 1},
		{Key: authB, Weight: 1},
	}

	require.Equal(t, expected, auths)
}

func TestInstance_BabeGenerateKeyOwnershipProof(t *testing.T) {
	testCases := []struct {
		name          string
		targetRuntime string
	}{
		{
			name:          "with_polkadot_runtime",
			targetRuntime: runtime.POLKADOT_RUNTIME_v0929,
		},
		{
			name:          "with_westend_runtime",
			targetRuntime: runtime.WESTEND_RUNTIME_v0929,
		},
	}
	for _, testCase := range testCases {
		testCase := testCase
		t.Run(testCase.name, func(t *testing.T) {
			tt := trie.NewEmptyTrie()

			randomnessValue, err := common.HexToHash("0x01")
			require.NoError(t, err)
			key := common.MustHexToBytes(genesis.BABERandomnessKeyHex)
			tt.Put(key, randomnessValue[:])

			authorityValue, err := common.HexToBytes("0x08eea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d714103640100000000000000b64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d7170100000000000000") //nolint:lll
			require.NoError(t, err)

			key = common.MustHexToBytes(genesis.BABEAuthoritiesKeyHex)
			tt.Put(key, authorityValue)

			rt := NewTestInstanceWithTrie(t, testCase.targetRuntime, tt)

			babeConfig, err := rt.BabeConfiguration()
			require.NoError(t, err)

			require.NotEmpty(t, babeConfig.GenesisAuthorities)

			authorityID := babeConfig.GenesisAuthorities[0].Key

			const slot = uint64(10)
			res, err := rt.BabeGenerateKeyOwnershipProof(slot, authorityID)
			require.NoError(t, err)
			require.Nil(t, res)
		})
	}
}

func TestInstance_BabeSubmitReportEquivocationUnsignedExtrinsic(t *testing.T) {
	testCases := []struct {
		name          string
		targetRuntime string
	}{
		{
			name:          "with_polkadot_runtime",
			targetRuntime: runtime.POLKADOT_RUNTIME_v0929,
		},
		{
			name:          "with_westend_runtime",
			targetRuntime: runtime.WESTEND_RUNTIME_v0929,
		},
	}
	for _, testCase := range testCases {
		testCase := testCase
		t.Run(testCase.name, func(t *testing.T) {
			tt := trie.NewEmptyTrie()
			rt := NewTestInstanceWithTrie(t, testCase.targetRuntime, tt)
			authorityID := types.AuthorityID{1}
			const slot = uint64(1)

			keyOwnershipProof := testKeyOwnershipProof

			equivocationProof := types.BabeEquivocationProof{
				Offender: authorityID,
				Slot:     slot,
			}

			err := rt.BabeSubmitReportEquivocationUnsignedExtrinsic(equivocationProof, keyOwnershipProof)
			require.NoError(t, err)
		})
	}
}

func TestInstance_BabeConfiguration_WestendRuntime_NoAuthorities(t *testing.T) {
	rt := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	cfg, err := rt.BabeConfiguration()
	require.NoError(t, err)

	expected := &types.BabeConfiguration{
		SlotDuration:       6000,
		EpochLength:        600,
		C1:                 1,
		C2:                 4,
		GenesisAuthorities: nil,
		Randomness:         [32]byte{},
		SecondarySlots:     2,
	}
	require.Equal(t, expected, cfg)
}

func TestInstance_BadSignature_WestendBlock8077850(t *testing.T) {
	tests := map[string]struct {
		setupRuntime  func(t *testing.T) (*Instance, *types.Header)
		expectedError []byte
	}{
		"westend_dev_runtime_should_fail_with_bad_signature": {
			expectedError: []byte{1, 0, 0xa},
			setupRuntime: func(t *testing.T) (*Instance, *types.Header) {
				genesisPath := utils.GetWestendDevRawGenesisPath(t)
				gen := genesisFromRawJSON(t, genesisPath)
				genTrie, err := runtime.NewTrieFromGenesis(gen)
				require.NoError(t, err)

				// set state to genesis state
				genState := storage.NewTrieState(&genTrie)

				cfg := Config{
					Storage: genState,
					LogLvl:  log.Critical,
				}

				rt, err := NewRuntimeFromGenesis(cfg)
				require.NoError(t, err)

				// reset state back to parent state before executing
				parentState := storage.NewTrieState(&genTrie)
				rt.SetContextStorage(parentState)

				genesisHeader := &types.Header{
					Number:    0,
					StateRoot: trie.V0.MustHash(genTrie), // Use right version from runtime
				}

				header := &types.Header{
					ParentHash: genesisHeader.Hash(),
					Number:     1,
					Digest:     types.NewDigest(),
				}

				return rt, header
			},
		},
		"westend_0912_runtime_should_fail_with_invalid_payment": {
			expectedError: []byte{1, 0, 1},
			setupRuntime: func(t *testing.T) (*Instance, *types.Header) {
				genesisPath := utils.GetWestendDevRawGenesisPath(t)
				gen := genesisFromRawJSON(t, genesisPath)
				genTrie, err := runtime.NewTrieFromGenesis(gen)
				require.NoError(t, err)

				rt := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0912)
				parentState := storage.NewTrieState(&genTrie)
				rt.SetContextStorage(parentState)

				genesisHeader := &types.Header{
					Number:    0,
					StateRoot: trie.V0.MustHash(genTrie), // Use right version from runtime
				}

				header := &types.Header{
					ParentHash: genesisHeader.Hash(),
					Number:     1,
					Digest:     types.NewDigest(),
				}

				return rt, header
			},
		},
	}

	for tname, tt := range tests {
		tt := tt

		t.Run(tname, func(t *testing.T) {
			instance, header := tt.setupRuntime(t)

			err := instance.InitializeBlock(header)
			require.NoError(t, err)

			idata := types.NewInherentData()
			err = idata.SetInherent(types.Timstap0, uint64(5))
			require.NoError(t, err)

			err = idata.SetInherent(types.Babeslot, uint64(1))
			require.NoError(t, err)

			ienc, err := idata.Encode()
			require.NoError(t, err)

			// Call BlockBuilder_inherent_extrinsics which returns the inherents as encoded extrinsics
			inherentExts, err := instance.InherentExtrinsics(ienc)
			require.NoError(t, err)

			// decode inherent extrinsics
			cp := make([]byte, len(inherentExts))
			copy(cp, inherentExts)
			var inExts [][]byte
			err = scale.Unmarshal(cp, &inExts)
			require.NoError(t, err)

			// apply each inherent extrinsic
			for _, inherent := range inExts {
				in, err := scale.Marshal(inherent)
				require.NoError(t, err)

				ret, err := instance.ApplyExtrinsic(in)
				require.NoError(t, err)
				require.Equal(t, ret, []byte{0, 0})
			}

			keyring, err := signature.KeyringPairFromSecret(
				"0x00000000000000000000000000000000000000000000000000000"+
					"00000000000000000000000000000000000000000000000000000"+
					"0000000000000000000000", 42)
			require.NoError(t, err)

			extHex := runtime.NewTestExtrinsic(t, instance, header.ParentHash, header.ParentHash,
				0, keyring, "System.remark", []byte{0xab, 0xcd})

			res, err := instance.ApplyExtrinsic(common.MustHexToBytes(extHex))
			require.NoError(t, err)

			// should fail with transaction validity error: invalid payment for runtime 0.9.12
			// should fail with transaction validity error: bad signature for runtime version greater than 0.9.12
			require.Equal(t, tt.expectedError, res)
		})
	}

}

func TestInstance_BabeConfiguration_WestendRuntime_WithAuthorities(t *testing.T) {
	tt := trie.NewEmptyTrie()

	randomnessValue, err := common.HexToHash("0x01")
	require.NoError(t, err)
	key := common.MustHexToBytes(genesis.BABERandomnessKeyHex)
	tt.Put(key, randomnessValue[:])

	authorityValue, err := common.HexToBytes("0x08eea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d714103640100000000000000b64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d7170100000000000000") //nolint:lll
	require.NoError(t, err)

	key = common.MustHexToBytes(genesis.BABEAuthoritiesKeyHex)
	tt.Put(key, authorityValue)

	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v0929, tt)

	cfg, err := rt.BabeConfiguration()
	require.NoError(t, err)

	authA, _ := common.HexToHash("0xeea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d71410364")
	authB, _ := common.HexToHash("0xb64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d717")

	expectedAuthData := []types.AuthorityRaw{
		{Key: authA, Weight: 1},
		{Key: authB, Weight: 1},
	}

	expected := &types.BabeConfiguration{
		SlotDuration:       6000,
		EpochLength:        600,
		C1:                 1,
		C2:                 4,
		GenesisAuthorities: expectedAuthData,
		Randomness:         [32]byte{1},
		SecondarySlots:     2,
	}

	require.Equal(t, expected, cfg)
}

func TestInstance_InitializeBlock_NodeRuntime(t *testing.T) {
	rt := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)

	header := &types.Header{
		Number: 1,
		Digest: types.NewDigest(),
	}

	err := rt.InitializeBlock(header)
	require.NoError(t, err)
}

func TestInstance_InitializeBlock_PolkadotRuntime(t *testing.T) {
	rt := NewTestInstance(t, runtime.POLKADOT_RUNTIME_v0929)

	header := &types.Header{
		Number: 1,
		Digest: types.NewDigest(),
	}

	err := rt.InitializeBlock(header)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_WestendRuntime(t *testing.T) {
	instance := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	block := runtime.InitializeRuntimeToTest(t, instance, &types.Header{})

	// reset state back to parent state before executing
	parentState := storage.NewTrieState(trie.NewEmptyTrie())
	instance.SetContextStorage(parentState)

	_, err := instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ApplyExtrinsic_WestendRuntime(t *testing.T) {
	genesisPath := utils.GetWestendDevRawGenesisPath(t)
	gen := genesisFromRawJSON(t, genesisPath)
	genTrie, err := runtime.NewTrieFromGenesis(gen)
	require.NoError(t, err)

	// set state to genesis state
	genState := storage.NewTrieState(&genTrie)

	cfg := Config{
		Storage: genState,
		LogLvl:  log.Critical,
	}

	instance, err := NewRuntimeFromGenesis(cfg)
	require.NoError(t, err)

	// reset state back to parent state before executing
	parentState := storage.NewTrieState(&genTrie)
	instance.SetContextStorage(parentState)

	genesisHeader := &types.Header{
		Number:    0,
		StateRoot: trie.V0.MustHash(genTrie), // Use right version from runtime
	}
	header := &types.Header{
		ParentHash: genesisHeader.Hash(),
		Number:     1,
		Digest:     types.NewDigest(),
	}

	err = instance.InitializeBlock(header)
	require.NoError(t, err)

	extHex := runtime.NewTestExtrinsic(t, instance, genesisHeader.Hash(), genesisHeader.Hash(),
		0, signature.TestKeyringPairAlice, "System.remark", []byte{0xab, 0xcd})

	res, err := instance.ApplyExtrinsic(common.MustHexToBytes(extHex))
	require.NoError(t, err)
	require.Equal(t, []byte{0, 0}, res)
}

func TestInstance_ExecuteBlock_PolkadotRuntime(t *testing.T) {
	DefaultTestLogLvl = 0

	instance := NewTestInstance(t, runtime.POLKADOT_RUNTIME_v0929)

	block := runtime.InitializeRuntimeToTest(t, instance, &types.Header{})

	// reset state back to parent state before executing
	parentState := storage.NewTrieState(trie.NewEmptyTrie())
	instance.SetContextStorage(parentState)

	_, err := instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_PolkadotRuntime_PolkadotBlock1(t *testing.T) {
	genesisPath := utils.GetPolkadotGenesisPath(t)
	gen := genesisFromRawJSON(t, genesisPath)
	genTrie, err := runtime.NewTrieFromGenesis(gen)
	require.NoError(t, err)

	expectedGenesisRoot := common.MustHexToHash("0x29d0d972cd27cbc511e9589fcb7a4506d5eb6a9e8df205f00472e5ab354a4e17")
	require.Equal(t, expectedGenesisRoot, trie.V0.MustHash(genTrie))

	// set state to genesis state
	genState := storage.NewTrieState(&genTrie)

	cfg := Config{
		Storage: genState,
		LogLvl:  log.Critical,
	}

	instance, err := NewRuntimeFromGenesis(cfg)
	require.NoError(t, err)

	// block data is received from querying a polkadot node
	body := []byte{8, 40, 4, 3, 0, 11, 80, 149, 160, 81, 114, 1, 16, 4, 20, 0, 0}
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 2, len(exts))

	// digest data received from querying polkadot node
	digestBytes := common.MustHexToBytes("0x0c0642414245b501010000000093decc0f00000000362ed8d6055645487fe42e9c8640be651f70a3a2a03658046b2b43f021665704501af9b1ca6e974c257e3d26609b5f68b5b0a1da53f7f252bbe5d94948c39705c98ffa4b869dd44ac29528e3723d619cc7edf1d3f7b7a57a957f6a7e9bdb270a044241424549040118fa3437b10f6e7af8f31362df3a179b991a8c56313d1bcd6307a4d0c734c1ae310100000000000000d2419bc8835493ac89eb09d5985281f5dff4bc6c7a7ea988fd23af05f301580a0100000000000000ccb6bef60defc30724545d57440394ed1c71ea7ee6d880ed0e79871a05b5e40601000000000000005e67b64cf07d4d258a47df63835121423551712844f5b67de68e36bb9a21e12701000000000000006236877b05370265640c133fec07e64d7ca823db1dc56f2d3584b3d7c0f1615801000000000000006c52d02d95c30aa567fda284acf25025ca7470f0b0c516ddf94475a1807c4d250100000000000000000000000000000000000000000000000000000000000000000000000000000005424142450101d468680c844b19194d4dfbdc6697a35bf2b494bda2c5a6961d4d4eacfbf74574379ba0d97b5bb650c2e8670a63791a727943bcb699dc7a228bdb9e0a98c9d089") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)

	// polkadot block 1, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"),
			Number:         1,
			StateRoot:      common.MustHexToHash("0xc56fcd6e7a757926ace3e1ecff9b4010fc78b90d459202a339266a7f6360002f"),
			ExtrinsicsRoot: common.MustHexToHash("0x9a87f6af64ef97aff2d31bebfdd59f8fe2ef6019278b634b2515a38f1c4c2420"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock1(t *testing.T) {
	genesisPath := utils.GetKusamaGenesisPath(t)
	gen := genesisFromRawJSON(t, genesisPath)
	genTrie, err := runtime.NewTrieFromGenesis(gen)
	require.NoError(t, err)

	expectedGenesisRoot := common.MustHexToHash("0xb0006203c3a6e6bd2c6a17b1d4ae8ca49a31da0f4579da950b127774b44aef6b")
	require.Equal(t, expectedGenesisRoot, trie.V0.MustHash(genTrie))

	// set state to genesis state
	genState := storage.NewTrieState(&genTrie)

	cfg := Config{
		Storage: genState,
		LogLvl:  log.Critical,
	}

	instance, err := NewRuntimeFromGenesis(cfg)
	require.NoError(t, err)

	// block data is received from querying a polkadot node
	body := []byte{8, 40, 4, 2, 0, 11, 144, 17, 14, 179, 110, 1, 16, 4, 20, 0, 0}
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 2, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x0c0642414245340201000000ef55a50f00000000044241424549040118ca239392960473fe1bc65f94ee27d890a49c1b200c006ff5dcc525330ecc16770100000000000000b46f01874ce7abbb5220e8fd89bede0adad14c73039d91e28e881823433e723f0100000000000000d684d9176d6eb69887540c9a89fa6097adea82fc4b0ff26d1062b488f352e179010000000000000068195a71bdde49117a616424bdc60a1733e96acb1da5aeab5d268cf2a572e94101000000000000001a0575ef4ae24bdfd31f4cb5bd61239ae67c12d4e64ae51ac756044aa6ad8200010000000000000018168f2aad0081a25728961ee00627cfe35e39833c805016632bf7c14da5800901000000000000000000000000000000000000000000000000000000000000000000000000000000054241424501014625284883e564bc1e4063f5ea2b49846cdddaa3761d04f543b698c1c3ee935c40d25b869247c36c6b8a8cbbd7bb2768f560ab7c276df3c62df357a7e3b1ec8d") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)

	// kusama block 1, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe"),
			Number:         1,
			StateRoot:      common.MustHexToHash("0xfabb0c6e92d29e8bb2167f3c6fb0ddeb956a4278a3cf853661af74a076fc9cb7"),
			ExtrinsicsRoot: common.MustHexToHash("0xa35fb7f7616f5c979d48222b3d2fa7cb2331ef73954726714d91ca945cc34fd8"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock3784(t *testing.T) {
	gossTrie3783 := newTrieFromPairs(t, "../test_data/kusama/block3783.out")
	expectedRoot := common.MustHexToHash("0x948338bc0976aee78879d559a1f42385407e5a481b05a91d2a9386aa7507e7a0")
	require.Equal(t, expectedRoot, trie.V0.MustHash(*gossTrie3783))

	// set state to genesis state
	state3783 := storage.NewTrieState(gossTrie3783)

	cfg := Config{
		Storage: state3783,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(gossTrie3783, cfg)
	require.NoError(t, err)

	// block data is received from querying a polkadot node
	body := common.MustHexToBytes("0x10280402000bb00d69b46e0114040900193b10041400009101041300eaaec5728cd6ea9160ff92a49bb45972c532d2163241746134726aaa5b2f72129d8650715320f23765c6306503669f69bf684b188dea73b1e247dd1dd166513b1c13daa387c35f24ac918d2fa772b73cffd20204a8875e48a1b11bb3229deb7f00") //nolint:lll
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 4, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x080642414245340203000000bd64a50f0000000005424142450101bc0d6850dba8d32ea1dbe26cb4ac56da6cca662c7cc642dc8eed32d2bddd65029f0721436eafeebdf9b4f17d1673c6bc6c3c51fe3dda3121a5fc60c657a5808b") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)

	// kusama block 3784, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x4843b4aa38cf2e3e2f6fae401b98dd705bed668a82dd3751dc38f1601c814ca8"),
			Number:         3784,
			StateRoot:      common.MustHexToHash("0xac44cc18ec22f0f3fca39dfe8725c0383af1c982a833e081fbb2540e46eb09a5"),
			ExtrinsicsRoot: common.MustHexToHash("0x52b7d4852fc648cb8f908901e1e36269593c25050c31718454bca74b69115d12"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock901442(t *testing.T) {
	ksmTrie901441 := newTrieFromPairs(t, "../test_data/kusama/block901441.out")
	expectedRoot := common.MustHexToHash("0x3a2ef7ee032f5810160bb8f3ffe3e3377bb6f2769ee9f79a5425973347acd504")
	require.Equal(t, expectedRoot, trie.V0.MustHash(*ksmTrie901441))

	// set state to genesis state
	state901441 := storage.NewTrieState(ksmTrie901441)

	cfg := Config{
		Storage: state901441,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(ksmTrie901441, cfg)
	require.NoError(t, err)

	body := common.MustHexToBytes("0x0c280402000b207eb80a70011c040900fa0437001004140000")
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 3, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x080642414245340244000000aeffb30f00000000054241424501011cbef2a084a774c34d9990c7bfc6b4d2d5e9f5b59feca792cd2bb89a890c2a6f09668b5e8224879f007f49f299d25fbb3c0f30d94fb8055e07fa8a4ed10f8083") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)
	require.Equal(t, 2, len(digest.Types))

	// kusama block 901442, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x68d9c5f75225f09d7ce493eff8aabac7bae8b65cb81a2fd532a99fbb8c663931"),
			Number:         901442,
			StateRoot:      common.MustHexToHash("0x6ea065f850894c5b58cb1a73ec887e56842851943641149c57cea357cae4f596"),
			ExtrinsicsRoot: common.MustHexToHash("0x13483a4c148fff5f072e86b5af52bf031556514e9c87ea19f9e31e7b13c0c414"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock1377831(t *testing.T) {
	ksmTrie := newTrieFromPairs(t, "../test_data/kusama/block1377830.out")
	expectedRoot := common.MustHexToHash("0xe4de6fecda9e9e35f937d159665cf984bc1a68048b6c78912de0aeb6bd7f7e99")
	require.Equal(t, expectedRoot, trie.V0.MustHash(*ksmTrie))

	// set state to genesis state
	state := storage.NewTrieState(ksmTrie)

	cfg := Config{
		Storage: state,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(ksmTrie, cfg)
	require.NoError(t, err)

	body := common.MustHexToBytes("0x08280402000b60c241c070011004140000")
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 2, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x080642414245b50101020000008abebb0f00000000045553c32a949242580161bcc35d7c3e492e66defdcf4525d7a338039590012f42660acabf1952a2d5d01725601705404d6ac671507a6aa2cf09840afbdfbb006f48062dae16c56b8dc5c6ea6ffba854b7e8f46e153e98c238cbe7bbb1556f0b0542414245010136914c6832dd5ba811a975a3b654d76a1ec81684f4b03d115ce2e694feadc96411930438fde4beb008c5f8e26cfa2f5b554fa3814b5b73d31f348446fd4fd688") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)
	require.Equal(t, 2, len(digest.Types))

	// kusama block 1377831, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0xca387b3cc045e8848277069d8794cbf077b08218c0b55f74d81dd750b14e768c"),
			Number:         1377831,
			StateRoot:      common.MustHexToHash("0x7e5569e652c4b1a3cecfcf5e5e64a97fe55071d34bab51e25626ec20cae05a02"),
			ExtrinsicsRoot: common.MustHexToHash("0x7f3ea0ed63b4053d9b75e7ee3e5b3f6ce916e8f59b7b6c5e966b7a56ea0a563a"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock1482003(t *testing.T) {
	ksmTrie := newTrieFromPairs(t, "../test_data/kusama/block1482002.out")
	expectedRoot := common.MustHexToHash("0x09f9ca28df0560c2291aa16b56e15e07d1e1927088f51356d522722aa90ca7cb")
	require.Equal(t, expectedRoot, trie.V0.MustHash(*ksmTrie))

	// set state to genesis state
	state := storage.NewTrieState(ksmTrie)

	cfg := Config{
		Storage: state,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(ksmTrie, cfg)
	require.NoError(t, err)

	body := common.MustHexToBytes("0x0c280402000b10c3e3e570011c04090042745a001004140000")
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 3, len(exts))

	// digest from polkadot.js
	digestBytes := testdata.DigestKusama1482002(t)

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)

	require.Equal(t, 4, len(digest.Types))

	// kusama block 1482003, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x587f6da1bfa71a675f10dfa0f63edfcf168e8ece97eb5f526aaf0e8a8e82db3f"),
			Number:         1482003,
			StateRoot:      common.MustHexToHash("0xd2de750002f33968437bdd54912dd4f55c3bddc5a391a8e0b8332568e1efea8d"),
			ExtrinsicsRoot: common.MustHexToHash("0xdf5da95780b77e83ad0bf820d5838f07a0d5131aa95a75f8dfbd01fbccb300bd"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_PolkadotBlock1089328(t *testing.T) {
	dotTrie := newTrieFromPairs(t, "../test_data/polkadot/block1089327.json")
	expectedRoot := common.MustHexToHash("0x87ed9ebe7fb645d3b5b0255cc16e78ed022d9fbb52486105436e15a74557535b")
	require.Equal(t, expectedRoot, trie.V0.MustHash(*dotTrie))

	// set state to genesis state
	state := storage.NewTrieState(dotTrie)

	cfg := Config{
		Storage: state,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(dotTrie, cfg)
	require.NoError(t, err)

	body := common.MustHexToBytes("0x0c280403000be02ab6d873011004140000b90384468e34dbdcc8da24e44b0f0d34d97ccad5ce0281e465db0cc1d8e1423d50d90a018a89185c693f77b050fa35d1f80b19608b72a6e626110e835caedf949668a12b0ad7b786accf2caac0ec874941ccea9825d50b6bb5870e1400f0e56bb4c18b87a5021501001d00862e432e0cf75693899c62691ac0f48967f815add97ae85659dcde8332708551001b000cf4da8aea0e5649a8bedbc1f08e8a8c0febe50cd5b1c9ce0da2164f19aef40f01014a87a7d3673e5c80aec79973682140828a0d1c3899f4f3cc953bd02673e11a022aaa4f269e3f1a90156db29df88f780b1540b610aeb5cd347ee703c5dff48485") //nolint:lll
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 3, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x080642414245b501017b000000428edd0f00000000c4fd75c7535d8eec375d70d21cc62262247b599aa67d8a9cf2f7d1b8cb93cd1f9539f04902c33d4c0fe47f723dfed8505d31de1c04d0036a9df233ff902fce0d70060908faa4b3f481e54cbd6a52dfc20c3faac82f746d84dc03c2f824a89a0d0542414245010122041949669a56c8f11b3e3e7c803e477ad24a71ed887bc81c956b59ea8f2b30122e6042494aab60a75e0db8fdff45951e456e6053bd64eb5722600e4a13038b") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)
	require.Equal(t, 2, len(digest.Types))

	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x21dc35454805411be396debf3e1d5aad8d6e9d0d7679cce0cc632ba8a647d07c"),
			Number:         1089328,
			StateRoot:      common.MustHexToHash("0x257b1a7f6bc0287fcbf50676dd29817f2f7ae193cb65b31962e351917406fa23"),
			ExtrinsicsRoot: common.MustHexToHash("0x950173af1d9fdcd0be5428fc3eaf05d5f34376bd3882d9a61b348fa2dc641012"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_DecodeSessionKeys(t *testing.T) {
	keys := "0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d34309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc3852042602634309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc3852042602634309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc3852042602634309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc3852042602634309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc38520426026" //nolint:lll
	pubkeys, err := common.HexToBytes(keys)
	require.NoError(t, err)

	pukeysBytes, err := scale.Marshal(pubkeys)
	require.NoError(t, err)

	instance := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	decoded, err := instance.DecodeSessionKeys(pukeysBytes)
	require.NoError(t, err)

	var decodedKeys *[]struct {
		Data []uint8
		Type [4]uint8
	}

	err = scale.Unmarshal(decoded, &decodedKeys)
	require.NoError(t, err)

	require.NotNil(t, decodedKeys)
	require.Len(t, *decodedKeys, 6)
}

func TestInstance_PaymentQueryInfo(t *testing.T) {
	tests := []struct {
		extB       []byte
		ext        string
		errMessage string
		expect     *types.RuntimeDispatchInfo
	}{
		{
			// Was made with @polkadot/api on https://github.com/danforbes/polkadot-js-scripts/tree/create-signed-tx
			ext: "0xd1018400d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d01bc2b6e35929aabd5b8bc4e5b0168c9bee59e2bb9d6098769f6683ecf73e44c776652d947a270d59f3d37eb9f9c8c17ec1b4cc473f2f9928ffdeef0f3abd43e85d502000000012844616e20466f72626573", //nolint:lll
			expect: &types.RuntimeDispatchInfo{
				Weight: 0,
				Class:  0,
				PartialFee: &scale.Uint128{
					Upper: 0,
					Lower: uint64(12800000000),
				},
			},
		},
		{
			// incomplete extrinsic
			ext:        "0x4ccde39a5684e7a56da23b22d4d9fbadb023baa19c56495432884d0640000000000000000000000000000000",
			errMessage: "running runtime function: wasm error",
		},
		{
			// incomplete extrinsic
			extB:       nil,
			errMessage: "running runtime function: wasm error",
		},
	}

	for _, test := range tests {
		var err error
		var extBytes []byte

		if test.ext == "" {
			extBytes = test.extB
		} else {
			extBytes, err = common.HexToBytes(test.ext)
			require.NoError(t, err)
		}

		ins := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
		info, err := ins.PaymentQueryInfo(extBytes)

		if test.errMessage != "" {
			assert.ErrorContains(t, err, test.errMessage)
			continue
		}
		require.NoError(t, err)

		require.NoError(t, err)
		require.NotNil(t, info)
		require.Equal(t, test.expect, info)
	}
}

func newTrieFromPairs(t *testing.T, filename string) *trie.Trie {
	data, err := os.ReadFile(filename)
	require.NoError(t, err)

	rpcPairs := make(map[string]interface{})
	err = json.Unmarshal(data, &rpcPairs)
	require.NoError(t, err)
	pairs := rpcPairs["result"].([]interface{})

	entries := make(map[string]string)
	for _, pair := range pairs {
		pairArr := pair.([]interface{})
		entries[pairArr[0].(string)] = pairArr[1].(string)
	}

	tr, err := trie.LoadFromMap(entries)
	require.NoError(t, err)
	return &tr
}

func TestInstance_TransactionPaymentCallApi_QueryCallInfo(t *testing.T) {
	ins := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	tests := []struct {
		callHex    string
		errMessage string
		expect     *types.RuntimeDispatchInfo
	}{
		{
			// call generated by using palkadot.js/api v9.5.1: api.tx.system.remark("Ed")
			// and removing first byte (encoding) and second byte (unknown)
			callHex: "0x0001084564",
			expect: &types.RuntimeDispatchInfo{
				Weight: 0,
				Class:  0,
				PartialFee: &scale.Uint128{
					Upper: 0,
					Lower: uint64(1500000000),
				},
			},
		},
		{
			// call removing encoding (first byte), polkadot.js/api v9.5.1: api.tx.system.remark("Ed")
			// polkadot.js/api returns error:  RPC-CORE: call(method: Text, data: Bytes, at?: BlockHash):
			// Bytes:: -32000: Client error: Execution failed: Execution aborted due to trap: wasm trap: wasm
			// `unreachable` instruction executed
			callHex:    "0x040001084564",
			errMessage: "running runtime function: wasm error",
		},
		{
			// call without removing any bytes, polkadot.js/api v9.5.1: api.tx.system.remark("Ed test")
			// polkadot.js/api returns error: Error: createType(Call):: findMetaCall: Unable to find Call with index
			// [44, 4]/[44,4]
			callHex:    "0x2c0400011c45642074657374",
			errMessage: "running runtime function: wasm error",
		},
	}

	for _, test := range tests {
		var err error
		var callBytes []byte

		callBytes, err = common.HexToBytes(test.callHex)
		require.NoError(t, err)

		info, err := ins.QueryCallInfo(callBytes)

		if test.errMessage != "" {
			assert.ErrorContains(t, err, test.errMessage)
			continue
		}

		require.NoError(t, err)
		require.NotNil(t, info)
		require.Equal(t, test.expect, info)
	}
}

func TestInstance_TransactionPaymentCallApi_QueryCallFeeDetails(t *testing.T) {
	ins := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	tests := []struct {
		callHex    string
		errMessage string
		expect     *types.FeeDetails
	}{
		{
			// call generated by using palkadot.js/api v9.5.1: api.tx.system.remark("Ed")
			// and removing first byte (encoding) and second byte (unknown)
			callHex: "0x0001084564",
			expect: &types.FeeDetails{
				InclusionFee: types.InclusionFee{
					BaseFee: &scale.Uint128{
						Upper: 0,
						Lower: uint64(256000000001),
					},
					LenFee: &scale.Uint128{
						Upper: 0,
						Lower: uint64(128000000000),
					},
					AdjustedWeightFee: &scale.Uint128{},
				},
				Tip: &scale.Uint128{},
			},
		},
		{
			// call removing encoding (first byte), polkadot.js/api v9.5.1: api.tx.system.remark("Ed")
			// when calling polkadot node (v0.9.29) with polkadot.js/api the node returns error:  RPC-CORE: call(
			// method: Text, data: Bytes, at?: BlockHash): Bytes:: -32000: Client error: Execution failed:
			// Execution aborted due to trap: wasm trap: wasm `unreachable` instruction executed
			callHex:    "0x040001084564",
			errMessage: "running runtime function: wasm error",
		},
		{
			// call without removing any bytes, polkadot.js/api v9.5.1: api.tx.system.remark("Ed test")
			// when calling polkadot (v0.9.29) with polkadot.js/api the node returns error: Error: createType(
			// Call):: findMetaCall: Unable to find Call with index [44, 4]/[44,4]
			callHex:    "0x18040001084564",
			errMessage: "running runtime function: wasm error",
		},
	}

	for _, test := range tests {
		extBytes, err := common.HexToBytes(test.callHex)
		require.NoError(t, err)

		details, err := ins.QueryCallFeeDetails(extBytes)

		if test.errMessage != "" {
			assert.ErrorContains(t, err, test.errMessage)
			continue
		}

		require.NoError(t, err)
		require.NotNil(t, details)
		require.Equal(t, test.expect, details)
	}
}

func TestInstance_GrandpaGenerateKeyOwnershipProof(t *testing.T) {
	instance := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	identity := common.MustHexToBytes("0x88dc3417d5058ec4b4503e0c12ea1a0a89be200fe98922423d4334014fa6b0ee")
	identityPubKey, _ := ed25519.NewPublicKey(identity)
	authorityID := identityPubKey.AsBytes()

	opaqueKeyOwnershipProof, err := instance.GrandpaGenerateKeyOwnershipProof(uint64(0), authorityID)
	// Since the input is not valid with respect to the instance, an empty proof is returned
	require.NoError(t, err)
	require.Nil(t, opaqueKeyOwnershipProof)
}

func TestInstance_GrandpaSubmitReportEquivocationUnsignedExtrinsic(t *testing.T) {
	identity := common.MustHexToBytes("0x88dc3417d5058ec4b4503e0c12ea1a0a89be200fe98922423d4334014fa6b0ee")
	identityPubKey, _ := ed25519.NewPublicKey(identity)
	runtime := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)

	keyOwnershipProofRaw := types.GrandpaOpaqueKeyOwnershipProof([]byte{64, 138, 252, 29, 127, 102, 189, 129, 207, 47,
		157, 60, 17, 138, 194, 121, 139, 92, 176, 175, 224, 16, 185, 93, 175, 251, 224, 81, 209, 61, 0, 71})
	keyOwnershipProof := scale.MustMarshal(keyOwnershipProofRaw)

	var opaqueKeyOwnershipProof types.GrandpaOpaqueKeyOwnershipProof
	err := scale.Unmarshal(keyOwnershipProof, &opaqueKeyOwnershipProof)
	require.NoError(t, err)

	firstVote := types.GrandpaVote{
		Hash:   common.MustHexToHash("0x4801b8e62d31167d30c893cc1970f6a0e289420282a4b245b75f2c46fb308af1"),
		Number: 10,
	}
	secondVote := types.GrandpaVote{
		Hash:   common.MustHexToHash("0xc314327941fdd924bc67fd72651c40aececd485ca3e878c21e02abb40feae5bd"),
		Number: 10,
	}

	firstSignatureArray := mustHexTo64BArray(t, "0xd7292caacc62504365f179892a7399f233944bf261f8a3f66260f70e0016f2d"+
		"b63922726b015c82dc7131f4730fbec61f71672a571453e51029bfb469070900f")

	secondSignatureArray := mustHexTo64BArray(t, "0xb3c408b74905dfedfffa66f99f16fe8b938fd8df76a92225228a1ca07523"+
		"0b99a2d9e173c561952e1e378b701915ca188d2c832ef92a3fab8e455f32570c0807")

	grandpaEquivocation := types.GrandpaEquivocation{
		RoundNumber:     1,
		ID:              identityPubKey.AsBytes(),
		FirstVote:       firstVote,
		FirstSignature:  firstSignatureArray,
		SecondVote:      secondVote,
		SecondSignature: secondSignatureArray,
	}
	preVoteEquivocation := types.PreVote(grandpaEquivocation)
	equivocationVote := types.NewGrandpaEquivocation()
	err = equivocationVote.Set(preVoteEquivocation)
	require.NoError(t, err)

	equivocationProof := types.GrandpaEquivocationProof{
		SetID:        1,
		Equivocation: *equivocationVote,
	}
	err = runtime.GrandpaSubmitReportEquivocationUnsignedExtrinsic(equivocationProof, opaqueKeyOwnershipProof)
	require.NoError(t, err)
}

func TestInstance_ParachainHostPersistedValidationData(t *testing.T) {
	t.Parallel()
	tt := getParachainHostTrie(t, parachainTestData.Storage)
	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v0942, tt)

	parachainID := uint32(1000)
	assumption := parachaintypes.NewOccupiedCoreAssumption()
	err := assumption.Set(parachaintypes.IncludedOccupiedCoreAssumption{})
	require.NoError(t, err)

	expectedPVD := parachaintypes.PersistedValidationData{
		ParentHead:             parachaintypes.HeadData{Data: common.MustHexToBytes("0xd91574d9e4897d88a7fb40130cf6c7900b5cb7238036726cd6c07a2255c8ed1c32a018010915879f32707df4a034c9a329ca83a80fab304d1a860690def304379ac236284091930e2b657bf56c4353bdca877b2c8a6bc33ba1611a5d79b2858b00bc707f08066175726120f4635e08000000000561757261010172b799cfe3e2ba2bd80349c7c92d1d84ff01ad6b3d491ff523ee2759e81dc22d58a94cd968ed300dbbc725144a04fa3622a11b2614255b802261d03c53af6f8e")}, //nolint:lll
		RelayParentNumber:      uint32(15946390),
		RelayParentStorageRoot: common.MustHexToHash("0x0c4a2ea5dea6f3674d582478b16489a0d3e25e69aeba094543e2669f05b01242"),
		MaxPovSize:             1024 * 1024 * 5,
	}

	actualPVD, err := rt.ParachainHostPersistedValidationData(parachainID, assumption)
	require.NoError(t, err)
	require.Equal(t, expectedPVD.ParentHead, actualPVD.ParentHead)
	require.Equal(t, expectedPVD.RelayParentNumber, actualPVD.RelayParentNumber)
	require.Equal(t, expectedPVD.RelayParentStorageRoot, actualPVD.RelayParentStorageRoot)
	require.Equal(t, expectedPVD.MaxPovSize, actualPVD.MaxPovSize)

}

func TestInstance_ParachainHostValidationCode(t *testing.T) {
	t.Parallel()
	tt := getParachainHostTrie(t, parachainTestData.Storage)
	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v0942, tt)

	parachainID := uint32(1000)
	assumption := parachaintypes.NewOccupiedCoreAssumption()
	err := assumption.Set(parachaintypes.IncludedOccupiedCoreAssumption{})
	require.NoError(t, err)

	validationCode, err := rt.ParachainHostValidationCode(parachainID, assumption)
	require.NoError(t, err)
	require.NotEmpty(t, validationCode)

	expected := parachainTestData.Lookups["validationCode"].([]byte)
	require.Equal(t, expected[4:], []byte(*validationCode))
}

func TestInstance_ParachainHostValidationCodeByHash(t *testing.T) {
	t.Parallel()
	tt := getParachainHostTrie(t, parachainTestData.Storage)
	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v0942, tt)

	codeHash := parachainTestData.Lookups["currentCodeHash"]
	hash := common.MustHexToHash(common.BytesToHex(codeHash.([]byte)))

	validationCode, err := rt.ParachainHostValidationCodeByHash(hash)
	require.NoError(t, err)
	require.NotEmpty(t, validationCode)

	expected := parachainTestData.Lookups["validationCode"].([]byte)
	require.Equal(t, expected[4:], []byte(*validationCode))
}

func TestInstance_ParachainHostValidators(t *testing.T) {
	t.Parallel()

	tt := getParachainHostTrie(t, parachainTestData.Storage)
	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v0942, tt)

	response, err := rt.ParachainHostValidators()
	require.NoError(t, err)

	expected := []parachaintypes.ValidatorID{
		mustHexTo32BArray(t, "0xa262f83b46310770ae8d092147176b8b25e8855bcfbbe701d346b10db0c5385d"),
		mustHexTo32BArray(t, "0x804b9df571e2b744d65eca2d4c59eb8e4345286c00389d97bfc1d8d13aa6e57e"),
		mustHexTo32BArray(t, "0x4eb63e4aad805c06dc924e2f19b1dde7faf507e5bb3c1838d6a3cfc10e84fe72"),
		mustHexTo32BArray(t, "0x74c337d57035cd6b7718e92a0d8ea6ef710da8ab1215a057c40c4ef792155a68"),
		mustHexTo32BArray(t, "0xe61d138eebd2069f1a76b3570f9de6a4b196289b198e33e6f0b59cef8837c511"),
		mustHexTo32BArray(t, "0x94ef34321ca5d37a6e8953183406b76f8ebf6a4be5eefc3997d022ac6e0a050e"),
		mustHexTo32BArray(t, "0xac837e8ca589521a83e7d9a7b307d1c41a5d9b940422488236f99646d21f3841"),
		mustHexTo32BArray(t, "0xb61cb85f7cf7616f9ef8f95010a51a68a4eae8afcdff715cc6a8d43da4a32a12"),
		mustHexTo32BArray(t, "0x382f17dae6b13a8ce5a7cc805056d9b592d918c8593f077db28cb14cf08a760c"),
		mustHexTo32BArray(t, "0x0825ba7677597ec9453ab5dbaa9e68bf89dc36694cb6e74cbd5a9a74b167e547"),
		mustHexTo32BArray(t, "0xcee3f65d78a239d7d199b100295e7a2d852ae898a6b81fd867b3471f25be7237"),
		mustHexTo32BArray(t, "0xe2ac8f039eb02370a9577e49ffc6032e6b5bf5ff77783bdc676d1432d714fd53"),
		mustHexTo32BArray(t, "0xce35fa64fe7a5a6fc456ed2830e64d5d1a5dba26e7a57ab458f8cedf1ec77016"),
		mustHexTo32BArray(t, "0xae40e895f46c8bfb3df63c119047d7faf21c3fe3e7a91994a3f00da6fa80f848"),
		mustHexTo32BArray(t, "0xa0e038975cff34d01c62960828c23ec10a305fe9f5c3589c2ae40f51963e380a"),
		mustHexTo32BArray(t, "0x807fa54347a8957ff5ef6c28e2403c83947e5fad4aa805c914df0645a07aab5a"),
		mustHexTo32BArray(t, "0x4c8e878d7f558ce5086cc37ca0d5964bed54ddd6b15a6663a95fe42e36858936"),
	}
	require.Equal(t, expected, response)
}

func TestInstance_ParachainHostValidatorGroups(t *testing.T) {
	t.Parallel()

	tt := getParachainHostTrie(t, parachainTestData.Storage)
	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v0942, tt)

	response, err := rt.ParachainHostValidatorGroups()
	require.NoError(t, err)

	expected := &parachaintypes.ValidatorGroups{
		Validators: [][]parachaintypes.ValidatorIndex{
			{0, 1, 2, 3, 4, 5},
			{6, 7, 8, 9, 10, 11},
			{12, 13, 14, 15, 16},
		},
		GroupRotationInfo: parachaintypes.GroupRotationInfo{
			SessionStartBlock:      15946156,
			GroupRotationFrequency: 10,
			Now:                    15946391,
		},
	}

	require.Equal(t, expected, response)
}

func TestInstance_ParachainHostAvailabilityCores(t *testing.T) {
	t.Parallel()

	tt := getParachainHostTrie(t, parachainTestData.Storage)
	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v0942, tt)

	response, err := rt.ParachainHostAvailabilityCores()
	require.NoError(t, err)

	expectedHash := parachainTestData.Expected["availabilityCores"]
	if expectedHash == "" {
		t.Fatal("could not get expected hash from test data")
	}
	expected := common.MustHexToBytes(expectedHash)
	encoded, err := scale.Marshal(*response)
	require.NoError(t, err)
	require.Equal(t, expected, encoded)
}

func TestInstance_ParachainHostSessionIndexForChild(t *testing.T) {
	t.Parallel()

	tt := getParachainHostTrie(t, parachainTestData.Storage)
	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v0929, tt)

	response, err := rt.ParachainHostSessionIndexForChild()
	require.NoError(t, err)

	expected := parachaintypes.SessionIndex(27379)
	require.Equal(t, expected, response)
}

func TestInstance_ParachainHostCandidatePendingAvailability(t *testing.T) {
	t.Parallel()

	tt := getParachainHostTrie(t, parachainTestData.Storage)
	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v0942, tt)

	response, err := rt.ParachainHostCandidatePendingAvailability(parachaintypes.ParaID(1000))
	require.NoError(t, err)

	expectedHash := parachainTestData.Expected["candidatePendingAvailability"]
	if expectedHash == "" {
		t.Fatal("could not get expected hash from test data")
	}

	b, err := scale.Marshal(*response)
	require.NoError(t, err)

	resultHex := common.BytesToHex(b)
	require.Equal(t, expectedHash, resultHex)
}

func TestInstance_ParachainHostCandidateEvents(t *testing.T) {
	t.Parallel()

	tt := getParachainHostTrie(t, parachainTestData.Storage)
	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v0942, tt)

	response, err := rt.ParachainHostCandidateEvents()
	require.NoError(t, err)

	encoded, err := scale.Marshal(*response)
	require.NoError(t, err)
	expectedHash := parachainTestData.Expected["candidateEvents"]
	if expectedHash == "" {
		t.Fatal("candidateEvents expected hash is not defined in test data")
	}
	expected := common.MustHexToBytes(expectedHash)
	require.Equal(t, expected, encoded)
}

func TestInstance_ParachainHostSessionInfo(t *testing.T) {
	t.Parallel()

	tt := getParachainHostTrie(t, parachainTestData.Storage)
	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v0942, tt)

	response, err := rt.ParachainHostSessionInfo(parachaintypes.SessionIndex(27379))
	require.NoError(t, err)

	expected := &parachaintypes.SessionInfo{
		ActiveValidatorIndices: []parachaintypes.ValidatorIndex{7, 12, 14, 1, 4, 16, 3, 11, 9, 6, 13, 15, 5, 0, 8, 10, 2},
		RandomSeed:             mustHexTo32BArray(t, "0x9a14667dcf973e46392904593e8caf2fb7a57904edbadf1547531657e7a56b5e"),
		DisputePeriod:          6,
		Validators: []parachaintypes.ValidatorID{
			mustHexTo32BArray(t, "0xa262f83b46310770ae8d092147176b8b25e8855bcfbbe701d346b10db0c5385d"),
			mustHexTo32BArray(t, "0x804b9df571e2b744d65eca2d4c59eb8e4345286c00389d97bfc1d8d13aa6e57e"),
			mustHexTo32BArray(t, "0x4eb63e4aad805c06dc924e2f19b1dde7faf507e5bb3c1838d6a3cfc10e84fe72"),
			mustHexTo32BArray(t, "0x74c337d57035cd6b7718e92a0d8ea6ef710da8ab1215a057c40c4ef792155a68"),
			mustHexTo32BArray(t, "0xe61d138eebd2069f1a76b3570f9de6a4b196289b198e33e6f0b59cef8837c511"),
			mustHexTo32BArray(t, "0x94ef34321ca5d37a6e8953183406b76f8ebf6a4be5eefc3997d022ac6e0a050e"),
			mustHexTo32BArray(t, "0xac837e8ca589521a83e7d9a7b307d1c41a5d9b940422488236f99646d21f3841"),
			mustHexTo32BArray(t, "0xb61cb85f7cf7616f9ef8f95010a51a68a4eae8afcdff715cc6a8d43da4a32a12"),
			mustHexTo32BArray(t, "0x382f17dae6b13a8ce5a7cc805056d9b592d918c8593f077db28cb14cf08a760c"),
			mustHexTo32BArray(t, "0x0825ba7677597ec9453ab5dbaa9e68bf89dc36694cb6e74cbd5a9a74b167e547"),
			mustHexTo32BArray(t, "0xcee3f65d78a239d7d199b100295e7a2d852ae898a6b81fd867b3471f25be7237"),
			mustHexTo32BArray(t, "0xe2ac8f039eb02370a9577e49ffc6032e6b5bf5ff77783bdc676d1432d714fd53"),
			mustHexTo32BArray(t, "0xce35fa64fe7a5a6fc456ed2830e64d5d1a5dba26e7a57ab458f8cedf1ec77016"),
			mustHexTo32BArray(t, "0xae40e895f46c8bfb3df63c119047d7faf21c3fe3e7a91994a3f00da6fa80f848"),
			mustHexTo32BArray(t, "0xa0e038975cff34d01c62960828c23ec10a305fe9f5c3589c2ae40f51963e380a"),
			mustHexTo32BArray(t, "0x807fa54347a8957ff5ef6c28e2403c83947e5fad4aa805c914df0645a07aab5a"),
			mustHexTo32BArray(t, "0x4c8e878d7f558ce5086cc37ca0d5964bed54ddd6b15a6663a95fe42e36858936"),
		},
		DiscoveryKeys: []parachaintypes.AuthorityDiscoveryID{
			mustHexTo32BArray(t, "0x407a89ac6943b9d2ef1ceb5f1299941758a6af5b8f79b89b90f95a3e38179341"),
			mustHexTo32BArray(t, "0x307744a128c608be0dff2189557715b74734359974606d96dc4d256d61b1047d"),
			mustHexTo32BArray(t, "0x74fff2667b4a2cc69198ec9d3bf41f4d001ab644b45feaf89a21ff7ef3bd2618"),
			mustHexTo32BArray(t, "0x98ab99b4b982d6a1d983ab05ac530b373043e6b7a4a7e5a7dc7ca1942196ae6c"),
			mustHexTo32BArray(t, "0x94f9e38609dd9972bfdbe4664f2063499f6233f895ee13b71793c926018a9428"),
			mustHexTo32BArray(t, "0x4ce0e8ec374f50c27948b8880628918a41b56930f1af675a5b5099d23f326763"),
			mustHexTo32BArray(t, "0x3a58b8f1f529e55fc3dac1dd81cb4547565c09f6e98d97243acb98bdda890028"),
			mustHexTo32BArray(t, "0x982bcec62ad60cf9fd00e89b7e3589adb668fcbc467127537851b5a5f3dbbb16"),
			mustHexTo32BArray(t, "0x0695b906f52a88f18bdecd811785b4299c51ebb2a2755f0b4c0d83fbef431861"),
			mustHexTo32BArray(t, "0x0ec5e1d2d044023009c63659c65a79aaf07ecbf5b9887958243aa873a63e5a1b"),
			mustHexTo32BArray(t, "0x52ef04ed449e4db577d98ad433b779c36f0d122df03e1cdc3e840a49016c5f16"),
			mustHexTo32BArray(t, "0xc2d4b5973000d0b175631dde5d1657b3e34c2f75e8a6d5414013ce4036d83355"),
			mustHexTo32BArray(t, "0xa6e01665b2d8490abf45551088021041dfb41772a9d596ed6e9f261ed1c8ae72"),
			mustHexTo32BArray(t, "0xb436c143e295617afb60353a01f2941bd33370a662c99c040984e52a072b5f22"),
			mustHexTo32BArray(t, "0x4c4c4b178f1a3d67e5f26d6b93b9a43937cd2d1d1cb2acc4650f504125df2e18"),
			mustHexTo32BArray(t, "0xca17f0edc319c140113a44722f829aa1313da1b54298a10df49ad7d67d9de85f"),
			mustHexTo32BArray(t, "0x5a6bf6911fc41d8981c7c28f87e8ed4416c65e15624f7b4e36c6a1a72c7a7819"),
		},
		AssignmentKeys: []parachaintypes.AssignmentID{
			mustHexTo32BArray(t, "0x6acc35b896fe346adeda25c4031cf6a81e58dca091164370859828cc4456901a"),
			mustHexTo32BArray(t, "0x466627d554785807aaf50bfbdc9b8f729e8e20eb596ee5def5acd2acb72e405f"),
			mustHexTo32BArray(t, "0xc05cab9e7773ffaf045407579f9c8e16d56f119117421cd18a250c2e37fcb53a"),
			mustHexTo32BArray(t, "0xe2dca6ce9b3ebb40052c34392dc74d3cdd648399119fa470222a10956769d64f"),
			mustHexTo32BArray(t, "0x7477459916ace4f77d97d6ab5e1a2f06092282c7f0a1332628c14896e8e9be62"),
			mustHexTo32BArray(t, "0xc2574de3dc8feebfad1b3bee36a7bfe6c994e5d1459a5372ff447ac32dd46c11"),
			mustHexTo32BArray(t, "0xb0a8ed99f1e7ab160e0ac2fcfeee0d92d807c8fb4c1678e37997715578926c5c"),
			mustHexTo32BArray(t, "0x6c9bfa7c2e0f8e10a1a78bb982313c5c347a018cb3828886b99e109a8799d272"),
			mustHexTo32BArray(t, "0xe6037f1fc5b19015b7089ecf90034349e3f5c37cb50dec5356743614f94f8c33"),
			mustHexTo32BArray(t, "0x964b85f2b8e10e859e306d3670b8bdc0cea17b97dfd3edc8a9e1be1f127fee5b"),
			mustHexTo32BArray(t, "0x44d421ae62038ba15a377cad85e4ecd3c2a63b54fdbb82c47fb3e9c026405226"),
			mustHexTo32BArray(t, "0x48c51db949a58fd5f36a19888986275547b0c2fbb0b348ccb85dfc6c998dbe16"),
			mustHexTo32BArray(t, "0x0ae9425710301a9241837d624438a5d82edbbd6bf2cdbcc2694ad7db31ef9921"),
			mustHexTo32BArray(t, "0x9e47376e9af08b294901b879c7d658c41386453c6baa7c26560c5fd3b164e05d"),
			mustHexTo32BArray(t, "0x8af1a51649d44d12dffc24337f0a5424b18db9604133eafcb2639ddcdc2a7f0f"),
			mustHexTo32BArray(t, "0xae7a30d143fd125490434ca7325025a2338d0b8bb28dcd9373dfd83756191022"),
			mustHexTo32BArray(t, "0xeeba7c46f5fa1ea21e736d9ebd7a171fb2afe0a4f828a222ea0605a4ad0e6067"),
		},
		ValidatorGroups: [][]parachaintypes.ValidatorIndex{
			{
				0, 1, 2, 3, 4, 5,
			},
			{
				6, 7, 8, 9, 10, 11,
			},
			{
				12, 13, 14, 15, 16,
			},
		},
		NCores:                  3,
		ZerothDelayTrancheWidth: 0,
		RelayVRFModuloSamples:   1,
		NDelayTranches:          40,
		NoShowSlots:             2,
		NeededApprovals:         2,
	}
	require.Equal(t, expected, response)
}

func TestInstance_ParachainHostMinimumBackingVotes(t *testing.T) {
	t.Parallel()

	tt := getParachainHostTrie(t, parachainsConfigV180TestData.Storage)
	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v180, tt)

	response, err := rt.ParachainHostMinimumBackingVotes()
	require.NoError(t, err)
	require.Equal(t, uint32(2), response)
}

func TestInstance_ParachainHostAsyncBackingParams(t *testing.T) {
	t.Parallel()

	tt := getParachainHostTrie(t, parachainsConfigV180TestData.Storage)
	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v180, tt)

	params, err := rt.ParachainHostAsyncBackingParams()
	require.NoError(t, err)
	require.Equal(t, uint32(2), params.AllowedAncestryLen)
	require.Equal(t, uint32(3), params.MaxCandidateDepth)
}

func getParachainHostTrie(t *testing.T, testDataStorage []Storage) *trie.Trie {
	tt := trie.NewEmptyTrie()

	for _, s := range testDataStorage {
		key := common.MustHexToBytes(s.Key)
		value := common.MustHexToBytes(s.Value)
		err := tt.Put(key, value)
		require.NoError(t, err)
	}

	return tt
}

/*

type AsyncBackingParams struct {
	MaxCandidateDepth  uint32 `scale:"1"`
	AllowedAncestryLen uint32 `scale:"2"`
}

type ApprovalVotingParams struct {
	MaxApprovalCoalesceCount uint64 `scale:"1"`
}

type SchedulerParams struct {
	GroupRotationFrequency         uint64 `scale:"1"`
	ParasAvailabilityPeriod        uint64 `scale:"2"`
	MaxValidatorsPerCore           uint64 `scale:"3"`
	Lookahead                      uint64 `scale:"4"`
	NumCores                       uint64 `scale:"5"`
	MaxAvailabilityTimeouts        uint64 `scale:"6"`
	OnDemandQueueMaxSize           uint64 `scale:"7"`
	OnDemandTargetQueueUtilization string `scale:"8"`
	OnDemandFeeVariability         string `scale:"9"`
	OnDemandBaseFee                uint64 `scale:"10"`
	TTL                            uint64 `scale:"11"`
}

type ConfigurationHostConfiguration struct {
	MaxCodeSize                           uint32             `scale:"0"`
	MaxHeadDataSize                       uint16             `scale:"1"`
	MaxUpwardQueueCount                   uint32             `scale:"2"`
	MaxUpwardQueueSize                    uint64             `scale:"3"`
	MaxUpwardMessageSize                  uint64             `scale:"4"`
	MaxUpwardMessageNumPerCandidate       uint64             `scale:"5"`
	HrmpMaxMessageNumPerCandidate         uint64             `scale:"6"`
	ValidationUpgradeCooldown             uint64             `scale:"7"`
	ValidationUpgradeDelay                uint64             `scale:"8"`
	AsyncBackingParams                    AsyncBackingParams `scale:"9"`
	MaxPovSize                            uint64             `scale:"10"`
	MaxDownwardMessageSize                uint64             `scale:"11"`
	HrmpMaxParachainOutboundChannels      uint64             `scale:"12"`
	HrmpSenderDeposit                     uint64             `scale:"13"`
	HrmpRecipientDeposit                  uint64             `scale:"14"`
	HrmpChannelMaxCapacity                uint64             `scale:"15"`
	HrmpChannelMaxTotalSize               uint64             `scale:"16"`
	HrmpMaxParachainInboundChannels       uint16             `scale:"17"`
	HrmpChannelMaxMessageSize             string             `scale:"18"`
	ExecutorParams                        []interface{}      `scale:"19"`
	CodeRetentionPeriod                   uint64             `scale:"20"`
	MaxValidators                         uint64             `scale:"21"`
	DisputePeriod                         uint64             `scale:"22"`
	DisputePostConclusionAcceptancePeriod uint64             `scale:"23"`
	NoShowSlots                           uint64             `scale:"24"`
	NDelayTranches                        uint64             `scale:"25"`
	ZerothDelayTrancheWidth               bool               `scale:"26"`
	NeededApprovals                       int                `scale:"27"`
	RelayVrfModuloSamples                 int                `scale:"28"`
	PvfVotingTtl                          uint16             `scale:"29"`
	MinimumValidationUpgradeDelay         uint               `scale:"30"`
	MinimumBackingVotes                   uint               `scale:"31"`
	NodeFeatures                          uint64             `scale:"32"`
	// ApprovalVotingParams                  ApprovalVotingParams `scale:"33"`
	// SchedulerParams SchedulerParams `scale:"34"`
}

type HostConfiguration struct {
	MaxCodeSize                      uint32                     `scale:"0"`
	MaxHeadDataSize                  uint32                     `scale:"1"`
	MaxUpwardQueueCount              uint32                     `scale:"2"`
	MaxUpwardQueueSize               uint32                     `scale:"3"`
	MaxUpwardMessageSize             uint32                     `scale:"4"`
	MaxUpwardMessageNumPerCandidate  uint32                     `scale:"5"`
	HRMPMaxMessageNumPerCandidate    uint32                     `scale:"6"`
	ValidationUpgradeCooldown        parachaintypes.BlockNumber `scale:"7"`
	ValidationUpgradeDelay           parachaintypes.BlockNumber `scale:"8"`
	AsyncBackingParams               AsyncBackingParams         `scale:"9"`
	MaxPOVSize                       uint32                     `scale:"10"`
	MaxDownwardMessageSize           uint32                     `scale:"11"`
	HRMPMaxParachainOutboundChannels uint32                     `scale:"12"`
	HRMPSenderDeposit                scale.Uint128              `scale:"13"`
	HRMPRecipientDeposit             scale.Uint128              `scale:"14"`
	HRMPChannelMaxCapacity           uint32                     `scale:"15"`
	HRMPChannelMaxTotalSize          uint32                     `scale:"16"`
	HRMPMaxParachainInboundChannels  uint32                     `scale:"17"`
	HRMPChannelMaxMessageSize        uint32                     `scale:"18"`
	// ExecutorParams                        parachaintypes.ExecutorParams `scale:"19"`
	CodeRetentionPeriod                   parachaintypes.BlockNumber  `scale:"20"`
	OnDemandCores                         uint32                      `scale:"21"`
	OnDemandRetries                       uint32                      `scale:"22"`
	OnDemandQueueMaxSize                  uint32                      `scale:"23"`
	OnDemandTargetQueueUtilization        uint32                      `scale:"24"`
	OnDemandFeeVariability                uint32                      `scale:"25"`
	OnDemandBaseFee                       scale.Uint128               `scale:"26"`
	OnDemandTTL                           parachaintypes.BlockNumber  `scale:"27"`
	GroupRotationFrequency                parachaintypes.BlockNumber  `scale:"28"`
	ParasAvailabilityPeriod               parachaintypes.BlockNumber  `scale:"29"`
	SchedulingLookahead                   uint32                      `scale:"30"`
	MaxValidatorsPerCore                  *uint32                     `scale:"31"` // pointer to allow for None
	MaxValidators                         *uint32                     `scale:"32"` // pointer to allow for None
	DisputePeriod                         parachaintypes.SessionIndex `scale:"33"`
	DisputePostConclusionAcceptancePeriod parachaintypes.BlockNumber  `scale:"34"`
	NoShowSlots                           uint32                      `scale:"35"`
	NDelayTranches                        uint32                      `scale:"36"`
	ZerothDelayTrancheWidth               uint32                      `scale:"37"`
	NeededApprovals                       uint32                      `scale:"38"`
	RelayVRFModuloSamples                 uint32                      `scale:"39"`
	PVFVotingTTL                          parachaintypes.SessionIndex `scale:"40"`
	MinimumValidationUpgradeDelay         parachaintypes.BlockNumber  `scale:"41"`
	MinimumBackingVotes                   uint32                      `scale:"42"`
}

func TestDecodeRawStorage(t *testing.T) {
	rawStorage := "0x00003000005000005555150000008000fbff0100000200000a000000c80000006400000003000000020000000000500000c800000a00000000c0220fca950300000000000000000000c0220fca9503000000000000000000e8030000009001000a00000000900100008070000001c800000006000000580200000200000028000000000000000200000001000000020000000f0000000200000000010000000a0000000500000001050000000200000006000000000000001027000080b2e60e80c3c9018096980000000000000000000000000005000000"

	rawStorageBytes, err := common.HexToBytes(rawStorage)
	require.NoError(t, err)

	var val HostConfiguration
	err = scale.Unmarshal(rawStorageBytes, &val)
	require.NoError(t, err)

	fmt.Printf("Decoded raw storage: %+v\n", val)
}
*/
