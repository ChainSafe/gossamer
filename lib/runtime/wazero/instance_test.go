// Copyright 2021 ChainSafe Systems (ON)
// SPDX-License-Identifier: LGPL-3.0-only

package wazero_runtime

import (
	_ "embed"
	"fmt"

	"bytes"
	"encoding/json"
	"math/big"
	"os"
	"path/filepath"
	"testing"

	"github.com/ChainSafe/gossamer/dot/network"
	"github.com/ChainSafe/gossamer/dot/types"
	"github.com/ChainSafe/gossamer/internal/log"
	"github.com/ChainSafe/gossamer/lib/common"
	"github.com/ChainSafe/gossamer/lib/crypto/ed25519"
	"github.com/ChainSafe/gossamer/lib/genesis"
	"github.com/ChainSafe/gossamer/lib/runtime"
	"github.com/ChainSafe/gossamer/lib/runtime/storage"
	"github.com/ChainSafe/gossamer/lib/runtime/wazero/testdata"
	"github.com/ChainSafe/gossamer/lib/trie"
	"github.com/ChainSafe/gossamer/lib/utils"
	"github.com/ChainSafe/gossamer/pkg/scale"
	"github.com/centrifuge/go-substrate-rpc-client/v4/signature"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func mustHexTo64BArray(t *testing.T, inputHex string) (outputArray [64]byte) {
	t.Helper()
	copy(outputArray[:], common.MustHexToBytes(inputHex))
	return outputArray
}

func genesisFromRawJSON(t *testing.T, jsonFilepath string) (gen genesis.Genesis) {
	t.Helper()

	fp, err := filepath.Abs(jsonFilepath)
	require.NoError(t, err)

	data, err := os.ReadFile(filepath.Clean(fp))
	require.NoError(t, err)

	err = json.Unmarshal(data, &gen)
	require.NoError(t, err)

	return gen
}

// this is generated by printing key ownership proof while running `test_generate_equivocation_report_blob`
// https://github.com/paritytech/substrate/blob/ded44948e2d5a398abcb4e342b0513cb690961bb/frame/grandpa/src/benchmarking.rs#L85
var testKeyOwnershipProof types.OpaqueKeyOwnershipProof = types.OpaqueKeyOwnershipProof([]byte{64, 138, 252, 29, 127, 102, 189, 129, 207, 47, 157, 60, 17, 138, 194, 121, 139, 92, 176, 175, 224, 16, 185, 93, 175, 251, 224, 81, 209, 61, 0, 71}) //nolint:lll

func Test_Instance_Version(t *testing.T) {
	type instanceVersioner interface {
		Version() (runtime.Version, error)
	}

	testCases := map[string]struct {
		instanceBuilder func(t *testing.T) instanceVersioner
		expectedVersion runtime.Version
	}{
		"kusama": {
			instanceBuilder: func(t *testing.T) instanceVersioner {
				genesisPath := utils.GetKusamaGenesisPath(t)
				kusamaGenesis := genesisFromRawJSON(t, genesisPath)
				genesisTrie, err := runtime.NewTrieFromGenesis(kusamaGenesis)
				require.NoError(t, err)

				cfg := Config{
					Storage: storage.NewTrieState(&genesisTrie),
					LogLvl:  log.Critical,
				}

				instance, err := NewRuntimeFromGenesis(cfg)
				require.NoError(t, err)
				return instance
			},
			expectedVersion: runtime.Version{
				SpecName:         []byte("kusama"),
				ImplName:         []byte("parity-kusama"),
				AuthoringVersion: 2,
				SpecVersion:      1020,
				ImplVersion:      0,
				APIItems: []runtime.APIItem{
					{Name: [8]uint8{0xdf, 0x6a, 0xcb, 0x68, 0x99, 0x7, 0x60, 0x9b}, Ver: 0x2},
					{Name: [8]uint8{0x37, 0xe3, 0x97, 0xfc, 0x7c, 0x91, 0xf5, 0xe4}, Ver: 0x1},
					{Name: [8]uint8{0x40, 0xfe, 0x3a, 0xd4, 0x1, 0xf8, 0x95, 0x9a}, Ver: 0x4},
					{Name: [8]uint8{0xd2, 0xbc, 0x98, 0x97, 0xee, 0xd0, 0x8f, 0x15}, Ver: 0x1},
					{Name: [8]uint8{0xf7, 0x8b, 0x27, 0x8b, 0xe5, 0x3f, 0x45, 0x4c}, Ver: 0x1},
					{Name: [8]uint8{0xaf, 0x2c, 0x2, 0x97, 0xa2, 0x3e, 0x6d, 0x3d}, Ver: 0x1},
					{Name: [8]uint8{0xed, 0x99, 0xc5, 0xac, 0xb2, 0x5e, 0xed, 0xf5}, Ver: 0x2},
					{Name: [8]uint8{0xcb, 0xca, 0x25, 0xe3, 0x9f, 0x14, 0x23, 0x87}, Ver: 0x1},
					{Name: [8]uint8{0x68, 0x7a, 0xd4, 0x4a, 0xd3, 0x7f, 0x3, 0xc2}, Ver: 0x1},
					{Name: [8]uint8{0xab, 0x3c, 0x5, 0x72, 0x29, 0x1f, 0xeb, 0x8b}, Ver: 0x1},
					{Name: [8]uint8{0xbc, 0x9d, 0x89, 0x90, 0x4f, 0x5b, 0x92, 0x3f}, Ver: 0x1},
					{Name: [8]uint8{0x37, 0xc8, 0xbb, 0x13, 0x50, 0xa9, 0xa2, 0xa8}, Ver: 0x1},
				},
			},
		},
		"polkadot_v0929": {
			instanceBuilder: func(t *testing.T) instanceVersioner {
				return NewTestInstance(t, runtime.POLKADOT_RUNTIME_v0929)
			},
			expectedVersion: runtime.Version{
				SpecName:         []byte("polkadot"),
				ImplName:         []byte("parity-polkadot"),
				AuthoringVersion: 0,
				SpecVersion:      9290,
				ImplVersion:      0,
				APIItems: []runtime.APIItem{
					{Name: [8]uint8{0xdf, 0x6a, 0xcb, 0x68, 0x99, 0x7, 0x60, 0x9b}, Ver: 0x4},
					{Name: [8]uint8{0x37, 0xe3, 0x97, 0xfc, 0x7c, 0x91, 0xf5, 0xe4}, Ver: 0x1},
					{Name: [8]uint8{0x40, 0xfe, 0x3a, 0xd4, 0x1, 0xf8, 0x95, 0x9a}, Ver: 0x6},
					{Name: [8]uint8{0x17, 0xa6, 0xbc, 0xd, 0x0, 0x62, 0xae, 0xb3}, Ver: 0x1},
					{Name: [8]uint8{0xd2, 0xbc, 0x98, 0x97, 0xee, 0xd0, 0x8f, 0x15}, Ver: 0x3},
					{Name: [8]uint8{0xf7, 0x8b, 0x27, 0x8b, 0xe5, 0x3f, 0x45, 0x4c}, Ver: 0x2},
					{Name: [8]uint8{0xaf, 0x2c, 0x2, 0x97, 0xa2, 0x3e, 0x6d, 0x3d}, Ver: 0x2},
					{Name: [8]uint8{0x49, 0xea, 0xaf, 0x1b, 0x54, 0x8a, 0xc, 0xb0}, Ver: 0x1},
					{Name: [8]uint8{0x91, 0xd5, 0xdf, 0x18, 0xb0, 0xd2, 0xcf, 0x58}, Ver: 0x1},
					{Name: [8]uint8{0xed, 0x99, 0xc5, 0xac, 0xb2, 0x5e, 0xed, 0xf5}, Ver: 0x3},
					{Name: [8]uint8{0xcb, 0xca, 0x25, 0xe3, 0x9f, 0x14, 0x23, 0x87}, Ver: 0x2},
					{Name: [8]uint8{0x68, 0x7a, 0xd4, 0x4a, 0xd3, 0x7f, 0x3, 0xc2}, Ver: 0x1},
					{Name: [8]uint8{0xab, 0x3c, 0x5, 0x72, 0x29, 0x1f, 0xeb, 0x8b}, Ver: 0x1},
					{Name: [8]uint8{0xbc, 0x9d, 0x89, 0x90, 0x4f, 0x5b, 0x92, 0x3f}, Ver: 0x1},
					{Name: [8]uint8{0x37, 0xc8, 0xbb, 0x13, 0x50, 0xa9, 0xa2, 0xa8}, Ver: 0x1},
					{Name: [8]uint8{0xf3, 0xff, 0x14, 0xd5, 0xab, 0x52, 0x70, 0x59}, Ver: 0x1},
				},
				TransactionVersion: 14,
			},
		},
		"westend_v0929": {
			instanceBuilder: func(t *testing.T) instanceVersioner {
				return NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
			},
			expectedVersion: runtime.Version{
				SpecName:         []byte("westend"),
				ImplName:         []byte("parity-westend"),
				AuthoringVersion: 2,
				SpecVersion:      9290,
				ImplVersion:      0,
				APIItems: []runtime.APIItem{
					{Name: [8]uint8{0xdf, 0x6a, 0xcb, 0x68, 0x99, 0x7, 0x60, 0x9b}, Ver: 0x4},
					{Name: [8]uint8{0x37, 0xe3, 0x97, 0xfc, 0x7c, 0x91, 0xf5, 0xe4}, Ver: 0x1},
					{Name: [8]uint8{0x40, 0xfe, 0x3a, 0xd4, 0x1, 0xf8, 0x95, 0x9a}, Ver: 0x6},
					{Name: [8]uint8{0xd2, 0xbc, 0x98, 0x97, 0xee, 0xd0, 0x8f, 0x15}, Ver: 0x3},
					{Name: [8]uint8{0xf7, 0x8b, 0x27, 0x8b, 0xe5, 0x3f, 0x45, 0x4c}, Ver: 0x2},
					{Name: [8]uint8{0xaf, 0x2c, 0x2, 0x97, 0xa2, 0x3e, 0x6d, 0x3d}, Ver: 0x2},
					{Name: [8]uint8{0x49, 0xea, 0xaf, 0x1b, 0x54, 0x8a, 0xc, 0xb0}, Ver: 0x1},
					{Name: [8]uint8{0x91, 0xd5, 0xdf, 0x18, 0xb0, 0xd2, 0xcf, 0x58}, Ver: 0x1},
					{Name: [8]uint8{0xed, 0x99, 0xc5, 0xac, 0xb2, 0x5e, 0xed, 0xf5}, Ver: 0x3},
					{Name: [8]uint8{0xcb, 0xca, 0x25, 0xe3, 0x9f, 0x14, 0x23, 0x87}, Ver: 0x2},
					{Name: [8]uint8{0x68, 0x7a, 0xd4, 0x4a, 0xd3, 0x7f, 0x3, 0xc2}, Ver: 0x1},
					{Name: [8]uint8{0xab, 0x3c, 0x5, 0x72, 0x29, 0x1f, 0xeb, 0x8b}, Ver: 0x1},
					{Name: [8]uint8{0xbc, 0x9d, 0x89, 0x90, 0x4f, 0x5b, 0x92, 0x3f}, Ver: 0x1},
					{Name: [8]uint8{0x37, 0xc8, 0xbb, 0x13, 0x50, 0xa9, 0xa2, 0xa8}, Ver: 0x1},
					{Name: [8]uint8{0xf3, 0xff, 0x14, 0xd5, 0xab, 0x52, 0x70, 0x59}, Ver: 0x1},
					{Name: [8]uint8{0x17, 0xa6, 0xbc, 0xd, 0x0, 0x62, 0xae, 0xb3}, Ver: 0x1},
				},
				TransactionVersion: 12,
			},
		},
	}

	for name, testCase := range testCases {
		testCase := testCase
		t.Run(name, func(t *testing.T) {
			instance := testCase.instanceBuilder(t)
			version, err := instance.Version()
			require.NoError(t, err)
			assert.Equal(t, testCase.expectedVersion, version)
		})
	}
}

func balanceKey(t *testing.T, pub []byte) []byte {
	h0, err := common.Twox128Hash([]byte("System"))
	require.NoError(t, err)
	h1, err := common.Twox128Hash([]byte("Account"))
	require.NoError(t, err)
	h2, err := common.Blake2b128(pub)
	require.NoError(t, err)
	return append(append(append(h0, h1...), h2...), pub...)
}

func TestWestendRuntime_ValidateTransaction(t *testing.T) {
	genesisPath := utils.GetWestendDevRawGenesisPath(t)
	gen := genesisFromRawJSON(t, genesisPath)
	genTrie, err := runtime.NewTrieFromGenesis(gen)
	require.NoError(t, err)

	// set state to genesis state
	genState := storage.NewTrieState(&genTrie)

	cfg := Config{
		Storage: genState,
		LogLvl:  log.Critical,
	}

	nodeStorage := runtime.NodeStorage{}
	nodeStorage.BaseDB = runtime.NewInMemoryDB(t)
	cfg.NodeStorage = nodeStorage

	rt, err := NewRuntimeFromGenesis(cfg)
	require.NoError(t, err)

	alicePub := common.MustHexToBytes("0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d")
	aliceBalanceKey := balanceKey(t, alicePub)

	accInfo := types.AccountInfo{
		Nonce: 0,
		Data: types.AccountData{
			Free:       scale.MustNewUint128(big.NewInt(1152921504606846976)),
			Reserved:   scale.MustNewUint128(big.NewInt(0)),
			MiscFrozen: scale.MustNewUint128(big.NewInt(0)),
			FreeFrozen: scale.MustNewUint128(big.NewInt(0)),
		},
	}

	encBal, err := scale.Marshal(accInfo)
	require.NoError(t, err)

	rt.Context.Storage.Put(aliceBalanceKey, encBal)
	// this key is System.UpgradedToDualRefCount -> set to true since all accounts have been upgraded to v0.9 format
	rt.Context.Storage.Put(common.UpgradedToDualRefKey, []byte{1})

	genesisHeader := &types.Header{
		Number:    0,
		StateRoot: trie.V0.MustHash(genTrie), // Get right state version from runtime
	}

	extHex := runtime.NewTestExtrinsic(t, rt, genesisHeader.Hash(), genesisHeader.Hash(),
		0, signature.TestKeyringPairAlice, "System.remark", []byte{0xab, 0xcd})

	genesisHashBytes := genesisHeader.Hash().ToBytes()

	validateTransactionArguments := [][]byte{
		{byte(types.TxnExternal)},
		common.MustHexToBytes(extHex),
		genesisHashBytes}

	extrinsicsBytes := bytes.Join(validateTransactionArguments, nil)

	runtime.InitializeRuntimeToTest(t, rt, genesisHeader)
	_, err = rt.ValidateTransaction(extrinsicsBytes)
	require.NoError(t, err)
}

func TestInstance_GrandpaAuthorities_NodeRuntime(t *testing.T) {
	tt := trie.NewEmptyTrie()

	value, err := common.HexToBytes("0x0108eea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d714103640100000000000000b64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d7170100000000000000") //nolint:lll
	require.NoError(t, err)

	key := common.MustHexToBytes(genesis.GrandpaAuthoritiesKeyHex)
	tt.Put(key, value)

	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v0929, tt)

	auths, err := rt.GrandpaAuthorities()
	require.NoError(t, err)

	authABytes, _ := common.HexToBytes("0xeea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d71410364")
	authBBytes, _ := common.HexToBytes("0xb64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d717")

	authA, _ := ed25519.NewPublicKey(authABytes)
	authB, _ := ed25519.NewPublicKey(authBBytes)

	expected := []types.Authority{
		{Key: authA, Weight: 1},
		{Key: authB, Weight: 1},
	}

	require.Equal(t, expected, auths)
}

func TestInstance_GrandpaAuthorities_PolkadotRuntime(t *testing.T) {
	tt := trie.NewEmptyTrie()

	value, err := common.HexToBytes("0x0108eea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d714103640100000000000000b64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d7170100000000000000") //nolint:lll
	require.NoError(t, err)

	key := common.MustHexToBytes(genesis.GrandpaAuthoritiesKeyHex)
	tt.Put(key, value)

	rt := NewTestInstanceWithTrie(t, runtime.POLKADOT_RUNTIME_v0929, tt)

	auths, err := rt.GrandpaAuthorities()
	require.NoError(t, err)

	authABytes, _ := common.HexToBytes("0xeea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d71410364")
	authBBytes, _ := common.HexToBytes("0xb64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d717")

	authA, _ := ed25519.NewPublicKey(authABytes)
	authB, _ := ed25519.NewPublicKey(authBBytes)

	expected := []types.Authority{
		{Key: authA, Weight: 1},
		{Key: authB, Weight: 1},
	}

	require.Equal(t, expected, auths)
}

func TestInstance_BabeGenerateKeyOwnershipProof(t *testing.T) {
	testCases := []struct {
		name          string
		targetRuntime string
	}{
		{
			name:          "with_polkadot_runtime",
			targetRuntime: runtime.POLKADOT_RUNTIME_v0929,
		},
		{
			name:          "with_westend_runtime",
			targetRuntime: runtime.WESTEND_RUNTIME_v0929,
		},
	}
	for _, testCase := range testCases {
		testCase := testCase
		t.Run(testCase.name, func(t *testing.T) {
			tt := trie.NewEmptyTrie()

			randomnessValue, err := common.HexToHash("0x01")
			require.NoError(t, err)
			key := common.MustHexToBytes(genesis.BABERandomnessKeyHex)
			tt.Put(key, randomnessValue[:])

			authorityValue, err := common.HexToBytes("0x08eea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d714103640100000000000000b64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d7170100000000000000") //nolint:lll
			require.NoError(t, err)

			key = common.MustHexToBytes(genesis.BABEAuthoritiesKeyHex)
			tt.Put(key, authorityValue)

			rt := NewTestInstanceWithTrie(t, testCase.targetRuntime, tt)

			babeConfig, err := rt.BabeConfiguration()
			require.NoError(t, err)

			require.NotEmpty(t, babeConfig.GenesisAuthorities)

			authorityID := babeConfig.GenesisAuthorities[0].Key

			const slot = uint64(10)
			res, err := rt.BabeGenerateKeyOwnershipProof(slot, authorityID)
			require.NoError(t, err)
			require.Nil(t, res)
		})
	}
}

func TestInstance_BabeSubmitReportEquivocationUnsignedExtrinsic(t *testing.T) {
	testCases := []struct {
		name          string
		targetRuntime string
	}{
		{
			name:          "with_polkadot_runtime",
			targetRuntime: runtime.POLKADOT_RUNTIME_v0929,
		},
		{
			name:          "with_westend_runtime",
			targetRuntime: runtime.WESTEND_RUNTIME_v0929,
		},
	}
	for _, testCase := range testCases {
		testCase := testCase
		t.Run(testCase.name, func(t *testing.T) {
			tt := trie.NewEmptyTrie()
			rt := NewTestInstanceWithTrie(t, testCase.targetRuntime, tt)
			authorityID := types.AuthorityID{1}
			const slot = uint64(1)

			keyOwnershipProof := testKeyOwnershipProof

			equivocationProof := types.BabeEquivocationProof{
				Offender: authorityID,
				Slot:     slot,
			}

			err := rt.BabeSubmitReportEquivocationUnsignedExtrinsic(equivocationProof, keyOwnershipProof)
			require.NoError(t, err)
		})
	}
}

func TestInstance_BabeConfiguration_WestendRuntime_NoAuthorities(t *testing.T) {
	rt := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	cfg, err := rt.BabeConfiguration()
	require.NoError(t, err)

	expected := &types.BabeConfiguration{
		SlotDuration:       6000,
		EpochLength:        600,
		C1:                 1,
		C2:                 4,
		GenesisAuthorities: nil,
		Randomness:         [32]byte{},
		SecondarySlots:     2,
	}
	require.Equal(t, expected, cfg)
}

func TestInstance_BadSignature_WestendBlock8077850(t *testing.T) {
	tests := map[string]struct {
		setupRuntime  func(t *testing.T) (*Instance, *types.Header)
		expectedError []byte
	}{
		"westend_dev_runtime_should_fail_with_bad_signature": {
			expectedError: []byte{1, 0, 0xa},
			setupRuntime: func(t *testing.T) (*Instance, *types.Header) {
				genesisPath := utils.GetWestendDevRawGenesisPath(t)
				gen := genesisFromRawJSON(t, genesisPath)
				genTrie, err := runtime.NewTrieFromGenesis(gen)
				require.NoError(t, err)

				// set state to genesis state
				genState := storage.NewTrieState(&genTrie)

				cfg := Config{
					Storage: genState,
					LogLvl:  log.Critical,
				}

				rt, err := NewRuntimeFromGenesis(cfg)
				require.NoError(t, err)

				// reset state back to parent state before executing
				parentState := storage.NewTrieState(&genTrie)
				rt.SetContextStorage(parentState)

				genesisHeader := &types.Header{
					Number:    0,
					StateRoot: trie.V0.MustHash(genTrie), // Use right version from runtime
				}

				header := &types.Header{
					ParentHash: genesisHeader.Hash(),
					Number:     1,
					Digest:     types.NewDigest(),
				}

				return rt, header
			},
		},
		"westend_0912_runtime_should_fail_with_invalid_payment": {
			expectedError: []byte{1, 0, 1},
			setupRuntime: func(t *testing.T) (*Instance, *types.Header) {
				genesisPath := utils.GetWestendDevRawGenesisPath(t)
				gen := genesisFromRawJSON(t, genesisPath)
				genTrie, err := runtime.NewTrieFromGenesis(gen)
				require.NoError(t, err)

				rt := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0912)
				parentState := storage.NewTrieState(&genTrie)
				rt.SetContextStorage(parentState)

				genesisHeader := &types.Header{
					Number:    0,
					StateRoot: trie.V0.MustHash(genTrie), // Use right version from runtime
				}

				header := &types.Header{
					ParentHash: genesisHeader.Hash(),
					Number:     1,
					Digest:     types.NewDigest(),
				}

				return rt, header
			},
		},
	}

	for tname, tt := range tests {
		tt := tt

		t.Run(tname, func(t *testing.T) {
			instance, header := tt.setupRuntime(t)

			err := instance.InitializeBlock(header)
			require.NoError(t, err)

			idata := types.NewInherentData()
			err = idata.SetInherent(types.Timstap0, uint64(5))
			require.NoError(t, err)

			err = idata.SetInherent(types.Babeslot, uint64(1))
			require.NoError(t, err)

			ienc, err := idata.Encode()
			require.NoError(t, err)

			// Call BlockBuilder_inherent_extrinsics which returns the inherents as encoded extrinsics
			inherentExts, err := instance.InherentExtrinsics(ienc)
			require.NoError(t, err)

			// decode inherent extrinsics
			cp := make([]byte, len(inherentExts))
			copy(cp, inherentExts)
			var inExts [][]byte
			err = scale.Unmarshal(cp, &inExts)
			require.NoError(t, err)

			// apply each inherent extrinsic
			for _, inherent := range inExts {
				in, err := scale.Marshal(inherent)
				require.NoError(t, err)

				ret, err := instance.ApplyExtrinsic(in)
				require.NoError(t, err)
				require.Equal(t, ret, []byte{0, 0})
			}

			keyring, err := signature.KeyringPairFromSecret(
				"0x00000000000000000000000000000000000000000000000000000"+
					"00000000000000000000000000000000000000000000000000000"+
					"0000000000000000000000", 42)
			require.NoError(t, err)

			extHex := runtime.NewTestExtrinsic(t, instance, header.ParentHash, header.ParentHash,
				0, keyring, "System.remark", []byte{0xab, 0xcd})

			res, err := instance.ApplyExtrinsic(common.MustHexToBytes(extHex))
			require.NoError(t, err)

			// should fail with transaction validity error: invalid payment for runtime 0.9.12
			// should fail with transaction validity error: bad signature for runtime version greater than 0.9.12
			require.Equal(t, tt.expectedError, res)
		})
	}

}

func TestInstance_BabeConfiguration_WestendRuntime_WithAuthorities(t *testing.T) {
	tt := trie.NewEmptyTrie()

	randomnessValue, err := common.HexToHash("0x01")
	require.NoError(t, err)
	key := common.MustHexToBytes(genesis.BABERandomnessKeyHex)
	tt.Put(key, randomnessValue[:])

	authorityValue, err := common.HexToBytes("0x08eea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d714103640100000000000000b64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d7170100000000000000") //nolint:lll
	require.NoError(t, err)

	key = common.MustHexToBytes(genesis.BABEAuthoritiesKeyHex)
	tt.Put(key, authorityValue)

	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v0929, tt)

	cfg, err := rt.BabeConfiguration()
	require.NoError(t, err)

	authA, _ := common.HexToHash("0xeea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d71410364")
	authB, _ := common.HexToHash("0xb64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d717")

	expectedAuthData := []types.AuthorityRaw{
		{Key: authA, Weight: 1},
		{Key: authB, Weight: 1},
	}

	expected := &types.BabeConfiguration{
		SlotDuration:       6000,
		EpochLength:        600,
		C1:                 1,
		C2:                 4,
		GenesisAuthorities: expectedAuthData,
		Randomness:         [32]byte{1},
		SecondarySlots:     2,
	}

	require.Equal(t, expected, cfg)
}

func TestInstance_InitializeBlock_NodeRuntime(t *testing.T) {
	rt := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)

	header := &types.Header{
		Number: 1,
		Digest: types.NewDigest(),
	}

	err := rt.InitializeBlock(header)
	require.NoError(t, err)
}

func TestInstance_InitializeBlock_PolkadotRuntime(t *testing.T) {
	rt := NewTestInstance(t, runtime.POLKADOT_RUNTIME_v0929)

	header := &types.Header{
		Number: 1,
		Digest: types.NewDigest(),
	}

	err := rt.InitializeBlock(header)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_WestendRuntime(t *testing.T) {
	instance := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	block := runtime.InitializeRuntimeToTest(t, instance, &types.Header{})

	// reset state back to parent state before executing
	parentState := storage.NewTrieState(trie.NewEmptyTrie())
	instance.SetContextStorage(parentState)

	_, err := instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ApplyExtrinsic_WestendRuntime(t *testing.T) {
	genesisPath := utils.GetWestendDevRawGenesisPath(t)
	gen := genesisFromRawJSON(t, genesisPath)
	genTrie, err := runtime.NewTrieFromGenesis(gen)
	require.NoError(t, err)

	// set state to genesis state
	genState := storage.NewTrieState(&genTrie)

	cfg := Config{
		Storage: genState,
		LogLvl:  log.Critical,
	}

	instance, err := NewRuntimeFromGenesis(cfg)
	require.NoError(t, err)

	// reset state back to parent state before executing
	parentState := storage.NewTrieState(&genTrie)
	instance.SetContextStorage(parentState)

	genesisHeader := &types.Header{
		Number:    0,
		StateRoot: trie.V0.MustHash(genTrie), // Use right version from runtime
	}
	header := &types.Header{
		ParentHash: genesisHeader.Hash(),
		Number:     1,
		Digest:     types.NewDigest(),
	}

	err = instance.InitializeBlock(header)
	require.NoError(t, err)

	extHex := runtime.NewTestExtrinsic(t, instance, genesisHeader.Hash(), genesisHeader.Hash(),
		0, signature.TestKeyringPairAlice, "System.remark", []byte{0xab, 0xcd})

	res, err := instance.ApplyExtrinsic(common.MustHexToBytes(extHex))
	require.NoError(t, err)
	require.Equal(t, []byte{0, 0}, res)
}

func TestInstance_ExecuteBlock_PolkadotRuntime(t *testing.T) {
	DefaultTestLogLvl = 0

	instance := NewTestInstance(t, runtime.POLKADOT_RUNTIME_v0929)

	block := runtime.InitializeRuntimeToTest(t, instance, &types.Header{})

	// reset state back to parent state before executing
	parentState := storage.NewTrieState(trie.NewEmptyTrie())
	instance.SetContextStorage(parentState)

	_, err := instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_PolkadotRuntime_PolkadotBlock1(t *testing.T) {
	genesisPath := utils.GetPolkadotGenesisPath(t)
	gen := genesisFromRawJSON(t, genesisPath)
	genTrie, err := runtime.NewTrieFromGenesis(gen)
	require.NoError(t, err)

	expectedGenesisRoot := common.MustHexToHash("0x29d0d972cd27cbc511e9589fcb7a4506d5eb6a9e8df205f00472e5ab354a4e17")
	require.Equal(t, expectedGenesisRoot, trie.V0.MustHash(genTrie))

	// set state to genesis state
	genState := storage.NewTrieState(&genTrie)

	cfg := Config{
		Storage: genState,
		LogLvl:  log.Critical,
	}

	instance, err := NewRuntimeFromGenesis(cfg)
	require.NoError(t, err)

	// block data is received from querying a polkadot node
	body := []byte{8, 40, 4, 3, 0, 11, 80, 149, 160, 81, 114, 1, 16, 4, 20, 0, 0}
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 2, len(exts))

	// digest data received from querying polkadot node
	digestBytes := common.MustHexToBytes("0x0c0642414245b501010000000093decc0f00000000362ed8d6055645487fe42e9c8640be651f70a3a2a03658046b2b43f021665704501af9b1ca6e974c257e3d26609b5f68b5b0a1da53f7f252bbe5d94948c39705c98ffa4b869dd44ac29528e3723d619cc7edf1d3f7b7a57a957f6a7e9bdb270a044241424549040118fa3437b10f6e7af8f31362df3a179b991a8c56313d1bcd6307a4d0c734c1ae310100000000000000d2419bc8835493ac89eb09d5985281f5dff4bc6c7a7ea988fd23af05f301580a0100000000000000ccb6bef60defc30724545d57440394ed1c71ea7ee6d880ed0e79871a05b5e40601000000000000005e67b64cf07d4d258a47df63835121423551712844f5b67de68e36bb9a21e12701000000000000006236877b05370265640c133fec07e64d7ca823db1dc56f2d3584b3d7c0f1615801000000000000006c52d02d95c30aa567fda284acf25025ca7470f0b0c516ddf94475a1807c4d250100000000000000000000000000000000000000000000000000000000000000000000000000000005424142450101d468680c844b19194d4dfbdc6697a35bf2b494bda2c5a6961d4d4eacfbf74574379ba0d97b5bb650c2e8670a63791a727943bcb699dc7a228bdb9e0a98c9d089") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)

	// polkadot block 1, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"),
			Number:         1,
			StateRoot:      common.MustHexToHash("0xc56fcd6e7a757926ace3e1ecff9b4010fc78b90d459202a339266a7f6360002f"),
			ExtrinsicsRoot: common.MustHexToHash("0x9a87f6af64ef97aff2d31bebfdd59f8fe2ef6019278b634b2515a38f1c4c2420"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock1(t *testing.T) {
	genesisPath := utils.GetKusamaGenesisPath(t)
	gen := genesisFromRawJSON(t, genesisPath)
	genTrie, err := runtime.NewTrieFromGenesis(gen)
	require.NoError(t, err)

	expectedGenesisRoot := common.MustHexToHash("0xb0006203c3a6e6bd2c6a17b1d4ae8ca49a31da0f4579da950b127774b44aef6b")
	require.Equal(t, expectedGenesisRoot, trie.V0.MustHash(genTrie))

	// set state to genesis state
	genState := storage.NewTrieState(&genTrie)

	cfg := Config{
		Storage: genState,
		LogLvl:  log.Critical,
	}

	instance, err := NewRuntimeFromGenesis(cfg)
	require.NoError(t, err)

	// block data is received from querying a polkadot node
	body := []byte{8, 40, 4, 2, 0, 11, 144, 17, 14, 179, 110, 1, 16, 4, 20, 0, 0}
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 2, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x0c0642414245340201000000ef55a50f00000000044241424549040118ca239392960473fe1bc65f94ee27d890a49c1b200c006ff5dcc525330ecc16770100000000000000b46f01874ce7abbb5220e8fd89bede0adad14c73039d91e28e881823433e723f0100000000000000d684d9176d6eb69887540c9a89fa6097adea82fc4b0ff26d1062b488f352e179010000000000000068195a71bdde49117a616424bdc60a1733e96acb1da5aeab5d268cf2a572e94101000000000000001a0575ef4ae24bdfd31f4cb5bd61239ae67c12d4e64ae51ac756044aa6ad8200010000000000000018168f2aad0081a25728961ee00627cfe35e39833c805016632bf7c14da5800901000000000000000000000000000000000000000000000000000000000000000000000000000000054241424501014625284883e564bc1e4063f5ea2b49846cdddaa3761d04f543b698c1c3ee935c40d25b869247c36c6b8a8cbbd7bb2768f560ab7c276df3c62df357a7e3b1ec8d") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)

	// kusama block 1, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe"),
			Number:         1,
			StateRoot:      common.MustHexToHash("0xfabb0c6e92d29e8bb2167f3c6fb0ddeb956a4278a3cf853661af74a076fc9cb7"),
			ExtrinsicsRoot: common.MustHexToHash("0xa35fb7f7616f5c979d48222b3d2fa7cb2331ef73954726714d91ca945cc34fd8"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock3784(t *testing.T) {
	gossTrie3783 := newTrieFromPairs(t, "../test_data/kusama/block3783.out")
	expectedRoot := common.MustHexToHash("0x948338bc0976aee78879d559a1f42385407e5a481b05a91d2a9386aa7507e7a0")
	require.Equal(t, expectedRoot, trie.V0.MustHash(*gossTrie3783))

	// set state to genesis state
	state3783 := storage.NewTrieState(gossTrie3783)

	cfg := Config{
		Storage: state3783,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(gossTrie3783, cfg)
	require.NoError(t, err)

	// block data is received from querying a polkadot node
	body := common.MustHexToBytes("0x10280402000bb00d69b46e0114040900193b10041400009101041300eaaec5728cd6ea9160ff92a49bb45972c532d2163241746134726aaa5b2f72129d8650715320f23765c6306503669f69bf684b188dea73b1e247dd1dd166513b1c13daa387c35f24ac918d2fa772b73cffd20204a8875e48a1b11bb3229deb7f00") //nolint:lll
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 4, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x080642414245340203000000bd64a50f0000000005424142450101bc0d6850dba8d32ea1dbe26cb4ac56da6cca662c7cc642dc8eed32d2bddd65029f0721436eafeebdf9b4f17d1673c6bc6c3c51fe3dda3121a5fc60c657a5808b") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)

	// kusama block 3784, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x4843b4aa38cf2e3e2f6fae401b98dd705bed668a82dd3751dc38f1601c814ca8"),
			Number:         3784,
			StateRoot:      common.MustHexToHash("0xac44cc18ec22f0f3fca39dfe8725c0383af1c982a833e081fbb2540e46eb09a5"),
			ExtrinsicsRoot: common.MustHexToHash("0x52b7d4852fc648cb8f908901e1e36269593c25050c31718454bca74b69115d12"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock901442(t *testing.T) {
	ksmTrie901441 := newTrieFromPairs(t, "../test_data/kusama/block901441.out")
	expectedRoot := common.MustHexToHash("0x3a2ef7ee032f5810160bb8f3ffe3e3377bb6f2769ee9f79a5425973347acd504")
	require.Equal(t, expectedRoot, trie.V0.MustHash(*ksmTrie901441))

	// set state to genesis state
	state901441 := storage.NewTrieState(ksmTrie901441)

	cfg := Config{
		Storage: state901441,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(ksmTrie901441, cfg)
	require.NoError(t, err)

	body := common.MustHexToBytes("0x0c280402000b207eb80a70011c040900fa0437001004140000")
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 3, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x080642414245340244000000aeffb30f00000000054241424501011cbef2a084a774c34d9990c7bfc6b4d2d5e9f5b59feca792cd2bb89a890c2a6f09668b5e8224879f007f49f299d25fbb3c0f30d94fb8055e07fa8a4ed10f8083") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)
	require.Equal(t, 2, len(digest))

	// kusama block 901442, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x68d9c5f75225f09d7ce493eff8aabac7bae8b65cb81a2fd532a99fbb8c663931"),
			Number:         901442,
			StateRoot:      common.MustHexToHash("0x6ea065f850894c5b58cb1a73ec887e56842851943641149c57cea357cae4f596"),
			ExtrinsicsRoot: common.MustHexToHash("0x13483a4c148fff5f072e86b5af52bf031556514e9c87ea19f9e31e7b13c0c414"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock1377831(t *testing.T) {
	ksmTrie := newTrieFromPairs(t, "../test_data/kusama/block1377830.out")
	expectedRoot := common.MustHexToHash("0xe4de6fecda9e9e35f937d159665cf984bc1a68048b6c78912de0aeb6bd7f7e99")
	require.Equal(t, expectedRoot, trie.V0.MustHash(*ksmTrie))

	// set state to genesis state
	state := storage.NewTrieState(ksmTrie)

	cfg := Config{
		Storage: state,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(ksmTrie, cfg)
	require.NoError(t, err)

	body := common.MustHexToBytes("0x08280402000b60c241c070011004140000")
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 2, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x080642414245b50101020000008abebb0f00000000045553c32a949242580161bcc35d7c3e492e66defdcf4525d7a338039590012f42660acabf1952a2d5d01725601705404d6ac671507a6aa2cf09840afbdfbb006f48062dae16c56b8dc5c6ea6ffba854b7e8f46e153e98c238cbe7bbb1556f0b0542414245010136914c6832dd5ba811a975a3b654d76a1ec81684f4b03d115ce2e694feadc96411930438fde4beb008c5f8e26cfa2f5b554fa3814b5b73d31f348446fd4fd688") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)
	require.Equal(t, 2, len(digest))

	// kusama block 1377831, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0xca387b3cc045e8848277069d8794cbf077b08218c0b55f74d81dd750b14e768c"),
			Number:         1377831,
			StateRoot:      common.MustHexToHash("0x7e5569e652c4b1a3cecfcf5e5e64a97fe55071d34bab51e25626ec20cae05a02"),
			ExtrinsicsRoot: common.MustHexToHash("0x7f3ea0ed63b4053d9b75e7ee3e5b3f6ce916e8f59b7b6c5e966b7a56ea0a563a"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock1482003(t *testing.T) {
	ksmTrie := newTrieFromPairs(t, "../test_data/kusama/block1482002.out")
	expectedRoot := common.MustHexToHash("0x09f9ca28df0560c2291aa16b56e15e07d1e1927088f51356d522722aa90ca7cb")
	require.Equal(t, expectedRoot, trie.V0.MustHash(*ksmTrie))

	// set state to genesis state
	state := storage.NewTrieState(ksmTrie)

	cfg := Config{
		Storage: state,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(ksmTrie, cfg)
	require.NoError(t, err)

	body := common.MustHexToBytes("0x0c280402000b10c3e3e570011c04090042745a001004140000")
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 3, len(exts))

	// digest from polkadot.js
	digestBytes := testdata.DigestKusama1482002(t)

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)

	require.Equal(t, 4, len(digest))

	// kusama block 1482003, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x587f6da1bfa71a675f10dfa0f63edfcf168e8ece97eb5f526aaf0e8a8e82db3f"),
			Number:         1482003,
			StateRoot:      common.MustHexToHash("0xd2de750002f33968437bdd54912dd4f55c3bddc5a391a8e0b8332568e1efea8d"),
			ExtrinsicsRoot: common.MustHexToHash("0xdf5da95780b77e83ad0bf820d5838f07a0d5131aa95a75f8dfbd01fbccb300bd"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_PolkadotBlock1089328(t *testing.T) {
	dotTrie := newTrieFromPairs(t, "../test_data/polkadot/block1089327.json")
	expectedRoot := common.MustHexToHash("0x87ed9ebe7fb645d3b5b0255cc16e78ed022d9fbb52486105436e15a74557535b")
	require.Equal(t, expectedRoot, trie.V0.MustHash(*dotTrie))

	// set state to genesis state
	state := storage.NewTrieState(dotTrie)

	cfg := Config{
		Storage: state,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(dotTrie, cfg)
	require.NoError(t, err)

	body := common.MustHexToBytes("0x0c280403000be02ab6d873011004140000b90384468e34dbdcc8da24e44b0f0d34d97ccad5ce0281e465db0cc1d8e1423d50d90a018a89185c693f77b050fa35d1f80b19608b72a6e626110e835caedf949668a12b0ad7b786accf2caac0ec874941ccea9825d50b6bb5870e1400f0e56bb4c18b87a5021501001d00862e432e0cf75693899c62691ac0f48967f815add97ae85659dcde8332708551001b000cf4da8aea0e5649a8bedbc1f08e8a8c0febe50cd5b1c9ce0da2164f19aef40f01014a87a7d3673e5c80aec79973682140828a0d1c3899f4f3cc953bd02673e11a022aaa4f269e3f1a90156db29df88f780b1540b610aeb5cd347ee703c5dff48485") //nolint:lll
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 3, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x080642414245b501017b000000428edd0f00000000c4fd75c7535d8eec375d70d21cc62262247b599aa67d8a9cf2f7d1b8cb93cd1f9539f04902c33d4c0fe47f723dfed8505d31de1c04d0036a9df233ff902fce0d70060908faa4b3f481e54cbd6a52dfc20c3faac82f746d84dc03c2f824a89a0d0542414245010122041949669a56c8f11b3e3e7c803e477ad24a71ed887bc81c956b59ea8f2b30122e6042494aab60a75e0db8fdff45951e456e6053bd64eb5722600e4a13038b") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)
	require.Equal(t, 2, len(digest))

	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x21dc35454805411be396debf3e1d5aad8d6e9d0d7679cce0cc632ba8a647d07c"),
			Number:         1089328,
			StateRoot:      common.MustHexToHash("0x257b1a7f6bc0287fcbf50676dd29817f2f7ae193cb65b31962e351917406fa23"),
			ExtrinsicsRoot: common.MustHexToHash("0x950173af1d9fdcd0be5428fc3eaf05d5f34376bd3882d9a61b348fa2dc641012"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_DecodeSessionKeys(t *testing.T) {
	keys := "0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d34309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc3852042602634309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc3852042602634309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc3852042602634309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc3852042602634309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc38520426026" //nolint:lll
	pubkeys, err := common.HexToBytes(keys)
	require.NoError(t, err)

	pukeysBytes, err := scale.Marshal(pubkeys)
	require.NoError(t, err)

	instance := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	decoded, err := instance.DecodeSessionKeys(pukeysBytes)
	require.NoError(t, err)

	var decodedKeys *[]struct {
		Data []uint8
		Type [4]uint8
	}

	err = scale.Unmarshal(decoded, &decodedKeys)
	require.NoError(t, err)

	require.NotNil(t, decodedKeys)
	require.Len(t, *decodedKeys, 6)
}

func TestInstance_PaymentQueryInfo(t *testing.T) {
	tests := []struct {
		extB       []byte
		ext        string
		errMessage string
		expect     *types.RuntimeDispatchInfo
	}{
		{
			// Was made with @polkadot/api on https://github.com/danforbes/polkadot-js-scripts/tree/create-signed-tx
			ext: "0xd1018400d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d01bc2b6e35929aabd5b8bc4e5b0168c9bee59e2bb9d6098769f6683ecf73e44c776652d947a270d59f3d37eb9f9c8c17ec1b4cc473f2f9928ffdeef0f3abd43e85d502000000012844616e20466f72626573", //nolint:lll
			expect: &types.RuntimeDispatchInfo{
				Weight: 0,
				Class:  0,
				PartialFee: &scale.Uint128{
					Upper: 0,
					Lower: uint64(12800000000),
				},
			},
		},
		{
			// incomplete extrinsic
			ext:        "0x4ccde39a5684e7a56da23b22d4d9fbadb023baa19c56495432884d0640000000000000000000000000000000",
			errMessage: "running runtime function: wasm error",
		},
		{
			// incomplete extrinsic
			extB:       nil,
			errMessage: "running runtime function: wasm error",
		},
	}

	for _, test := range tests {
		var err error
		var extBytes []byte

		if test.ext == "" {
			extBytes = test.extB
		} else {
			extBytes, err = common.HexToBytes(test.ext)
			require.NoError(t, err)
		}

		ins := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
		info, err := ins.PaymentQueryInfo(extBytes)

		if test.errMessage != "" {
			assert.ErrorContains(t, err, test.errMessage)
			continue
		}
		require.NoError(t, err)

		require.NoError(t, err)
		require.NotNil(t, info)
		require.Equal(t, test.expect, info)
	}
}

func newTrieFromPairs(t *testing.T, filename string) *trie.Trie {
	data, err := os.ReadFile(filename)
	require.NoError(t, err)

	rpcPairs := make(map[string]interface{})
	err = json.Unmarshal(data, &rpcPairs)
	require.NoError(t, err)
	pairs := rpcPairs["result"].([]interface{})

	entries := make(map[string]string)
	for _, pair := range pairs {
		pairArr := pair.([]interface{})
		entries[pairArr[0].(string)] = pairArr[1].(string)
	}

	tr, err := trie.LoadFromMap(entries)
	require.NoError(t, err)
	return &tr
}

func TestInstance_TransactionPaymentCallApi_QueryCallInfo(t *testing.T) {
	ins := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	tests := []struct {
		callHex    string
		errMessage string
		expect     *types.RuntimeDispatchInfo
	}{
		{
			// call generated by using palkadot.js/api v9.5.1: api.tx.system.remark("Ed")
			// and removing first byte (encoding) and second byte (unknown)
			callHex: "0x0001084564",
			expect: &types.RuntimeDispatchInfo{
				Weight: 0,
				Class:  0,
				PartialFee: &scale.Uint128{
					Upper: 0,
					Lower: uint64(1500000000),
				},
			},
		},
		{
			// call removing encoding (first byte), polkadot.js/api v9.5.1: api.tx.system.remark("Ed")
			// polkadot.js/api returns error:  RPC-CORE: call(method: Text, data: Bytes, at?: BlockHash):
			// Bytes:: -32000: Client error: Execution failed: Execution aborted due to trap: wasm trap: wasm
			// `unreachable` instruction executed
			callHex:    "0x040001084564",
			errMessage: "running runtime function: wasm error",
		},
		{
			// call without removing any bytes, polkadot.js/api v9.5.1: api.tx.system.remark("Ed test")
			// polkadot.js/api returns error: Error: createType(Call):: findMetaCall: Unable to find Call with index
			// [44, 4]/[44,4]
			callHex:    "0x2c0400011c45642074657374",
			errMessage: "running runtime function: wasm error",
		},
	}

	for _, test := range tests {
		var err error
		var callBytes []byte

		callBytes, err = common.HexToBytes(test.callHex)
		require.NoError(t, err)

		info, err := ins.QueryCallInfo(callBytes)

		if test.errMessage != "" {
			assert.ErrorContains(t, err, test.errMessage)
			continue
		}

		require.NoError(t, err)
		require.NotNil(t, info)
		require.Equal(t, test.expect, info)
	}
}

func TestInstance_TransactionPaymentCallApi_QueryCallFeeDetails(t *testing.T) {
	ins := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	tests := []struct {
		callHex    string
		errMessage string
		expect     *types.FeeDetails
	}{
		{
			// call generated by using palkadot.js/api v9.5.1: api.tx.system.remark("Ed")
			// and removing first byte (encoding) and second byte (unknown)
			callHex: "0x0001084564",
			expect: &types.FeeDetails{
				InclusionFee: types.InclusionFee{
					BaseFee: &scale.Uint128{
						Upper: 0,
						Lower: uint64(256000000001),
					},
					LenFee: &scale.Uint128{
						Upper: 0,
						Lower: uint64(128000000000),
					},
					AdjustedWeightFee: &scale.Uint128{},
				},
				Tip: &scale.Uint128{},
			},
		},
		{
			// call removing encoding (first byte), polkadot.js/api v9.5.1: api.tx.system.remark("Ed")
			// when calling polkadot node (v0.9.29) with polkadot.js/api the node returns error:  RPC-CORE: call(
			// method: Text, data: Bytes, at?: BlockHash): Bytes:: -32000: Client error: Execution failed:
			// Execution aborted due to trap: wasm trap: wasm `unreachable` instruction executed
			callHex:    "0x040001084564",
			errMessage: "running runtime function: wasm error",
		},
		{
			// call without removing any bytes, polkadot.js/api v9.5.1: api.tx.system.remark("Ed test")
			// when calling polkadot (v0.9.29) with polkadot.js/api the node returns error: Error: createType(
			// Call):: findMetaCall: Unable to find Call with index [44, 4]/[44,4]
			callHex:    "0x18040001084564",
			errMessage: "running runtime function: wasm error",
		},
	}

	for _, test := range tests {
		extBytes, err := common.HexToBytes(test.callHex)
		require.NoError(t, err)

		details, err := ins.QueryCallFeeDetails(extBytes)

		if test.errMessage != "" {
			assert.ErrorContains(t, err, test.errMessage)
			continue
		}

		require.NoError(t, err)
		require.NotNil(t, details)
		require.Equal(t, test.expect, details)
	}
}

func TestInstance_GrandpaGenerateKeyOwnershipProof(t *testing.T) {
	instance := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	identity := common.MustHexToBytes("0x88dc3417d5058ec4b4503e0c12ea1a0a89be200fe98922423d4334014fa6b0ee")
	identityPubKey, _ := ed25519.NewPublicKey(identity)
	authorityID := identityPubKey.AsBytes()

	opaqueKeyOwnershipProof, err := instance.GrandpaGenerateKeyOwnershipProof(uint64(0), authorityID)
	// Since the input is not valid with respect to the instance, an empty proof is returned
	require.NoError(t, err)
	require.Nil(t, opaqueKeyOwnershipProof)
}

func TestInstance_GrandpaSubmitReportEquivocationUnsignedExtrinsic(t *testing.T) {
	identity := common.MustHexToBytes("0x88dc3417d5058ec4b4503e0c12ea1a0a89be200fe98922423d4334014fa6b0ee")
	identityPubKey, _ := ed25519.NewPublicKey(identity)
	runtime := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)

	keyOwnershipProofRaw := types.GrandpaOpaqueKeyOwnershipProof([]byte{64, 138, 252, 29, 127, 102, 189, 129, 207, 47,
		157, 60, 17, 138, 194, 121, 139, 92, 176, 175, 224, 16, 185, 93, 175, 251, 224, 81, 209, 61, 0, 71})
	keyOwnershipProof := scale.MustMarshal(keyOwnershipProofRaw)

	var opaqueKeyOwnershipProof types.GrandpaOpaqueKeyOwnershipProof
	err := scale.Unmarshal(keyOwnershipProof, &opaqueKeyOwnershipProof)
	require.NoError(t, err)

	firstVote := types.GrandpaVote{
		Hash:   common.MustHexToHash("0x4801b8e62d31167d30c893cc1970f6a0e289420282a4b245b75f2c46fb308af1"),
		Number: 10,
	}
	secondVote := types.GrandpaVote{
		Hash:   common.MustHexToHash("0xc314327941fdd924bc67fd72651c40aececd485ca3e878c21e02abb40feae5bd"),
		Number: 10,
	}

	firstSignatureArray := mustHexTo64BArray(t, "0xd7292caacc62504365f179892a7399f233944bf261f8a3f66260f70e0016f2d"+
		"b63922726b015c82dc7131f4730fbec61f71672a571453e51029bfb469070900f")

	secondSignatureArray := mustHexTo64BArray(t, "0xb3c408b74905dfedfffa66f99f16fe8b938fd8df76a92225228a1ca07523"+
		"0b99a2d9e173c561952e1e378b701915ca188d2c832ef92a3fab8e455f32570c0807")

	grandpaEquivocation := types.GrandpaEquivocation{
		RoundNumber:     1,
		ID:              identityPubKey.AsBytes(),
		FirstVote:       firstVote,
		FirstSignature:  firstSignatureArray,
		SecondVote:      secondVote,
		SecondSignature: secondSignatureArray,
	}
	preVoteEquivocation := types.PreVote(grandpaEquivocation)
	equivocationVote := types.NewGrandpaEquivocation()
	err = equivocationVote.SetValue(preVoteEquivocation)
	require.NoError(t, err)

	equivocationProof := types.GrandpaEquivocationProof{
		SetID:        1,
		Equivocation: *equivocationVote,
	}
	err = runtime.GrandpaSubmitReportEquivocationUnsignedExtrinsic(equivocationProof, opaqueKeyOwnershipProof)
	require.NoError(t, err)
}

func TestTrie(t *testing.T) {
	tt := trie.NewEmptyTrie()
	tt.Put([]byte("a"), make([]byte, 40))
	tt.Put([]byte("al"), make([]byte, 40))
	tt.Put([]byte("alfa"), make([]byte, 40))

	hash, err := tt.Hash()
	require.NoError(t, err)

	fmt.Printf("%s\n", hash.String()) // 0xdf1012a786cddcdfa4a8cf015e873677bc2e7a3c8b3579d9bae93117cbcfb7c1

	tt = trie.NewEmptyTrie()
	tt.Put([]byte("a"), make([]byte, 40))
	tt.Put([]byte("al"), make([]byte, 40))
	tt.Put([]byte("alfa"), make([]byte, 40))

	tt.SetVersion(trie.V1)
	hash, err = tt.Hash()
	require.NoError(t, err)

	fmt.Printf("%s\n", hash.String()) // 0x99a5fee4d1d352a6e6530ce4c965d1063abe92e2a3327da07061c6730f221583
}

func TestDebugWestendBlock14576855(t *testing.T) {
	wnd14576854StateTrie := newTrieFromRPC(t, "../test_data/14576854trie_state_data.json")
	expectedStorageRootHash := common.MustHexToHash("0xedd08c8c9453f56727a1b307d7458eb192b42830b03ef1314be104b4a6aefd9b")
	require.Equal(t, expectedStorageRootHash, trie.V0.MustHash(*wnd14576854StateTrie))

	state := storage.NewTrieState(wnd14576854StateTrie)
	cfg := Config{
		Storage: state,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(wnd14576854StateTrie, cfg)
	require.NoError(t, err)

	blockResponseBytes, err := common.HexToBytes("0x0a91140a200283b22f28a02825206b5cfd1668e117c4c1d3b49ec02a5b4731aff2c3ac1c4012a10240a65a5bad9b346fc4d86fe33eadfa0cd49d0378910b0af5e73159ed503611e35eb37903e8c4636bd5f01d9f9a18fa96949787975c9c3b78a0624ae95e3078da20c33605cf34d6de3155b72a0818608103915619964369e8599482e246a4cdf43df1a7500c0642414245b501030f0000008a22a61000000000821ded3b100e3f68e3ae8109c028e91b0d084bfa6458d5a28203e35b2d01e87bf4f8ef774929e4522b451e3abf892dbbb5aaf21ba7870db5e0efa8d481268e0159463ac6be5114cb953e7bb5d070e785b3ace95680bc6040bab4aed1575bed0708054241424501014ea332ce7e94687b6103adaf88e0fd370879926e95834ca700852fdaff0e260857572d8c7798150b0ffdf60d85d90fc6c6bf10c974606307245d4d4683b64e8e1a0b280402000b6182c93586011abb11e522042d00400c0100000000b6a695e095d905fda4aa41746c0a0752cc3559eb00687d9a13c2a01745290573f6fa11cf3569c116e125d57ec15723653e8f4cda3ec481df1e0d2938f9c3f6880c0101000000740d6868002741aad034c5ffb5dcf31db78f2bb2eb1349bb02dc17d445e9f837914ec9394d52b6d6a3301fc7597de47bc2e48f6f3965999b4ea48fa5667aa4890c01020000002a0962f0b38163dfc2ed4f18727d530d49c05b4e8dbbd1b2c3af310956651277ed247263db04acedb2076ec99b516dff7598ba1f2d328006d4eb04e4c7e7028a0c0103000000f4a8ad3422500b05b5e91f1bae5db4aaa0d576f201ef8f39104764be34b9f229e3e123aec9f98fc9a64b3c4323428bbee3fb358474e2142f273fc3218cc9248c0c0104000000a6a5ee07dafbff4e52ae279f3149d35023751e61a4174c95e3a1afd56ca3365b939b7437f87bda45bfc052a0b0a71cd731296ed6d9edbc127a8e16cdeb52ff800c0105000000b0901765a119c80051f5000b3418b88f328a425b0fbd67aaa0f48acf6347903747cd681c8c4abd4fcb04f0748de2402a3da9ba59f6da9154e07b17e0c1154f890c01060000004cf0b4ec852a062a2cc599ac764a5bd6d6afb469326cfbf736ef0399d987de06ddf842c42f03c479d683aa7c511eb5ccc8f038192ff1fb8a1e1f234446efcb8c0c01070000004aad3d5f2f24ff187a06db9b87a2affa8ac0e219b02512dfd81549bccf62b8111e9961befb215d7e05d7f9ae14f2726098dd95f971e01daac6e720fde387f08c0c01080000004263728475b9e1e48f313e9e4d10cd9a1938d3bd3a80d48ed1418657d303643fac70ba80a6cdad37746e119eb280b668455d297e3b9113edc80ac6762536d18d0c01090000002a9aef1f1b91400ba0d52126b535393ffbfa60c531265efe2bf3dee09aa6f5453a14f3d94bc7f34f3b3d931d46f4726bc87e117a7baa93dd9bb1ac8a9d41da8e0c010a0000000606a0fbaf5f6ba57bc8276aa3e4ad587a1103563d8ea806ded26c8c751fa51dc3e69b4c1f016446cc711be1172a687ee2a5c52f2cb25b9255bf95c4b0fb57810c010b00000054ef1c2e69dd06552fef2b085c4afe5ea1bede23cb912aefb3eff3a3be820f3f1852e54001c15ba05d8b038e2b72207d94c94f8550b0f02fd8c7ee44bcf4df840c010c000000a6b9492a5bc58a4ca6f975c1c50f0c8f09f6b4e842a04a767867c11cc4910f1528efe6a26579981a7d82bda20cdc346fa805703d0aff9988a61ae63443a5008a0c010d000000ca13f5d6336bf7b54351c831d51c3d3aa37c9c1b806ed5715bb72c6a3206d25c893772dac586a3b3e3a616c637947d86119aa54ee4599c4dad23d4ff2f4e7b860c010e0000000e756428f4382e4e540c46a0ea60fdb094129e0d0be80fb7494498d7e714d832c57b158de81ca0f0df736f89035e7eb7449b609adf5c80ef751fb205acac0a800c010f000000820323f879134b5ca5bdcfa4f45a6089c1f5f198633ca8f841349e0e32a6032d20612506730aa5cf0141d56e156234540548164cf1cb6837d767a14d9d5dc18b04ea03000040a65a5bad9b346fc4d86fe33eadfa0cd49d0378910b0af5e73159ed503611e3468b0e01113f2c78d4b7b20efd4bdc38627c60bb4b840c8e7476e891b505d828eb016dba1703a583c3e64688bdf97e2bc29a8b6cb499a432d237a323b1412e90e2f769655c4651e3d298ecdc2a536cb89a3a3f31a0f6441a3ae4aa51c4741d32d1cd99206627a51c448c1dbf1f50009655c98b0c1326ae38420d9515cbbcf93ec8084285c48449903c919b164453fde3c5412badebcee765a01aa1b7a8fd503519283259d37c98ecab006af925b013b57a27fe56800cda5f5feec980cb110f87030f7913bfad164bd2dcff5556e48cf06bc28bb3f1ead5200be27d95adbcac624e714e61e9b3100565ae524c326102f8bc17bd3e9e73a185b8116a9e964e665c000000e902d1eb45830486f22485d977ff49349529742a039db30cb9da5fda419c6302bfa8b6ea0b005ff08f7e128ee3e8d263926c4f682842d2eb319b09f251540a815836db74761490734e7a9fd6e677f451d30e6fe142c52655c15db683a4931659c75ac85fbf6c080661757261204411530800000000056175726101015e53dd83b63d9a65ee2906fcbeb0719f9a7a7281513441e211f448efcdfd472a80fe4cb669fa22b8499961bea7643c3586fd16d26e220cb7e5a9da8a1d07ce8b00000000d66cde001401b0b5c1ee601faedc6101d132c793fcdae39737468c9c3dcc3c57fb5b4e2f14648b002685a67f4aeca1fef16795c2c2c352b5afd91a8fe346b7f278f2fce67b8602d23eb4ca1a20f459e1557a1ccc8976dcc686873f3499262e8cd38d0e6294a4340c1fa00bc26ec9a18df5b1b14d4b90bd3c75c5d35b6dff8eeca23976de2f288301d4fa4f3d94cb63c38ea719e64ae09cd7d6eb409d8d1bc21f1a00377fb30e4118e89dd2b4fba1a538819f4dc57e5cf76e80d953ef4c04ad81918b4d68b050db8f021aba632739c7993e789b4ae276b6c933e82a644d5442443224e9fb12d499e12a41a8b4deeb4ebe503842cf8cb680e84e0e4e6898bf62a3cf722262f654cec086029c38b051968569013dc5c2fbc93db0c4bb86a3f548dc5ddff363f32fbe7704682a5dabb9e9689ba820a5f68ac31a92613e0f760d4862c41f5d97edb22e378d8a141f007d63733ead4d8c05045abe1f10fca05ca02aa44c5aafb59135a841c09afeb3965ab37903edd08c8c9453f56727a1b307d7458eb192b42830b03ef1314be104b4a6aefd9b5f6028c17d04a84ec8811461e52a44e489e67b01bfd421b1e25e002200ab433e080642414245b501030d0000008922a610000000002e1e6cadbc719c66a3a4193c2b577cce37eec5e041213ba010823a9b988da947f942254709d3786c37eebb54253f639584dd149883df229258a3ae02ee81860b5945c6ba5fb7990a0fb7ec0ff19c9d5ea8b7d613cfe7de3a8bcb4bdb8f6fed0f05424142450101266ba8cf6a2b5b86a3a1bda16be242d75b042a8dea21e57e0c265cdbc942612c9531ff2178a02871336d6e326d2a71bbb749c3dbc7e3a82ea1c2c0690a73ca8a")
	require.NoError(t, err)

	blockResponse := new(network.BlockResponseMessage)
	err = blockResponse.Decode(blockResponseBytes)
	require.NoError(t, err)

	blockData := blockResponse.BlockData[0]

	block := &types.Block{
		Header: *blockData.Header,
		Body:   *blockData.Body,
	}

	instance.version()

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestDebugWestendBlock14576856(t *testing.T) {
	wnd14576855StateTrie := newTrieFromRPC(t, "../test_data/14576855trie_state_data.json")
	expectedStorageRootHash := common.MustHexToHash("0xe8c4636bd5f01d9f9a18fa96949787975c9c3b78a0624ae95e3078da20c33605")
	require.Equal(t, expectedStorageRootHash, trie.V0.MustHash(*wnd14576855StateTrie))

	state := storage.NewTrieState(wnd14576855StateTrie)
	instance, err := NewInstanceFromTrie(wnd14576855StateTrie, Config{
		LogLvl: log.Critical,
	})
	instance.version()
	instance.SetContextStorage(state)

	require.NoError(t, err)

	blockResponseBytes, err := common.HexToBytes("0x0ade0d0a20396e794b25deac6c25bc8b5e7b00892934fea53c87bb7128983c7921d72f758112a0020283b22f28a02825206b5cfd1668e117c4c1d3b49ec02a5b4731aff2c3ac1c4062b37903d1b4e4621243629a494fc62b91c92f2d8c378e2c3a0be552af2a05dc3d0dbd7b7ad6e998c94d604101a7e147cf401b041e0ce4996f609b3f5601c77c4922a529080642414245b50103000000008b22a6100000000054741a1a0fbb59012ce3b6c28a9e37487a49113964713cb85485ac24b0b46a5d18785ae8cca9a49ebc11657be3774bca3f93d8326af163290479a77be944370c6b3b763783d6bc086da473b2438389e0d6ae31abbc4a37441b27a6516e57920f05424142450101e2629d073bca188b537fd4715da7f0d3c0be8474a01935f7c25e1c5f374bde742e99423d97698db3975ebbd40819ea352f6d1d1f510dc761c9a623cf3a8975831a0b280402000bd099c93586011a890b1d16042d00400c040000000076b8399ace2a50d5b6fd5cbf464b048178c6fffa047702a416f3d8c8d264ad4a41a4853dc73e37dd91dfaec5d0d41dc01a542a13232cfc56b9372ffcbb83ef840c0401000000d2f839d7eaa667fc2e48a16d98807290e7c10a5ecd2583f8568fcc1bb7d5351e8656146d1365c8619f3202e966877e0f5870c90ecf910ef03f0f1a3dd87266830c0402000000fa36f6a59008ff66a4229c482e8a50315fd5251fc53cd9469b6543bc4930cd2528e827a4fcef270dc9722d37ae23ac04953c4fb08725e1e6bd5615babc42dd800c04030000009497e81b8089a8189918c58c2d5f80690d07f3e0353801e9378efc5a76912b41a8d34b1dd0d93b897441dff3b8c68544bceb9cf27c6e0c83be911ba6eb9574870c04040000006adb55ddc67509b0ddff38ce482fb437d96b0faae302e2b7cf5d5979f5ec45655fafc6045104d9b0d234f42c1ed8ec35c88fe420c8ea6123b780112cb92fa4890c0405000000b80a4c5a180e71a741110b020bacbffba9082d9b76c3e8ce79714be476f144626d6757c6e0efb878754e692c8be83bc2deacd5582f96ceb4f91d68b3e0acaa8a0c0406000000ce8b4daede74064db15bc9a924bc046bde7c9cce04cae4e543266aa691225f2dfc41119900287c9fa43965f82e0e48cc54fc31bf3a06e38a29730b996931e88c0c0407000000b68e00e032c1316faf1415e81501158eba96906b35281f1ff9862dc0b92881430c8d3ae74f16054ab24b313dd3a6e26ca0e57b5206f1a0ee46deb82946a231820c0408000000902e9429fb62ea6de61b0a0da1aae498fe28b27321540848d4ef86c52d684416d3262c3f03826a92dd26eedb5b1ccc220429277822ac0531350c31e43aae90830c04090000007cb92e3ce7438b34d56f5af43af0363520ebd4810c1b8ea8fe717ff1bbcea404528a1765ae3602d3975347ea17554d34613969cdc69718e7fdc47ea7cdc159800c040a0000005ecb6f76ac28e9c9596b46f2571a8380ad0742f7dfae673544b71e7000dbd0039cd13e10fe3e5d7ae14614c5f100f2c72373ea4d2df1f6a34be831db81f62a8a0c040b0000009ca60150ef177cb3168b28470364b611825ad2d86e3e38056b79903d4639205c2799926328d205c4cc66e0f2ca832e6ff8fa4ff9f05f1b57103d63ab465190860c040c00000020aa8c3c211ca39b7d1ae912ef2045064742eb1cb04e073bdb87814386f32a40547f8ba9029d3b830052011273dd6f6bcafdad40efd031bed27fca87747bdf8d0c040d0000006e7204ad9b80e56429c17d0de2aa231dd9b933bb7469bcd124d44aa9c0406b71bedb4a7037bebf8605afb3cf904ed60f359335d9ce2fe3884129f81f4f2e0e850c040e000000a869927414a693a1ff6794fcd975a737434556b1b6970c841657aa831bb1dc1910d9ce3c27d46e59cf4355077ce2b1e76964e0ba5907f2a57a522944e6c73b8b0c040f000000b858993e3b38f0cc7a70b226a40b9a49b11d75ddd0fbf7158d66127830ddca78f50277fe22d6f5b13bf98b82fedaca5fcee11868bbbe3afe2f25ff7d57584583000040a65a5bad9b346fc4d86fe33eadfa0cd49d0378910b0af5e73159ed503611e35eb37903e8c4636bd5f01d9f9a18fa96949787975c9c3b78a0624ae95e3078da20c33605cf34d6de3155b72a0818608103915619964369e8599482e246a4cdf43df1a7500c0642414245b501030f0000008a22a61000000000821ded3b100e3f68e3ae8109c028e91b0d084bfa6458d5a28203e35b2d01e87bf4f8ef774929e4522b451e3abf892dbbb5aaf21ba7870db5e0efa8d481268e0159463ac6be5114cb953e7bb5d070e785b3ace95680bc6040bab4aed1575bed0708054241424501014ea332ce7e94687b6103adaf88e0fd370879926e95834ca700852fdaff0e260857572d8c7798150b0ffdf60d85d90fc6c6bf10c974606307245d4d4683b64e8e")
	require.NoError(t, err)

	blockResponse := new(network.BlockResponseMessage)
	err = blockResponse.Decode(blockResponseBytes)
	require.NoError(t, err)

	blockData := blockResponse.BlockData[0]

	block := &types.Block{
		Header: *blockData.Header,
		Body:   *blockData.Body,
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func newTrieFromRPC(t *testing.T, filename string) *trie.Trie {
	data, err := os.ReadFile(filename)
	require.NoError(t, err)

	encodedTrieEntries := make([]string, 0)
	err = json.Unmarshal(data, &encodedTrieEntries)
	require.NoError(t, err)

	entries := make(map[string]string, len(encodedTrieEntries))
	for _, encodedEntry := range encodedTrieEntries {
		bytesEncodedEntry := common.MustHexToBytes(encodedEntry)
		entry := trie.Entry{}
		err := scale.Unmarshal(bytesEncodedEntry, &entry)
		require.NoError(t, err)

		entries[common.BytesToHex(entry.Key)] = common.BytesToHex(entry.Value)
	}

	tr, err := trie.LoadFromMap(entries)
	require.NoError(t, err)
	return &tr
}
