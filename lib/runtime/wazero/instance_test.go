// Copyright 2021 ChainSafe Systems (ON)
// SPDX-License-Identifier: LGPL-3.0-only

package wazero_runtime

import (
	"archive/zip"
	"bytes"
	"encoding/json"
	"io"
	"math/big"
	"os"
	"path/filepath"
	"testing"

	"github.com/ChainSafe/gossamer/dot/network"
	"github.com/ChainSafe/gossamer/dot/types"
	"github.com/ChainSafe/gossamer/internal/log"
	"github.com/ChainSafe/gossamer/lib/common"
	"github.com/ChainSafe/gossamer/lib/crypto/ed25519"
	"github.com/ChainSafe/gossamer/lib/genesis"
	"github.com/ChainSafe/gossamer/lib/runtime"
	"github.com/ChainSafe/gossamer/lib/runtime/storage"
	"github.com/ChainSafe/gossamer/lib/runtime/wazero/testdata"
	"github.com/ChainSafe/gossamer/lib/trie"
	"github.com/ChainSafe/gossamer/lib/utils"
	"github.com/ChainSafe/gossamer/pkg/scale"
	"github.com/centrifuge/go-substrate-rpc-client/v4/signature"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func mustHexTo64BArray(t *testing.T, inputHex string) (outputArray [64]byte) {
	t.Helper()
	copy(outputArray[:], common.MustHexToBytes(inputHex))
	return outputArray
}

func genesisFromRawJSON(t *testing.T, jsonFilepath string) (gen genesis.Genesis) {
	t.Helper()

	fp, err := filepath.Abs(jsonFilepath)
	require.NoError(t, err)

	data, err := os.ReadFile(filepath.Clean(fp))
	require.NoError(t, err)

	err = json.Unmarshal(data, &gen)
	require.NoError(t, err)

	return gen
}

// this is generated by printing key ownership proof while running `test_generate_equivocation_report_blob`
// https://github.com/paritytech/substrate/blob/ded44948e2d5a398abcb4e342b0513cb690961bb/frame/grandpa/src/benchmarking.rs#L85
var testKeyOwnershipProof types.OpaqueKeyOwnershipProof = types.OpaqueKeyOwnershipProof([]byte{64, 138, 252, 29, 127, 102, 189, 129, 207, 47, 157, 60, 17, 138, 194, 121, 139, 92, 176, 175, 224, 16, 185, 93, 175, 251, 224, 81, 209, 61, 0, 71}) //nolint:lll

func Test_Instance_Version(t *testing.T) {
	type instanceVersioner interface {
		Version() (runtime.Version, error)
	}

	testCases := map[string]struct {
		instanceBuilder func(t *testing.T) instanceVersioner
		expectedVersion runtime.Version
	}{
		"kusama": {
			instanceBuilder: func(t *testing.T) instanceVersioner {
				genesisPath := utils.GetKusamaGenesisPath(t)
				kusamaGenesis := genesisFromRawJSON(t, genesisPath)
				genesisTrie, err := runtime.NewTrieFromGenesis(kusamaGenesis)
				require.NoError(t, err)

				cfg := Config{
					Storage: storage.NewTrieState(&genesisTrie),
					LogLvl:  log.Critical,
				}

				instance, err := NewRuntimeFromGenesis(cfg)
				require.NoError(t, err)
				return instance
			},
			expectedVersion: runtime.Version{
				SpecName:         []byte("kusama"),
				ImplName:         []byte("parity-kusama"),
				AuthoringVersion: 2,
				SpecVersion:      1020,
				ImplVersion:      0,
				APIItems: []runtime.APIItem{
					{Name: [8]uint8{0xdf, 0x6a, 0xcb, 0x68, 0x99, 0x7, 0x60, 0x9b}, Ver: 0x2},
					{Name: [8]uint8{0x37, 0xe3, 0x97, 0xfc, 0x7c, 0x91, 0xf5, 0xe4}, Ver: 0x1},
					{Name: [8]uint8{0x40, 0xfe, 0x3a, 0xd4, 0x1, 0xf8, 0x95, 0x9a}, Ver: 0x4},
					{Name: [8]uint8{0xd2, 0xbc, 0x98, 0x97, 0xee, 0xd0, 0x8f, 0x15}, Ver: 0x1},
					{Name: [8]uint8{0xf7, 0x8b, 0x27, 0x8b, 0xe5, 0x3f, 0x45, 0x4c}, Ver: 0x1},
					{Name: [8]uint8{0xaf, 0x2c, 0x2, 0x97, 0xa2, 0x3e, 0x6d, 0x3d}, Ver: 0x1},
					{Name: [8]uint8{0xed, 0x99, 0xc5, 0xac, 0xb2, 0x5e, 0xed, 0xf5}, Ver: 0x2},
					{Name: [8]uint8{0xcb, 0xca, 0x25, 0xe3, 0x9f, 0x14, 0x23, 0x87}, Ver: 0x1},
					{Name: [8]uint8{0x68, 0x7a, 0xd4, 0x4a, 0xd3, 0x7f, 0x3, 0xc2}, Ver: 0x1},
					{Name: [8]uint8{0xab, 0x3c, 0x5, 0x72, 0x29, 0x1f, 0xeb, 0x8b}, Ver: 0x1},
					{Name: [8]uint8{0xbc, 0x9d, 0x89, 0x90, 0x4f, 0x5b, 0x92, 0x3f}, Ver: 0x1},
					{Name: [8]uint8{0x37, 0xc8, 0xbb, 0x13, 0x50, 0xa9, 0xa2, 0xa8}, Ver: 0x1},
				},
			},
		},
		"polkadot_v0929": {
			instanceBuilder: func(t *testing.T) instanceVersioner {
				return NewTestInstance(t, runtime.POLKADOT_RUNTIME_v0929)
			},
			expectedVersion: runtime.Version{
				SpecName:         []byte("polkadot"),
				ImplName:         []byte("parity-polkadot"),
				AuthoringVersion: 0,
				SpecVersion:      9290,
				ImplVersion:      0,
				APIItems: []runtime.APIItem{
					{Name: [8]uint8{0xdf, 0x6a, 0xcb, 0x68, 0x99, 0x7, 0x60, 0x9b}, Ver: 0x4},
					{Name: [8]uint8{0x37, 0xe3, 0x97, 0xfc, 0x7c, 0x91, 0xf5, 0xe4}, Ver: 0x1},
					{Name: [8]uint8{0x40, 0xfe, 0x3a, 0xd4, 0x1, 0xf8, 0x95, 0x9a}, Ver: 0x6},
					{Name: [8]uint8{0x17, 0xa6, 0xbc, 0xd, 0x0, 0x62, 0xae, 0xb3}, Ver: 0x1},
					{Name: [8]uint8{0xd2, 0xbc, 0x98, 0x97, 0xee, 0xd0, 0x8f, 0x15}, Ver: 0x3},
					{Name: [8]uint8{0xf7, 0x8b, 0x27, 0x8b, 0xe5, 0x3f, 0x45, 0x4c}, Ver: 0x2},
					{Name: [8]uint8{0xaf, 0x2c, 0x2, 0x97, 0xa2, 0x3e, 0x6d, 0x3d}, Ver: 0x2},
					{Name: [8]uint8{0x49, 0xea, 0xaf, 0x1b, 0x54, 0x8a, 0xc, 0xb0}, Ver: 0x1},
					{Name: [8]uint8{0x91, 0xd5, 0xdf, 0x18, 0xb0, 0xd2, 0xcf, 0x58}, Ver: 0x1},
					{Name: [8]uint8{0xed, 0x99, 0xc5, 0xac, 0xb2, 0x5e, 0xed, 0xf5}, Ver: 0x3},
					{Name: [8]uint8{0xcb, 0xca, 0x25, 0xe3, 0x9f, 0x14, 0x23, 0x87}, Ver: 0x2},
					{Name: [8]uint8{0x68, 0x7a, 0xd4, 0x4a, 0xd3, 0x7f, 0x3, 0xc2}, Ver: 0x1},
					{Name: [8]uint8{0xab, 0x3c, 0x5, 0x72, 0x29, 0x1f, 0xeb, 0x8b}, Ver: 0x1},
					{Name: [8]uint8{0xbc, 0x9d, 0x89, 0x90, 0x4f, 0x5b, 0x92, 0x3f}, Ver: 0x1},
					{Name: [8]uint8{0x37, 0xc8, 0xbb, 0x13, 0x50, 0xa9, 0xa2, 0xa8}, Ver: 0x1},
					{Name: [8]uint8{0xf3, 0xff, 0x14, 0xd5, 0xab, 0x52, 0x70, 0x59}, Ver: 0x1},
				},
				TransactionVersion: 14,
			},
		},
		"westend_v0929": {
			instanceBuilder: func(t *testing.T) instanceVersioner {
				return NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
			},
			expectedVersion: runtime.Version{
				SpecName:         []byte("westend"),
				ImplName:         []byte("parity-westend"),
				AuthoringVersion: 2,
				SpecVersion:      9290,
				ImplVersion:      0,
				APIItems: []runtime.APIItem{
					{Name: [8]uint8{0xdf, 0x6a, 0xcb, 0x68, 0x99, 0x7, 0x60, 0x9b}, Ver: 0x4},
					{Name: [8]uint8{0x37, 0xe3, 0x97, 0xfc, 0x7c, 0x91, 0xf5, 0xe4}, Ver: 0x1},
					{Name: [8]uint8{0x40, 0xfe, 0x3a, 0xd4, 0x1, 0xf8, 0x95, 0x9a}, Ver: 0x6},
					{Name: [8]uint8{0xd2, 0xbc, 0x98, 0x97, 0xee, 0xd0, 0x8f, 0x15}, Ver: 0x3},
					{Name: [8]uint8{0xf7, 0x8b, 0x27, 0x8b, 0xe5, 0x3f, 0x45, 0x4c}, Ver: 0x2},
					{Name: [8]uint8{0xaf, 0x2c, 0x2, 0x97, 0xa2, 0x3e, 0x6d, 0x3d}, Ver: 0x2},
					{Name: [8]uint8{0x49, 0xea, 0xaf, 0x1b, 0x54, 0x8a, 0xc, 0xb0}, Ver: 0x1},
					{Name: [8]uint8{0x91, 0xd5, 0xdf, 0x18, 0xb0, 0xd2, 0xcf, 0x58}, Ver: 0x1},
					{Name: [8]uint8{0xed, 0x99, 0xc5, 0xac, 0xb2, 0x5e, 0xed, 0xf5}, Ver: 0x3},
					{Name: [8]uint8{0xcb, 0xca, 0x25, 0xe3, 0x9f, 0x14, 0x23, 0x87}, Ver: 0x2},
					{Name: [8]uint8{0x68, 0x7a, 0xd4, 0x4a, 0xd3, 0x7f, 0x3, 0xc2}, Ver: 0x1},
					{Name: [8]uint8{0xab, 0x3c, 0x5, 0x72, 0x29, 0x1f, 0xeb, 0x8b}, Ver: 0x1},
					{Name: [8]uint8{0xbc, 0x9d, 0x89, 0x90, 0x4f, 0x5b, 0x92, 0x3f}, Ver: 0x1},
					{Name: [8]uint8{0x37, 0xc8, 0xbb, 0x13, 0x50, 0xa9, 0xa2, 0xa8}, Ver: 0x1},
					{Name: [8]uint8{0xf3, 0xff, 0x14, 0xd5, 0xab, 0x52, 0x70, 0x59}, Ver: 0x1},
					{Name: [8]uint8{0x17, 0xa6, 0xbc, 0xd, 0x0, 0x62, 0xae, 0xb3}, Ver: 0x1},
				},
				TransactionVersion: 12,
			},
		},
	}

	for name, testCase := range testCases {
		testCase := testCase
		t.Run(name, func(t *testing.T) {
			instance := testCase.instanceBuilder(t)
			version, err := instance.Version()
			require.NoError(t, err)
			assert.Equal(t, testCase.expectedVersion, version)
		})
	}
}

func balanceKey(t *testing.T, pub []byte) []byte {
	h0, err := common.Twox128Hash([]byte("System"))
	require.NoError(t, err)
	h1, err := common.Twox128Hash([]byte("Account"))
	require.NoError(t, err)
	h2, err := common.Blake2b128(pub)
	require.NoError(t, err)
	return append(append(append(h0, h1...), h2...), pub...)
}

func TestWestendRuntime_ValidateTransaction(t *testing.T) {
	genesisPath := utils.GetWestendDevRawGenesisPath(t)
	gen := genesisFromRawJSON(t, genesisPath)
	genTrie, err := runtime.NewTrieFromGenesis(gen)
	require.NoError(t, err)

	// set state to genesis state
	genState := storage.NewTrieState(&genTrie)

	cfg := Config{
		Storage: genState,
		LogLvl:  log.Critical,
	}

	nodeStorage := runtime.NodeStorage{}
	nodeStorage.BaseDB = runtime.NewInMemoryDB(t)
	cfg.NodeStorage = nodeStorage

	rt, err := NewRuntimeFromGenesis(cfg)
	require.NoError(t, err)

	alicePub := common.MustHexToBytes("0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d")
	aliceBalanceKey := balanceKey(t, alicePub)

	accInfo := types.AccountInfo{
		Nonce: 0,
		Data: types.AccountData{
			Free:       scale.MustNewUint128(big.NewInt(1152921504606846976)),
			Reserved:   scale.MustNewUint128(big.NewInt(0)),
			MiscFrozen: scale.MustNewUint128(big.NewInt(0)),
			FreeFrozen: scale.MustNewUint128(big.NewInt(0)),
		},
	}

	encBal, err := scale.Marshal(accInfo)
	require.NoError(t, err)

	rt.Context.Storage.Put(aliceBalanceKey, encBal, trie.V0)
	// this key is System.UpgradedToDualRefCount -> set to true since all accounts have been upgraded to v0.9 format
	rt.Context.Storage.Put(common.UpgradedToDualRefKey, []byte{1}, trie.V0)

	genesisHeader := &types.Header{
		Number:    0,
		StateRoot: genTrie.MustHash(),
	}

	extHex := runtime.NewTestExtrinsic(t, rt, genesisHeader.Hash(), genesisHeader.Hash(),
		0, signature.TestKeyringPairAlice, "System.remark", []byte{0xab, 0xcd})

	genesisHashBytes := genesisHeader.Hash().ToBytes()

	validateTransactionArguments := [][]byte{
		{byte(types.TxnExternal)},
		common.MustHexToBytes(extHex),
		genesisHashBytes}

	extrinsicsBytes := bytes.Join(validateTransactionArguments, nil)

	runtime.InitializeRuntimeToTest(t, rt, genesisHeader)
	_, err = rt.ValidateTransaction(extrinsicsBytes)
	require.NoError(t, err)
}

func TestInstance_GrandpaAuthorities_NodeRuntime(t *testing.T) {
	tt := trie.NewEmptyTrie()

	value, err := common.HexToBytes("0x0108eea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d714103640100000000000000b64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d7170100000000000000") //nolint:lll
	require.NoError(t, err)

	key := common.MustHexToBytes(genesis.GrandpaAuthoritiesKeyHex)
	tt.Put(key, value, trie.V0)

	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v0929, tt)

	auths, err := rt.GrandpaAuthorities()
	require.NoError(t, err)

	authABytes, _ := common.HexToBytes("0xeea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d71410364")
	authBBytes, _ := common.HexToBytes("0xb64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d717")

	authA, _ := ed25519.NewPublicKey(authABytes)
	authB, _ := ed25519.NewPublicKey(authBBytes)

	expected := []types.Authority{
		{Key: authA, Weight: 1},
		{Key: authB, Weight: 1},
	}

	require.Equal(t, expected, auths)
}

func TestInstance_GrandpaAuthorities_PolkadotRuntime(t *testing.T) {
	tt := trie.NewEmptyTrie()

	value, err := common.HexToBytes("0x0108eea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d714103640100000000000000b64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d7170100000000000000") //nolint:lll
	require.NoError(t, err)

	key := common.MustHexToBytes(genesis.GrandpaAuthoritiesKeyHex)
	tt.Put(key, value, trie.V0)

	rt := NewTestInstanceWithTrie(t, runtime.POLKADOT_RUNTIME_v0929, tt)

	auths, err := rt.GrandpaAuthorities()
	require.NoError(t, err)

	authABytes, _ := common.HexToBytes("0xeea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d71410364")
	authBBytes, _ := common.HexToBytes("0xb64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d717")

	authA, _ := ed25519.NewPublicKey(authABytes)
	authB, _ := ed25519.NewPublicKey(authBBytes)

	expected := []types.Authority{
		{Key: authA, Weight: 1},
		{Key: authB, Weight: 1},
	}

	require.Equal(t, expected, auths)
}

func TestInstance_BabeGenerateKeyOwnershipProof(t *testing.T) {
	testCases := []struct {
		name          string
		targetRuntime string
	}{
		{
			name:          "with_polkadot_runtime",
			targetRuntime: runtime.POLKADOT_RUNTIME_v0929,
		},
		{
			name:          "with_westend_runtime",
			targetRuntime: runtime.WESTEND_RUNTIME_v0929,
		},
	}
	for _, testCase := range testCases {
		testCase := testCase
		t.Run(testCase.name, func(t *testing.T) {
			tt := trie.NewEmptyTrie()

			randomnessValue, err := common.HexToHash("0x01")
			require.NoError(t, err)
			key := common.MustHexToBytes(genesis.BABERandomnessKeyHex)
			tt.Put(key, randomnessValue[:], trie.V0)

			authorityValue, err := common.HexToBytes("0x08eea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d714103640100000000000000b64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d7170100000000000000") //nolint:lll
			require.NoError(t, err)

			key = common.MustHexToBytes(genesis.BABEAuthoritiesKeyHex)
			tt.Put(key, authorityValue, trie.V0)

			rt := NewTestInstanceWithTrie(t, testCase.targetRuntime, tt)

			babeConfig, err := rt.BabeConfiguration()
			require.NoError(t, err)

			require.NotEmpty(t, babeConfig.GenesisAuthorities)

			authorityID := babeConfig.GenesisAuthorities[0].Key

			const slot = uint64(10)
			res, err := rt.BabeGenerateKeyOwnershipProof(slot, authorityID)
			require.NoError(t, err)
			require.Nil(t, res)
		})
	}
}

func TestInstance_BabeSubmitReportEquivocationUnsignedExtrinsic(t *testing.T) {
	testCases := []struct {
		name          string
		targetRuntime string
	}{
		{
			name:          "with_polkadot_runtime",
			targetRuntime: runtime.POLKADOT_RUNTIME_v0929,
		},
		{
			name:          "with_westend_runtime",
			targetRuntime: runtime.WESTEND_RUNTIME_v0929,
		},
	}
	for _, testCase := range testCases {
		testCase := testCase
		t.Run(testCase.name, func(t *testing.T) {
			tt := trie.NewEmptyTrie()
			rt := NewTestInstanceWithTrie(t, testCase.targetRuntime, tt)
			authorityID := types.AuthorityID{1}
			const slot = uint64(1)

			keyOwnershipProof := testKeyOwnershipProof

			equivocationProof := types.BabeEquivocationProof{
				Offender: authorityID,
				Slot:     slot,
			}

			err := rt.BabeSubmitReportEquivocationUnsignedExtrinsic(equivocationProof, keyOwnershipProof)
			require.NoError(t, err)
		})
	}
}

func TestInstance_BabeConfiguration_WestendRuntime_NoAuthorities(t *testing.T) {
	rt := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	cfg, err := rt.BabeConfiguration()
	require.NoError(t, err)

	expected := &types.BabeConfiguration{
		SlotDuration:       6000,
		EpochLength:        600,
		C1:                 1,
		C2:                 4,
		GenesisAuthorities: nil,
		Randomness:         [32]byte{},
		SecondarySlots:     2,
	}
	require.Equal(t, expected, cfg)
}

func extractZippedState(t *testing.T, zippedFile, destPath string) {
	r, err := zip.OpenReader(zippedFile)
	require.NoError(t, err)
	defer r.Close()

	for _, f := range r.File {
		outFile, err := os.OpenFile(destPath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())
		require.NoError(t, err)

		defer outFile.Close()

		rc, err := f.Open()
		require.NoError(t, err)
		defer rc.Close()

		_, err = io.Copy(outFile, rc)
		require.NoError(t, err)

		// File extracted, no need to loop further
		return
	}
}

func TestInstance_ExecuteBlock_WestendRuntime_WestendBlock8077850(t *testing.T) {
	stateTrieFile := t.TempDir() + "block8077850.txt"
	extractZippedState(t, "../test_data/westend/block8077850.zip", stateTrieFile)

	gossTrie8077850 := newTrieFromScaledPairs(t, stateTrieFile)
	expectedRoot := common.MustHexToHash("0x731cea81940165128e1ffdfc5b4207e2ad84548377899b392dc497b1c166dc1f")

	require.Equal(t, expectedRoot, gossTrie8077850.MustHash())

	// set state to genesis state
	state8077850 := storage.NewTrieState(gossTrie8077850)
	cfg := Config{
		Storage: state8077850,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(gossTrie8077850, cfg)
	require.NoError(t, err)

	entireBlockData := []byte{10, 145, 25, 10, 32, 11, 146, 32, 18, 124, 216, 103, 54, 86, 76, 220, 10, 81, 63, 13, 190, 172, 49, 219, 250, 166, 49, 204, 47, 60, 218, 91, 89, 65, 181, 209, 63, 18, 160, 2, 175, 118, 225, 235, 187, 192, 11, 26, 115, 129, 172, 137, 84, 115, 109, 176, 65, 229, 57, 91, 74, 154, 86, 230, 224, 93, 51, 144, 254, 16, 23, 246, 106, 8, 237, 1, 111, 188, 129, 22, 65, 72, 127, 226, 37, 135, 40, 234, 64, 215, 232, 164, 70, 159, 220, 9, 183, 227, 249, 144, 40, 62, 11, 199, 211, 38, 18, 189, 86, 196, 133, 36, 243, 107, 42, 3, 255, 158, 204, 130, 202, 177, 128, 147, 36, 24, 26, 232, 5, 88, 174, 70, 249, 227, 47, 33, 96, 213, 45, 127, 8, 6, 66, 65, 66, 69, 181, 1, 3, 2, 0, 0, 0, 13, 89, 64, 16, 0, 0, 0, 0, 46, 55, 172, 197, 232, 47, 252, 200, 169, 85, 67, 49, 172, 84, 71, 147, 147, 43, 113, 218, 251, 229, 121, 96, 2, 143, 174, 52, 166, 55, 12, 39, 239, 51, 22, 241, 206, 221, 93, 193, 69, 172, 61, 24, 22, 181, 20, 76, 140, 220, 81, 163, 198, 168, 46, 159, 195, 241, 100, 239, 244, 167, 73, 14, 142, 146, 140, 196, 160, 240, 171, 238, 170, 252, 56, 153, 149, 203, 148, 192, 135, 235, 125, 78, 140, 122, 239, 179, 79, 106, 210, 178, 80, 92, 237, 9, 5, 66, 65, 66, 69, 1, 1, 194, 5, 155, 37, 93, 12, 210, 230, 125, 30, 8, 53, 22, 207, 48, 223, 175, 199, 105, 27, 105, 114, 63, 135, 226, 130, 184, 70, 200, 181, 214, 48, 180, 113, 0, 14, 143, 141, 161, 238, 41, 46, 173, 95, 46, 46, 61, 165, 158, 197, 211, 226, 30, 191, 212, 56, 163, 240, 165, 80, 127, 161, 134, 136, 26, 11, 40, 4, 2, 0, 11, 180, 32, 39, 228, 124, 1, 26, 167, 21, 149, 42, 4, 45, 0, 64, 20, 5, 0, 0, 0, 0, 244, 88, 24, 239, 152, 25, 113, 0, 202, 96, 54, 243, 229, 247, 176, 66, 54, 123, 87, 90, 125, 109, 80, 30, 57, 113, 87, 242, 22, 250, 90, 6, 167, 193, 169, 11, 30, 11, 190, 17, 141, 28, 248, 39, 240, 91, 86, 85, 2, 81, 111, 183, 225, 140, 44, 10, 47, 95, 69, 210, 203, 202, 238, 139, 20, 5, 1, 0, 0, 0, 0, 33, 98, 139, 168, 31, 87, 75, 117, 6, 26, 244, 22, 190, 139, 12, 223, 107, 73, 99, 202, 95, 235, 164, 6, 180, 253, 7, 44, 88, 187, 98, 248, 250, 89, 254, 185, 222, 8, 226, 64, 221, 210, 198, 106, 17, 143, 158, 72, 66, 115, 125, 206, 106, 137, 117, 185, 167, 144, 251, 177, 245, 23, 138, 20, 5, 2, 0, 0, 0, 106, 138, 122, 226, 15, 122, 32, 99, 29, 154, 68, 219, 203, 80, 3, 177, 55, 70, 26, 23, 69, 60, 160, 214, 40, 70, 220, 117, 23, 17, 167, 69, 117, 156, 221, 235, 69, 22, 186, 153, 251, 233, 92, 105, 173, 64, 70, 222, 204, 211, 40, 136, 243, 212, 16, 118, 167, 159, 112, 11, 20, 44, 122, 134, 20, 5, 3, 0, 0, 0, 22, 46, 74, 193, 129, 129, 103, 15, 220, 207, 207, 9, 49, 240, 87, 51, 188, 112, 50, 29, 138, 67, 129, 110, 21, 9, 239, 80, 66, 122, 79, 50, 50, 176, 137, 44, 115, 247, 28, 124, 152, 49, 112, 156, 203, 165, 190, 247, 98, 179, 183, 26, 215, 86, 18, 94, 96, 191, 107, 149, 127, 251, 249, 133, 20, 5, 4, 0, 0, 0, 234, 214, 58, 36, 153, 250, 15, 26, 201, 14, 175, 40, 78, 98, 208, 0, 152, 54, 234, 242, 212, 186, 71, 215, 229, 59, 99, 214, 184, 164, 146, 9, 198, 3, 196, 253, 199, 29, 102, 122, 33, 195, 221, 82, 184, 82, 216, 198, 49, 219, 204, 89, 102, 197, 214, 222, 244, 207, 175, 140, 138, 139, 113, 133, 20, 5, 5, 0, 0, 0, 246, 40, 137, 18, 82, 230, 239, 122, 106, 139, 113, 21, 148, 48, 107, 247, 141, 38, 202, 235, 11, 14, 64, 202, 89, 118, 255, 77, 110, 184, 186, 3, 151, 189, 29, 44, 79, 7, 215, 104, 72, 204, 166, 217, 68, 227, 237, 97, 101, 76, 247, 26, 66, 66, 151, 201, 148, 91, 20, 118, 89, 215, 35, 139, 20, 1, 6, 0, 0, 0, 124, 240, 172, 211, 154, 161, 82, 29, 142, 120, 115, 236, 105, 225, 183, 147, 177, 104, 133, 23, 161, 38, 206, 1, 164, 169, 72, 13, 90, 222, 22, 46, 194, 185, 223, 199, 92, 198, 90, 102, 161, 165, 152, 86, 45, 97, 215, 102, 179, 217, 186, 155, 79, 52, 51, 232, 166, 169, 53, 113, 209, 185, 83, 140, 20, 5, 7, 0, 0, 0, 202, 155, 108, 121, 156, 216, 29, 53, 87, 111, 239, 92, 110, 232, 116, 18, 182, 115, 207, 1, 67, 137, 42, 186, 152, 203, 49, 71, 245, 209, 253, 44, 2, 18, 217, 156, 207, 101, 215, 114, 128, 169, 154, 188, 0, 128, 50, 244, 238, 227, 249, 67, 170, 63, 89, 157, 118, 77, 249, 56, 79, 36, 46, 138, 20, 0, 8, 0, 0, 0, 114, 132, 25, 201, 23, 39, 240, 61, 106, 167, 216, 88, 188, 46, 140, 110, 157, 186, 145, 14, 68, 66, 252, 69, 6, 183, 48, 139, 202, 111, 46, 28, 105, 48, 207, 190, 62, 146, 189, 58, 251, 185, 233, 146, 109, 59, 202, 188, 120, 217, 255, 109, 60, 107, 39, 201, 14, 81, 117, 22, 125, 140, 203, 128, 20, 5, 9, 0, 0, 0, 16, 127, 40, 188, 209, 216, 6, 113, 201, 7, 111, 14, 153, 196, 187, 28, 112, 243, 51, 109, 72, 93, 6, 72, 164, 96, 205, 154, 24, 20, 2, 38, 93, 21, 183, 126, 64, 147, 142, 150, 178, 243, 221, 192, 246, 171, 66, 191, 214, 39, 0, 65, 234, 221, 78, 85, 115, 117, 28, 105, 251, 10, 117, 139, 20, 5, 10, 0, 0, 0, 146, 222, 162, 150, 12, 209, 251, 40, 120, 174, 41, 92, 211, 115, 212, 33, 75, 170, 38, 143, 49, 55, 71, 85, 103, 127, 108, 245, 106, 49, 108, 72, 46, 30, 118, 126, 71, 216, 151, 196, 24, 150, 151, 127, 110, 27, 199, 67, 81, 116, 159, 224, 196, 53, 7, 131, 82, 56, 80, 112, 179, 19, 248, 143, 20, 5, 11, 0, 0, 0, 76, 50, 55, 68, 158, 129, 149, 202, 202, 141, 202, 228, 63, 1, 49, 166, 145, 91, 144, 219, 144, 219, 30, 204, 30, 138, 142, 221, 57, 236, 130, 74, 197, 109, 236, 1, 175, 35, 85, 136, 14, 28, 228, 45, 168, 247, 253, 63, 237, 192, 217, 217, 185, 113, 212, 83, 153, 202, 157, 211, 231, 191, 53, 138, 20, 5, 12, 0, 0, 0, 126, 60, 184, 144, 83, 77, 88, 58, 66, 43, 70, 67, 197, 141, 160, 177, 160, 80, 12, 238, 51, 77, 198, 142, 16, 224, 102, 221, 235, 69, 16, 90, 146, 178, 43, 201, 66, 69, 9, 64, 220, 35, 13, 97, 90, 90, 104, 101, 135, 171, 100, 226, 239, 59, 108, 63, 253, 250, 219, 68, 3, 37, 25, 131, 20, 5, 13, 0, 0, 0, 182, 16, 222, 207, 85, 111, 10, 81, 184, 200, 168, 158, 126, 20, 127, 40, 158, 23, 118, 10, 132, 149, 251, 73, 102, 185, 236, 91, 196, 253, 44, 114, 240, 74, 249, 125, 71, 186, 252, 213, 211, 150, 109, 105, 91, 114, 252, 62, 82, 117, 128, 186, 244, 248, 144, 254, 50, 191, 23, 17, 36, 251, 64, 136, 20, 5, 14, 0, 0, 0, 182, 164, 224, 23, 213, 126, 28, 11, 100, 170, 208, 127, 147, 246, 215, 88, 61, 175, 133, 145, 84, 187, 194, 35, 143, 212, 72, 227, 178, 59, 175, 118, 9, 54, 147, 196, 235, 236, 192, 200, 232, 183, 154, 86, 193, 21, 129, 44, 247, 70, 55, 27, 2, 151, 149, 38, 113, 143, 88, 34, 29, 99, 79, 142, 20, 5, 15, 0, 0, 0, 62, 10, 132, 250, 119, 253, 166, 252, 100, 87, 78, 115, 178, 74, 102, 43, 82, 49, 23, 55, 224, 230, 226, 101, 79, 82, 44, 69, 181, 175, 171, 92, 17, 62, 158, 155, 130, 177, 224, 179, 134, 130, 222, 125, 189, 113, 205, 249, 250, 243, 248, 84, 193, 2, 32, 95, 98, 35, 76, 120, 152, 180, 215, 131, 8, 37, 8, 0, 0, 175, 118, 225, 235, 187, 192, 11, 26, 115, 129, 172, 137, 84, 115, 109, 176, 65, 229, 57, 91, 74, 154, 86, 230, 224, 93, 51, 144, 254, 16, 23, 246, 112, 58, 90, 78, 74, 0, 214, 52, 242, 221, 240, 126, 177, 243, 248, 250, 139, 82, 218, 226, 155, 163, 8, 105, 248, 182, 174, 168, 180, 104, 8, 97, 60, 115, 174, 249, 84, 132, 133, 51, 105, 238, 134, 0, 94, 24, 147, 107, 18, 126, 249, 116, 194, 88, 78, 93, 62, 98, 58, 157, 36, 87, 255, 10, 104, 29, 99, 148, 92, 152, 71, 37, 254, 168, 212, 111, 27, 213, 114, 227, 162, 229, 22, 245, 49, 115, 253, 90, 215, 191, 164, 98, 171, 221, 8, 174, 237, 29, 46, 129, 126, 171, 165, 86, 62, 242, 251, 254, 216, 246, 50, 97, 158, 218, 162, 137, 162, 156, 94, 225, 223, 140, 80, 225, 249, 20, 195, 175, 130, 68, 145, 47, 182, 111, 47, 72, 14, 86, 228, 175, 114, 54, 181, 215, 249, 172, 165, 141, 228, 32, 162, 58, 133, 184, 160, 95, 166, 138, 111, 50, 190, 35, 181, 201, 151, 144, 174, 214, 247, 70, 205, 232, 255, 255, 160, 119, 124, 119, 170, 168, 187, 61, 124, 180, 17, 100, 181, 167, 154, 14, 115, 142, 139, 239, 247, 45, 55, 69, 197, 103, 62, 42, 114, 125, 158, 78, 15, 73, 53, 175, 254, 149, 98, 19, 30, 234, 164, 182, 181, 114, 155, 175, 123, 39, 29, 132, 36, 97, 97, 11, 59, 8, 198, 202, 156, 246, 161, 2, 113, 158, 110, 103, 198, 114, 244, 73, 251, 143, 251, 60, 230, 224, 175, 50, 54, 176, 0, 0, 0, 233, 2, 172, 105, 10, 42, 119, 74, 4, 193, 25, 40, 217, 109, 200, 49, 68, 184, 108, 147, 201, 33, 176, 158, 243, 243, 139, 196, 105, 175, 104, 197, 35, 84, 22, 38, 14, 0, 239, 164, 26, 248, 187, 41, 196, 244, 107, 253, 5, 148, 149, 209, 243, 187, 244, 18, 186, 27, 60, 225, 247, 55, 79, 116, 138, 14, 234, 84, 101, 167, 102, 213, 118, 81, 144, 175, 253, 229, 43, 41, 242, 75, 241, 89, 38, 229, 165, 84, 122, 211, 202, 124, 92, 63, 207, 95, 55, 247, 101, 172, 220, 115, 8, 6, 97, 117, 114, 97, 32, 134, 44, 32, 8, 0, 0, 0, 0, 5, 97, 117, 114, 97, 1, 1, 40, 57, 30, 247, 197, 252, 101, 55, 227, 113, 208, 156, 160, 24, 42, 92, 216, 200, 252, 99, 89, 104, 210, 134, 232, 49, 50, 126, 218, 196, 39, 78, 73, 201, 88, 216, 63, 32, 181, 239, 27, 23, 111, 180, 91, 163, 106, 162, 102, 126, 16, 73, 116, 152, 242, 235, 186, 228, 129, 139, 111, 253, 168, 141, 0, 0, 0, 0, 25, 66, 123, 0, 12, 1, 0, 160, 139, 229, 62, 216, 203, 144, 104, 17, 69, 8, 79, 40, 19, 37, 65, 98, 238, 73, 185, 234, 144, 224, 78, 98, 104, 215, 20, 97, 113, 60, 239, 66, 39, 44, 80, 81, 224, 254, 129, 109, 119, 184, 63, 28, 190, 119, 112, 238, 179, 136, 20, 233, 244, 254, 23, 203, 151, 182, 254, 203, 165, 136, 2, 134, 197, 223, 40, 200, 200, 162, 89, 231, 163, 172, 221, 191, 55, 58, 167, 77, 22, 85, 255, 73, 105, 125, 80, 231, 48, 83, 38, 139, 167, 57, 62, 106, 59, 156, 112, 90, 145, 226, 224, 201, 221, 155, 223, 122, 13, 226, 205, 123, 86, 136, 74, 191, 231, 106, 61, 132, 231, 98, 154, 73, 197, 94, 143, 1, 240, 142, 190, 26, 77, 110, 2, 244, 142, 218, 128, 63, 37, 92, 68, 234, 247, 36, 166, 156, 207, 219, 68, 93, 34, 60, 184, 52, 46, 54, 114, 5, 224, 208, 181, 28, 158, 79, 46, 188, 111, 9, 171, 140, 58, 104, 94, 167, 73, 108, 105, 9, 46, 47, 162, 237, 54, 248, 164, 11, 238, 79, 96, 140, 12, 7, 54, 8, 0, 0, 175, 118, 225, 235, 187, 192, 11, 26, 115, 129, 172, 137, 84, 115, 109, 176, 65, 229, 57, 91, 74, 154, 86, 230, 224, 93, 51, 144, 254, 16, 23, 246, 146, 152, 92, 218, 164, 118, 97, 235, 181, 172, 190, 80, 136, 159, 123, 129, 105, 31, 108, 6, 13, 240, 118, 154, 219, 73, 79, 100, 218, 62, 87, 11, 240, 240, 73, 35, 226, 192, 112, 65, 155, 19, 52, 40, 246, 195, 42, 4, 206, 47, 11, 185, 116, 228, 12, 168, 125, 32, 228, 4, 146, 10, 156, 67, 152, 173, 126, 206, 160, 177, 56, 60, 11, 212, 71, 123, 183, 130, 92, 32, 240, 189, 45, 59, 194, 110, 168, 126, 76, 166, 48, 250, 50, 223, 215, 156, 234, 4, 18, 122, 21, 42, 232, 20, 168, 183, 254, 211, 180, 175, 78, 253, 172, 39, 197, 89, 23, 92, 202, 87, 206, 182, 159, 112, 144, 45, 179, 205, 28, 21, 138, 241, 252, 127, 198, 2, 222, 167, 240, 150, 193, 91, 158, 10, 198, 144, 131, 98, 241, 180, 104, 31, 94, 2, 114, 54, 18, 40, 174, 94, 104, 19, 30, 203, 169, 164, 4, 249, 94, 239, 87, 56, 128, 183, 187, 131, 192, 226, 135, 47, 98, 139, 26, 34, 173, 63, 146, 16, 146, 183, 225, 134, 30, 168, 221, 138, 200, 100, 57, 156, 189, 187, 192, 223, 138, 33, 149, 30, 80, 24, 69, 233, 176, 177, 182, 48, 209, 125, 238, 107, 149, 97, 180, 134, 105, 11, 49, 138, 17, 233, 236, 131, 88, 50, 63, 24, 58, 218, 5, 84, 87, 101, 91, 164, 221, 29, 25, 226, 80, 26, 217, 109, 34, 91, 43, 217, 0, 0, 0, 225, 2, 181, 231, 10, 56, 62, 156, 230, 221, 14, 56, 109, 162, 136, 91, 149, 254, 181, 164, 179, 56, 209, 216, 245, 251, 211, 178, 213, 56, 49, 223, 253, 111, 121, 22, 214, 154, 192, 47, 193, 75, 27, 57, 151, 217, 92, 239, 142, 185, 134, 183, 249, 236, 22, 241, 141, 104, 3, 130, 230, 184, 211, 49, 136, 15, 69, 158, 149, 35, 4, 228, 125, 116, 200, 85, 188, 161, 117, 239, 242, 122, 231, 208, 234, 231, 170, 54, 4, 246, 141, 113, 29, 162, 14, 85, 108, 174, 238, 132, 8, 6, 97, 117, 114, 97, 32, 134, 44, 32, 8, 0, 0, 0, 0, 5, 97, 117, 114, 97, 1, 1, 108, 251, 167, 35, 120, 146, 115, 29, 12, 128, 245, 15, 82, 66, 228, 86, 200, 227, 202, 152, 108, 101, 59, 133, 134, 140, 252, 156, 212, 85, 64, 20, 27, 211, 210, 186, 167, 156, 1, 191, 25, 153, 42, 104, 192, 82, 56, 108, 105, 99, 27, 102, 248, 252, 212, 124, 86, 206, 226, 38, 6, 70, 171, 142, 0, 0, 0, 0, 25, 66, 123, 0, 8, 1, 68, 219, 120, 157, 247, 162, 60, 48, 60, 99, 72, 115, 67, 63, 153, 15, 252, 153, 199, 7, 189, 199, 58, 46, 10, 86, 41, 227, 188, 72, 246, 4, 83, 244, 105, 193, 127, 140, 227, 239, 56, 245, 124, 87, 216, 164, 166, 144, 107, 40, 176, 40, 137, 79, 33, 230, 82, 127, 181, 37, 72, 41, 147, 138, 2, 68, 49, 73, 231, 222, 99, 247, 86, 246, 67, 6, 142, 82, 1, 197, 16, 55, 77, 222, 17, 99, 110, 25, 124, 42, 177, 76, 84, 21, 232, 99, 12, 131, 15, 33, 179, 198, 109, 139, 31, 144, 213, 138, 220, 1, 65, 12, 154, 120, 6, 71, 185, 184, 44, 240, 35, 151, 253, 112, 83, 2, 91, 114, 138, 12, 3, 0, 246, 216, 92, 103, 88, 45, 98, 187, 149, 189, 55, 94, 250, 40, 99, 140, 220, 37, 229, 34, 240, 3, 41, 170, 15, 4, 77, 245, 108, 228, 167, 96, 102, 8, 237, 1, 115, 28, 234, 129, 148, 1, 101, 18, 142, 31, 253, 252, 91, 66, 7, 226, 173, 132, 84, 131, 119, 137, 155, 57, 45, 196, 151, 177, 193, 102, 220, 31, 133, 232, 162, 144, 38, 133, 83, 170, 65, 18, 246, 24, 5, 193, 167, 217, 127, 79, 125, 77, 243, 98, 31, 193, 187, 14, 26, 198, 243, 44, 131, 6, 8, 6, 66, 65, 66, 69, 181, 1, 3, 5, 0, 0, 0, 12, 89, 64, 16, 0, 0, 0, 0, 58, 102, 213, 95, 227, 27, 5, 141, 153, 63, 92, 162, 176, 229, 244, 17, 31, 226, 40, 0, 121, 158, 27, 23, 245, 67, 152, 83, 58, 113, 158, 82, 126, 103, 120, 164, 98, 178, 148, 152, 155, 46, 68, 9, 252, 128, 62, 37, 112, 183, 117, 30, 29, 147, 22, 63, 160, 179, 155, 116, 47, 204, 92, 12, 86, 79, 97, 43, 223, 216, 196, 122, 119, 152, 83, 155, 212, 73, 145, 42, 133, 106, 86, 163, 99, 39, 62, 75, 113, 54, 8, 252, 208, 202, 82, 8, 5, 66, 65, 66, 69, 1, 1, 44, 114, 48, 165, 157, 36, 194, 83, 104, 47, 128, 136, 158, 247, 92, 166, 10, 243, 174, 36, 103, 104, 100, 71, 98, 84, 109, 67, 140, 35, 132, 20, 150, 17, 47, 5, 190, 188, 210, 7, 172, 127, 20, 55, 53, 102, 190, 148, 206, 241, 116, 49, 18, 123, 195, 249, 93, 35, 126, 238, 5, 171, 233, 138, 26, 146, 1, 65, 2, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 68, 211, 237, 210, 119, 8, 83, 243, 27, 94, 38, 113, 202, 174, 146, 68, 202, 114, 24, 94, 232, 254, 98, 159, 190, 53, 121, 147, 146, 233, 108, 19, 96, 143, 11, 58, 36, 149, 57, 203, 238, 189, 204, 2, 18, 234, 19, 154, 83, 105, 239, 129, 17, 85, 122, 33, 57, 48, 207, 65, 193, 218, 60, 131, 69, 1, 0, 0, 18, 2, 4, 59, 106, 39, 188, 206, 182, 164, 45, 98, 163, 168, 208, 42, 111, 13, 115, 101, 50, 21, 119, 29, 226, 67, 166, 58, 192, 72, 161, 139, 89, 218, 41, 1, 0, 0, 0, 0, 0}
	blockResponseData := new(network.BlockResponseMessage)
	err = blockResponseData.Decode(entireBlockData)
	require.NoError(t, err)

	block := &types.Block{
		Header: *blockResponseData.BlockData[0].Header,
		Body:   *blockResponseData.BlockData[0].Body,
	}

	exts, err := block.Body.AsEncodedExtrinsics()
	require.NoError(t, err)

	expectedExtrinsics := []string{
		"0x8bea0528dc1e7b07896a36d6d2ecb86c6cccbda21064089b5212a081d8b62631",
		"0xc0014ff921c3bf55333621237f3058af2d2a696bddf5f703338a7c3b11c1965f",
		"0x41b93a99fee24501ddeb1cc2dcfbec938c99a3d94531c7e16b4f4e102a9df38a",
	}

	bodyExtrinsicHashes := []string{}
	for _, ext := range exts {
		bodyExtrinsicHashes = append(bodyExtrinsicHashes, ext.Hash().String())
	}

	require.Equal(t, expectedExtrinsics, bodyExtrinsicHashes)

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)

}

func TestInstance_BabeConfiguration_WestendRuntime_WithAuthorities(t *testing.T) {
	tt := trie.NewEmptyTrie()

	randomnessValue, err := common.HexToHash("0x01")
	require.NoError(t, err)
	key := common.MustHexToBytes(genesis.BABERandomnessKeyHex)
	tt.Put(key, randomnessValue[:], trie.V0)

	authorityValue, err := common.HexToBytes("0x08eea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d714103640100000000000000b64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d7170100000000000000") //nolint:lll
	require.NoError(t, err)

	key = common.MustHexToBytes(genesis.BABEAuthoritiesKeyHex)
	tt.Put(key, authorityValue, trie.V0)

	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v0929, tt)

	cfg, err := rt.BabeConfiguration()
	require.NoError(t, err)

	authA, _ := common.HexToHash("0xeea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d71410364")
	authB, _ := common.HexToHash("0xb64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d717")

	expectedAuthData := []types.AuthorityRaw{
		{Key: authA, Weight: 1},
		{Key: authB, Weight: 1},
	}

	expected := &types.BabeConfiguration{
		SlotDuration:       6000,
		EpochLength:        600,
		C1:                 1,
		C2:                 4,
		GenesisAuthorities: expectedAuthData,
		Randomness:         [32]byte{1},
		SecondarySlots:     2,
	}

	require.Equal(t, expected, cfg)
}

func TestInstance_InitializeBlock_NodeRuntime(t *testing.T) {
	rt := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)

	header := &types.Header{
		Number: 1,
		Digest: types.NewDigest(),
	}

	err := rt.InitializeBlock(header)
	require.NoError(t, err)
}

func TestInstance_InitializeBlock_PolkadotRuntime(t *testing.T) {
	rt := NewTestInstance(t, runtime.POLKADOT_RUNTIME_v0929)

	header := &types.Header{
		Number: 1,
		Digest: types.NewDigest(),
	}

	err := rt.InitializeBlock(header)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_WestendRuntime(t *testing.T) {
	instance := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	block := runtime.InitializeRuntimeToTest(t, instance, &types.Header{})

	// reset state back to parent state before executing
	parentState := storage.NewTrieState(nil)
	instance.SetContextStorage(parentState)

	_, err := instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ApplyExtrinsic_WestendRuntime(t *testing.T) {
	genesisPath := utils.GetWestendDevRawGenesisPath(t)
	gen := genesisFromRawJSON(t, genesisPath)
	genTrie, err := runtime.NewTrieFromGenesis(gen)
	require.NoError(t, err)

	// set state to genesis state
	genState := storage.NewTrieState(&genTrie)

	cfg := Config{
		Storage: genState,
		LogLvl:  log.Critical,
	}

	instance, err := NewRuntimeFromGenesis(cfg)
	require.NoError(t, err)

	// reset state back to parent state before executing
	parentState := storage.NewTrieState(&genTrie)
	instance.SetContextStorage(parentState)

	genesisHeader := &types.Header{
		Number:    0,
		StateRoot: genTrie.MustHash(),
	}
	header := &types.Header{
		ParentHash: genesisHeader.Hash(),
		Number:     1,
		Digest:     types.NewDigest(),
	}

	err = instance.InitializeBlock(header)
	require.NoError(t, err)

	extHex := runtime.NewTestExtrinsic(t, instance, genesisHeader.Hash(), genesisHeader.Hash(),
		0, signature.TestKeyringPairAlice, "System.remark", []byte{0xab, 0xcd})

	res, err := instance.ApplyExtrinsic(common.MustHexToBytes(extHex))
	require.NoError(t, err)
	require.Equal(t, []byte{0, 0}, res)
}

func TestInstance_ExecuteBlock_PolkadotRuntime(t *testing.T) {
	DefaultTestLogLvl = 0

	instance := NewTestInstance(t, runtime.POLKADOT_RUNTIME_v0929)

	block := runtime.InitializeRuntimeToTest(t, instance, &types.Header{})

	// reset state back to parent state before executing
	parentState := storage.NewTrieState(nil)
	instance.SetContextStorage(parentState)

	_, err := instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_PolkadotRuntime_PolkadotBlock1(t *testing.T) {
	genesisPath := utils.GetPolkadotGenesisPath(t)
	gen := genesisFromRawJSON(t, genesisPath)
	genTrie, err := runtime.NewTrieFromGenesis(gen)
	require.NoError(t, err)

	expectedGenesisRoot := common.MustHexToHash("0x29d0d972cd27cbc511e9589fcb7a4506d5eb6a9e8df205f00472e5ab354a4e17")
	require.Equal(t, expectedGenesisRoot, genTrie.MustHash())

	// set state to genesis state
	genState := storage.NewTrieState(&genTrie)

	cfg := Config{
		Storage: genState,
		LogLvl:  log.Critical,
	}

	instance, err := NewRuntimeFromGenesis(cfg)
	require.NoError(t, err)

	// block data is received from querying a polkadot node
	body := []byte{8, 40, 4, 3, 0, 11, 80, 149, 160, 81, 114, 1, 16, 4, 20, 0, 0}
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 2, len(exts))

	// digest data received from querying polkadot node
	digestBytes := common.MustHexToBytes("0x0c0642414245b501010000000093decc0f00000000362ed8d6055645487fe42e9c8640be651f70a3a2a03658046b2b43f021665704501af9b1ca6e974c257e3d26609b5f68b5b0a1da53f7f252bbe5d94948c39705c98ffa4b869dd44ac29528e3723d619cc7edf1d3f7b7a57a957f6a7e9bdb270a044241424549040118fa3437b10f6e7af8f31362df3a179b991a8c56313d1bcd6307a4d0c734c1ae310100000000000000d2419bc8835493ac89eb09d5985281f5dff4bc6c7a7ea988fd23af05f301580a0100000000000000ccb6bef60defc30724545d57440394ed1c71ea7ee6d880ed0e79871a05b5e40601000000000000005e67b64cf07d4d258a47df63835121423551712844f5b67de68e36bb9a21e12701000000000000006236877b05370265640c133fec07e64d7ca823db1dc56f2d3584b3d7c0f1615801000000000000006c52d02d95c30aa567fda284acf25025ca7470f0b0c516ddf94475a1807c4d250100000000000000000000000000000000000000000000000000000000000000000000000000000005424142450101d468680c844b19194d4dfbdc6697a35bf2b494bda2c5a6961d4d4eacfbf74574379ba0d97b5bb650c2e8670a63791a727943bcb699dc7a228bdb9e0a98c9d089") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)

	// polkadot block 1, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"),
			Number:         1,
			StateRoot:      common.MustHexToHash("0xc56fcd6e7a757926ace3e1ecff9b4010fc78b90d459202a339266a7f6360002f"),
			ExtrinsicsRoot: common.MustHexToHash("0x9a87f6af64ef97aff2d31bebfdd59f8fe2ef6019278b634b2515a38f1c4c2420"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock1(t *testing.T) {
	genesisPath := utils.GetKusamaGenesisPath(t)
	gen := genesisFromRawJSON(t, genesisPath)
	genTrie, err := runtime.NewTrieFromGenesis(gen)
	require.NoError(t, err)

	expectedGenesisRoot := common.MustHexToHash("0xb0006203c3a6e6bd2c6a17b1d4ae8ca49a31da0f4579da950b127774b44aef6b")
	require.Equal(t, expectedGenesisRoot, genTrie.MustHash())

	// set state to genesis state
	genState := storage.NewTrieState(&genTrie)

	cfg := Config{
		Storage: genState,
		LogLvl:  log.Critical,
	}

	instance, err := NewRuntimeFromGenesis(cfg)
	require.NoError(t, err)

	// block data is received from querying a polkadot node
	body := []byte{8, 40, 4, 2, 0, 11, 144, 17, 14, 179, 110, 1, 16, 4, 20, 0, 0}
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 2, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x0c0642414245340201000000ef55a50f00000000044241424549040118ca239392960473fe1bc65f94ee27d890a49c1b200c006ff5dcc525330ecc16770100000000000000b46f01874ce7abbb5220e8fd89bede0adad14c73039d91e28e881823433e723f0100000000000000d684d9176d6eb69887540c9a89fa6097adea82fc4b0ff26d1062b488f352e179010000000000000068195a71bdde49117a616424bdc60a1733e96acb1da5aeab5d268cf2a572e94101000000000000001a0575ef4ae24bdfd31f4cb5bd61239ae67c12d4e64ae51ac756044aa6ad8200010000000000000018168f2aad0081a25728961ee00627cfe35e39833c805016632bf7c14da5800901000000000000000000000000000000000000000000000000000000000000000000000000000000054241424501014625284883e564bc1e4063f5ea2b49846cdddaa3761d04f543b698c1c3ee935c40d25b869247c36c6b8a8cbbd7bb2768f560ab7c276df3c62df357a7e3b1ec8d") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)

	// kusama block 1, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe"),
			Number:         1,
			StateRoot:      common.MustHexToHash("0xfabb0c6e92d29e8bb2167f3c6fb0ddeb956a4278a3cf853661af74a076fc9cb7"),
			ExtrinsicsRoot: common.MustHexToHash("0xa35fb7f7616f5c979d48222b3d2fa7cb2331ef73954726714d91ca945cc34fd8"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock3784(t *testing.T) {
	gossTrie3783 := newTrieFromPairs(t, "../test_data/kusama/block3783.out")
	expectedRoot := common.MustHexToHash("0x948338bc0976aee78879d559a1f42385407e5a481b05a91d2a9386aa7507e7a0")
	require.Equal(t, expectedRoot, gossTrie3783.MustHash())

	// set state to genesis state
	state3783 := storage.NewTrieState(gossTrie3783)

	cfg := Config{
		Storage: state3783,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(gossTrie3783, cfg)
	require.NoError(t, err)

	// block data is received from querying a polkadot node
	body := common.MustHexToBytes("0x10280402000bb00d69b46e0114040900193b10041400009101041300eaaec5728cd6ea9160ff92a49bb45972c532d2163241746134726aaa5b2f72129d8650715320f23765c6306503669f69bf684b188dea73b1e247dd1dd166513b1c13daa387c35f24ac918d2fa772b73cffd20204a8875e48a1b11bb3229deb7f00") //nolint:lll
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 4, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x080642414245340203000000bd64a50f0000000005424142450101bc0d6850dba8d32ea1dbe26cb4ac56da6cca662c7cc642dc8eed32d2bddd65029f0721436eafeebdf9b4f17d1673c6bc6c3c51fe3dda3121a5fc60c657a5808b") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)

	// kusama block 3784, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x4843b4aa38cf2e3e2f6fae401b98dd705bed668a82dd3751dc38f1601c814ca8"),
			Number:         3784,
			StateRoot:      common.MustHexToHash("0xac44cc18ec22f0f3fca39dfe8725c0383af1c982a833e081fbb2540e46eb09a5"),
			ExtrinsicsRoot: common.MustHexToHash("0x52b7d4852fc648cb8f908901e1e36269593c25050c31718454bca74b69115d12"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock901442(t *testing.T) {
	ksmTrie901441 := newTrieFromPairs(t, "../test_data/kusama/block901441.out")
	expectedRoot := common.MustHexToHash("0x3a2ef7ee032f5810160bb8f3ffe3e3377bb6f2769ee9f79a5425973347acd504")
	require.Equal(t, expectedRoot, ksmTrie901441.MustHash())

	// set state to genesis state
	state901441 := storage.NewTrieState(ksmTrie901441)

	cfg := Config{
		Storage: state901441,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(ksmTrie901441, cfg)
	require.NoError(t, err)

	body := common.MustHexToBytes("0x0c280402000b207eb80a70011c040900fa0437001004140000")
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 3, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x080642414245340244000000aeffb30f00000000054241424501011cbef2a084a774c34d9990c7bfc6b4d2d5e9f5b59feca792cd2bb89a890c2a6f09668b5e8224879f007f49f299d25fbb3c0f30d94fb8055e07fa8a4ed10f8083") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)
	require.Equal(t, 2, len(digest.Types))

	// kusama block 901442, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x68d9c5f75225f09d7ce493eff8aabac7bae8b65cb81a2fd532a99fbb8c663931"),
			Number:         901442,
			StateRoot:      common.MustHexToHash("0x6ea065f850894c5b58cb1a73ec887e56842851943641149c57cea357cae4f596"),
			ExtrinsicsRoot: common.MustHexToHash("0x13483a4c148fff5f072e86b5af52bf031556514e9c87ea19f9e31e7b13c0c414"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock1377831(t *testing.T) {
	ksmTrie := newTrieFromPairs(t, "../test_data/kusama/block1377830.out")
	expectedRoot := common.MustHexToHash("0xe4de6fecda9e9e35f937d159665cf984bc1a68048b6c78912de0aeb6bd7f7e99")
	require.Equal(t, expectedRoot, ksmTrie.MustHash())

	// set state to genesis state
	state := storage.NewTrieState(ksmTrie)

	cfg := Config{
		Storage: state,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(ksmTrie, cfg)
	require.NoError(t, err)

	body := common.MustHexToBytes("0x08280402000b60c241c070011004140000")
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 2, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x080642414245b50101020000008abebb0f00000000045553c32a949242580161bcc35d7c3e492e66defdcf4525d7a338039590012f42660acabf1952a2d5d01725601705404d6ac671507a6aa2cf09840afbdfbb006f48062dae16c56b8dc5c6ea6ffba854b7e8f46e153e98c238cbe7bbb1556f0b0542414245010136914c6832dd5ba811a975a3b654d76a1ec81684f4b03d115ce2e694feadc96411930438fde4beb008c5f8e26cfa2f5b554fa3814b5b73d31f348446fd4fd688") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)
	require.Equal(t, 2, len(digest.Types))

	// kusama block 1377831, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0xca387b3cc045e8848277069d8794cbf077b08218c0b55f74d81dd750b14e768c"),
			Number:         1377831,
			StateRoot:      common.MustHexToHash("0x7e5569e652c4b1a3cecfcf5e5e64a97fe55071d34bab51e25626ec20cae05a02"),
			ExtrinsicsRoot: common.MustHexToHash("0x7f3ea0ed63b4053d9b75e7ee3e5b3f6ce916e8f59b7b6c5e966b7a56ea0a563a"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock1482003(t *testing.T) {
	ksmTrie := newTrieFromPairs(t, "../test_data/kusama/block1482002.out")
	expectedRoot := common.MustHexToHash("0x09f9ca28df0560c2291aa16b56e15e07d1e1927088f51356d522722aa90ca7cb")
	require.Equal(t, expectedRoot, ksmTrie.MustHash())

	// set state to genesis state
	state := storage.NewTrieState(ksmTrie)

	cfg := Config{
		Storage: state,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(ksmTrie, cfg)
	require.NoError(t, err)

	body := common.MustHexToBytes("0x0c280402000b10c3e3e570011c04090042745a001004140000")
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 3, len(exts))

	// digest from polkadot.js
	digestBytes := testdata.DigestKusama1482002(t)

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)

	require.Equal(t, 4, len(digest.Types))

	// kusama block 1482003, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x587f6da1bfa71a675f10dfa0f63edfcf168e8ece97eb5f526aaf0e8a8e82db3f"),
			Number:         1482003,
			StateRoot:      common.MustHexToHash("0xd2de750002f33968437bdd54912dd4f55c3bddc5a391a8e0b8332568e1efea8d"),
			ExtrinsicsRoot: common.MustHexToHash("0xdf5da95780b77e83ad0bf820d5838f07a0d5131aa95a75f8dfbd01fbccb300bd"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_PolkadotBlock1089328(t *testing.T) {
	dotTrie := newTrieFromPairs(t, "../test_data/polkadot/block1089327.json")
	expectedRoot := common.MustHexToHash("0x87ed9ebe7fb645d3b5b0255cc16e78ed022d9fbb52486105436e15a74557535b")
	require.Equal(t, expectedRoot, dotTrie.MustHash())

	// set state to genesis state
	state := storage.NewTrieState(dotTrie)

	cfg := Config{
		Storage: state,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(dotTrie, cfg)
	require.NoError(t, err)

	body := common.MustHexToBytes("0x0c280403000be02ab6d873011004140000b90384468e34dbdcc8da24e44b0f0d34d97ccad5ce0281e465db0cc1d8e1423d50d90a018a89185c693f77b050fa35d1f80b19608b72a6e626110e835caedf949668a12b0ad7b786accf2caac0ec874941ccea9825d50b6bb5870e1400f0e56bb4c18b87a5021501001d00862e432e0cf75693899c62691ac0f48967f815add97ae85659dcde8332708551001b000cf4da8aea0e5649a8bedbc1f08e8a8c0febe50cd5b1c9ce0da2164f19aef40f01014a87a7d3673e5c80aec79973682140828a0d1c3899f4f3cc953bd02673e11a022aaa4f269e3f1a90156db29df88f780b1540b610aeb5cd347ee703c5dff48485") //nolint:lll
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 3, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x080642414245b501017b000000428edd0f00000000c4fd75c7535d8eec375d70d21cc62262247b599aa67d8a9cf2f7d1b8cb93cd1f9539f04902c33d4c0fe47f723dfed8505d31de1c04d0036a9df233ff902fce0d70060908faa4b3f481e54cbd6a52dfc20c3faac82f746d84dc03c2f824a89a0d0542414245010122041949669a56c8f11b3e3e7c803e477ad24a71ed887bc81c956b59ea8f2b30122e6042494aab60a75e0db8fdff45951e456e6053bd64eb5722600e4a13038b") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)
	require.Equal(t, 2, len(digest.Types))

	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x21dc35454805411be396debf3e1d5aad8d6e9d0d7679cce0cc632ba8a647d07c"),
			Number:         1089328,
			StateRoot:      common.MustHexToHash("0x257b1a7f6bc0287fcbf50676dd29817f2f7ae193cb65b31962e351917406fa23"),
			ExtrinsicsRoot: common.MustHexToHash("0x950173af1d9fdcd0be5428fc3eaf05d5f34376bd3882d9a61b348fa2dc641012"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_DecodeSessionKeys(t *testing.T) {
	keys := "0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d34309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc3852042602634309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc3852042602634309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc3852042602634309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc3852042602634309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc38520426026" //nolint:lll
	pubkeys, err := common.HexToBytes(keys)
	require.NoError(t, err)

	pukeysBytes, err := scale.Marshal(pubkeys)
	require.NoError(t, err)

	instance := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	decoded, err := instance.DecodeSessionKeys(pukeysBytes)
	require.NoError(t, err)

	var decodedKeys *[]struct {
		Data []uint8
		Type [4]uint8
	}

	err = scale.Unmarshal(decoded, &decodedKeys)
	require.NoError(t, err)

	require.NotNil(t, decodedKeys)
	require.Len(t, *decodedKeys, 6)
}

func TestInstance_PaymentQueryInfo(t *testing.T) {
	tests := []struct {
		extB       []byte
		ext        string
		errMessage string
		expect     *types.RuntimeDispatchInfo
	}{
		{
			// Was made with @polkadot/api on https://github.com/danforbes/polkadot-js-scripts/tree/create-signed-tx
			ext: "0xd1018400d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d01bc2b6e35929aabd5b8bc4e5b0168c9bee59e2bb9d6098769f6683ecf73e44c776652d947a270d59f3d37eb9f9c8c17ec1b4cc473f2f9928ffdeef0f3abd43e85d502000000012844616e20466f72626573", //nolint:lll
			expect: &types.RuntimeDispatchInfo{
				Weight: 0,
				Class:  0,
				PartialFee: &scale.Uint128{
					Upper: 0,
					Lower: uint64(12800000000),
				},
			},
		},
		{
			// incomplete extrinsic
			ext:        "0x4ccde39a5684e7a56da23b22d4d9fbadb023baa19c56495432884d0640000000000000000000000000000000",
			errMessage: "running runtime function: wasm error",
		},
		{
			// incomplete extrinsic
			extB:       nil,
			errMessage: "running runtime function: wasm error",
		},
	}

	for _, test := range tests {
		var err error
		var extBytes []byte

		if test.ext == "" {
			extBytes = test.extB
		} else {
			extBytes, err = common.HexToBytes(test.ext)
			require.NoError(t, err)
		}

		ins := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
		info, err := ins.PaymentQueryInfo(extBytes)

		if test.errMessage != "" {
			assert.ErrorContains(t, err, test.errMessage)
			continue
		}
		require.NoError(t, err)

		require.NoError(t, err)
		require.NotNil(t, info)
		require.Equal(t, test.expect, info)
	}
}

func newTrieFromPairs(t *testing.T, filename string) *trie.Trie {
	data, err := os.ReadFile(filename)
	require.NoError(t, err)

	rpcPairs := make(map[string]interface{})
	err = json.Unmarshal(data, &rpcPairs)
	require.NoError(t, err)
	pairs := rpcPairs["result"].([]interface{})

	entries := make(map[string]string)
	for _, pair := range pairs {
		pairArr := pair.([]interface{})
		entries[pairArr[0].(string)] = pairArr[1].(string)
	}

	tr, err := trie.LoadFromMap(entries, trie.V0)
	require.NoError(t, err)
	return &tr
}

func newTrieFromScaledPairs(t *testing.T, filename string) *trie.Trie {
	data, err := os.ReadFile(filename)
	require.NoError(t, err)

	decoded := make([][2][]byte, 0)
	err = scale.Unmarshal(data, &decoded)
	require.NoError(t, err)

	trie, err := trie.LoadFromEntries(decoded)
	if err != nil {
		panic(err)
	}

	return trie
}

func TestInstance_TransactionPaymentCallApi_QueryCallInfo(t *testing.T) {
	ins := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	tests := []struct {
		callHex    string
		errMessage string
		expect     *types.RuntimeDispatchInfo
	}{
		{
			// call generated by using palkadot.js/api v9.5.1: api.tx.system.remark("Ed")
			// and removing first byte (encoding) and second byte (unknown)
			callHex: "0x0001084564",
			expect: &types.RuntimeDispatchInfo{
				Weight: 0,
				Class:  0,
				PartialFee: &scale.Uint128{
					Upper: 0,
					Lower: uint64(1500000000),
				},
			},
		},
		{
			// call removing encoding (first byte), polkadot.js/api v9.5.1: api.tx.system.remark("Ed")
			// polkadot.js/api returns error:  RPC-CORE: call(method: Text, data: Bytes, at?: BlockHash):
			// Bytes:: -32000: Client error: Execution failed: Execution aborted due to trap: wasm trap: wasm
			// `unreachable` instruction executed
			callHex:    "0x040001084564",
			errMessage: "running runtime function: wasm error",
		},
		{
			// call without removing any bytes, polkadot.js/api v9.5.1: api.tx.system.remark("Ed test")
			// polkadot.js/api returns error: Error: createType(Call):: findMetaCall: Unable to find Call with index
			// [44, 4]/[44,4]
			callHex:    "0x2c0400011c45642074657374",
			errMessage: "running runtime function: wasm error",
		},
	}

	for _, test := range tests {
		var err error
		var callBytes []byte

		callBytes, err = common.HexToBytes(test.callHex)
		require.NoError(t, err)

		info, err := ins.QueryCallInfo(callBytes)

		if test.errMessage != "" {
			assert.ErrorContains(t, err, test.errMessage)
			continue
		}

		require.NoError(t, err)
		require.NotNil(t, info)
		require.Equal(t, test.expect, info)
	}
}

func TestInstance_TransactionPaymentCallApi_QueryCallFeeDetails(t *testing.T) {
	ins := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	tests := []struct {
		callHex    string
		errMessage string
		expect     *types.FeeDetails
	}{
		{
			// call generated by using palkadot.js/api v9.5.1: api.tx.system.remark("Ed")
			// and removing first byte (encoding) and second byte (unknown)
			callHex: "0x0001084564",
			expect: &types.FeeDetails{
				InclusionFee: types.InclusionFee{
					BaseFee: &scale.Uint128{
						Upper: 0,
						Lower: uint64(256000000001),
					},
					LenFee: &scale.Uint128{
						Upper: 0,
						Lower: uint64(128000000000),
					},
					AdjustedWeightFee: &scale.Uint128{},
				},
				Tip: &scale.Uint128{},
			},
		},
		{
			// call removing encoding (first byte), polkadot.js/api v9.5.1: api.tx.system.remark("Ed")
			// when calling polkadot node (v0.9.29) with polkadot.js/api the node returns error:  RPC-CORE: call(
			// method: Text, data: Bytes, at?: BlockHash): Bytes:: -32000: Client error: Execution failed:
			// Execution aborted due to trap: wasm trap: wasm `unreachable` instruction executed
			callHex:    "0x040001084564",
			errMessage: "running runtime function: wasm error",
		},
		{
			// call without removing any bytes, polkadot.js/api v9.5.1: api.tx.system.remark("Ed test")
			// when calling polkadot (v0.9.29) with polkadot.js/api the node returns error: Error: createType(
			// Call):: findMetaCall: Unable to find Call with index [44, 4]/[44,4]
			callHex:    "0x18040001084564",
			errMessage: "running runtime function: wasm error",
		},
	}

	for _, test := range tests {
		extBytes, err := common.HexToBytes(test.callHex)
		require.NoError(t, err)

		details, err := ins.QueryCallFeeDetails(extBytes)

		if test.errMessage != "" {
			assert.ErrorContains(t, err, test.errMessage)
			continue
		}

		require.NoError(t, err)
		require.NotNil(t, details)
		require.Equal(t, test.expect, details)
	}
}

func TestInstance_GrandpaGenerateKeyOwnershipProof(t *testing.T) {
	instance := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	identity := common.MustHexToBytes("0x88dc3417d5058ec4b4503e0c12ea1a0a89be200fe98922423d4334014fa6b0ee")
	identityPubKey, _ := ed25519.NewPublicKey(identity)
	authorityID := identityPubKey.AsBytes()

	opaqueKeyOwnershipProof, err := instance.GrandpaGenerateKeyOwnershipProof(uint64(0), authorityID)
	// Since the input is not valid with respect to the instance, an empty proof is returned
	require.NoError(t, err)
	require.Nil(t, opaqueKeyOwnershipProof)
}

func TestInstance_GrandpaSubmitReportEquivocationUnsignedExtrinsic(t *testing.T) {
	identity := common.MustHexToBytes("0x88dc3417d5058ec4b4503e0c12ea1a0a89be200fe98922423d4334014fa6b0ee")
	identityPubKey, _ := ed25519.NewPublicKey(identity)
	runtime := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)

	keyOwnershipProofRaw := types.GrandpaOpaqueKeyOwnershipProof([]byte{64, 138, 252, 29, 127, 102, 189, 129, 207, 47,
		157, 60, 17, 138, 194, 121, 139, 92, 176, 175, 224, 16, 185, 93, 175, 251, 224, 81, 209, 61, 0, 71})
	keyOwnershipProof := scale.MustMarshal(keyOwnershipProofRaw)

	var opaqueKeyOwnershipProof types.GrandpaOpaqueKeyOwnershipProof
	err := scale.Unmarshal(keyOwnershipProof, &opaqueKeyOwnershipProof)
	require.NoError(t, err)

	firstVote := types.GrandpaVote{
		Hash:   common.MustHexToHash("0x4801b8e62d31167d30c893cc1970f6a0e289420282a4b245b75f2c46fb308af1"),
		Number: 10,
	}
	secondVote := types.GrandpaVote{
		Hash:   common.MustHexToHash("0xc314327941fdd924bc67fd72651c40aececd485ca3e878c21e02abb40feae5bd"),
		Number: 10,
	}

	firstSignatureArray := mustHexTo64BArray(t, "0xd7292caacc62504365f179892a7399f233944bf261f8a3f66260f70e0016f2d"+
		"b63922726b015c82dc7131f4730fbec61f71672a571453e51029bfb469070900f")

	secondSignatureArray := mustHexTo64BArray(t, "0xb3c408b74905dfedfffa66f99f16fe8b938fd8df76a92225228a1ca07523"+
		"0b99a2d9e173c561952e1e378b701915ca188d2c832ef92a3fab8e455f32570c0807")

	grandpaEquivocation := types.GrandpaEquivocation{
		RoundNumber:     1,
		ID:              identityPubKey.AsBytes(),
		FirstVote:       firstVote,
		FirstSignature:  firstSignatureArray,
		SecondVote:      secondVote,
		SecondSignature: secondSignatureArray,
	}
	preVoteEquivocation := types.PreVote(grandpaEquivocation)
	equivocationVote := types.NewGrandpaEquivocation()
	err = equivocationVote.Set(preVoteEquivocation)
	require.NoError(t, err)

	equivocationProof := types.GrandpaEquivocationProof{
		SetID:        1,
		Equivocation: *equivocationVote,
	}
	err = runtime.GrandpaSubmitReportEquivocationUnsignedExtrinsic(equivocationProof, opaqueKeyOwnershipProof)
	require.NoError(t, err)
}
