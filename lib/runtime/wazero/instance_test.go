// Copyright 2021 ChainSafe Systems (ON)
// SPDX-License-Identifier: LGPL-3.0-only

package wazero_runtime

import (
	"bytes"
	_ "embed"
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"path/filepath"
	gruntime "runtime"
	"testing"

	"github.com/ChainSafe/gossamer/dot/network"
	"github.com/ChainSafe/gossamer/dot/types"
	"github.com/ChainSafe/gossamer/internal/database"
	"github.com/ChainSafe/gossamer/internal/log"
	"github.com/ChainSafe/gossamer/lib/common"
	"github.com/ChainSafe/gossamer/lib/crypto/ed25519"
	"github.com/ChainSafe/gossamer/lib/genesis"
	"github.com/ChainSafe/gossamer/lib/runtime"
	"github.com/ChainSafe/gossamer/lib/runtime/storage"
	"github.com/ChainSafe/gossamer/lib/runtime/wazero/testdata"
	"github.com/ChainSafe/gossamer/lib/trie"
	"github.com/ChainSafe/gossamer/lib/utils"
	"github.com/ChainSafe/gossamer/pkg/scale"
	"github.com/centrifuge/go-substrate-rpc-client/v4/signature"
	"gopkg.in/yaml.v3"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

//go:embed hex.yaml
var hex []byte

//go:embed runtime.yaml
var runtimeBlob []byte

func mustHexTo64BArray(t *testing.T, inputHex string) (outputArray [64]byte) {
	t.Helper()
	copy(outputArray[:], common.MustHexToBytes(inputHex))
	return outputArray
}

func genesisFromRawJSON(t *testing.T, jsonFilepath string) (gen genesis.Genesis) {
	t.Helper()

	fp, err := filepath.Abs(jsonFilepath)
	require.NoError(t, err)

	data, err := os.ReadFile(filepath.Clean(fp))
	require.NoError(t, err)

	err = json.Unmarshal(data, &gen)
	require.NoError(t, err)

	return gen
}

// this is generated by printing key ownership proof while running `test_generate_equivocation_report_blob`
// https://github.com/paritytech/substrate/blob/ded44948e2d5a398abcb4e342b0513cb690961bb/frame/grandpa/src/benchmarking.rs#L85
var testKeyOwnershipProof types.OpaqueKeyOwnershipProof = types.OpaqueKeyOwnershipProof([]byte{64, 138, 252, 29, 127, 102, 189, 129, 207, 47, 157, 60, 17, 138, 194, 121, 139, 92, 176, 175, 224, 16, 185, 93, 175, 251, 224, 81, 209, 61, 0, 71}) //nolint:lll

func Test_Instance_Version(t *testing.T) {
	type instanceVersioner interface {
		Version() (runtime.Version, error)
	}

	testCases := map[string]struct {
		instanceBuilder func(t *testing.T) instanceVersioner
		expectedVersion runtime.Version
	}{
		"kusama": {
			instanceBuilder: func(t *testing.T) instanceVersioner {
				genesisPath := utils.GetKusamaGenesisPath(t)
				kusamaGenesis := genesisFromRawJSON(t, genesisPath)
				genesisTrie, err := runtime.NewTrieFromGenesis(kusamaGenesis)
				require.NoError(t, err)

				cfg := Config{
					Storage: storage.NewTrieState(&genesisTrie),
					LogLvl:  log.Critical,
				}

				instance, err := NewRuntimeFromGenesis(cfg)
				require.NoError(t, err)
				return instance
			},
			expectedVersion: runtime.Version{
				SpecName:         []byte("kusama"),
				ImplName:         []byte("parity-kusama"),
				AuthoringVersion: 2,
				SpecVersion:      1020,
				ImplVersion:      0,
				APIItems: []runtime.APIItem{
					{Name: [8]uint8{0xdf, 0x6a, 0xcb, 0x68, 0x99, 0x7, 0x60, 0x9b}, Ver: 0x2},
					{Name: [8]uint8{0x37, 0xe3, 0x97, 0xfc, 0x7c, 0x91, 0xf5, 0xe4}, Ver: 0x1},
					{Name: [8]uint8{0x40, 0xfe, 0x3a, 0xd4, 0x1, 0xf8, 0x95, 0x9a}, Ver: 0x4},
					{Name: [8]uint8{0xd2, 0xbc, 0x98, 0x97, 0xee, 0xd0, 0x8f, 0x15}, Ver: 0x1},
					{Name: [8]uint8{0xf7, 0x8b, 0x27, 0x8b, 0xe5, 0x3f, 0x45, 0x4c}, Ver: 0x1},
					{Name: [8]uint8{0xaf, 0x2c, 0x2, 0x97, 0xa2, 0x3e, 0x6d, 0x3d}, Ver: 0x1},
					{Name: [8]uint8{0xed, 0x99, 0xc5, 0xac, 0xb2, 0x5e, 0xed, 0xf5}, Ver: 0x2},
					{Name: [8]uint8{0xcb, 0xca, 0x25, 0xe3, 0x9f, 0x14, 0x23, 0x87}, Ver: 0x1},
					{Name: [8]uint8{0x68, 0x7a, 0xd4, 0x4a, 0xd3, 0x7f, 0x3, 0xc2}, Ver: 0x1},
					{Name: [8]uint8{0xab, 0x3c, 0x5, 0x72, 0x29, 0x1f, 0xeb, 0x8b}, Ver: 0x1},
					{Name: [8]uint8{0xbc, 0x9d, 0x89, 0x90, 0x4f, 0x5b, 0x92, 0x3f}, Ver: 0x1},
					{Name: [8]uint8{0x37, 0xc8, 0xbb, 0x13, 0x50, 0xa9, 0xa2, 0xa8}, Ver: 0x1},
				},
			},
		},
		"polkadot_v0929": {
			instanceBuilder: func(t *testing.T) instanceVersioner {
				return NewTestInstance(t, runtime.POLKADOT_RUNTIME_v0929)
			},
			expectedVersion: runtime.Version{
				SpecName:         []byte("polkadot"),
				ImplName:         []byte("parity-polkadot"),
				AuthoringVersion: 0,
				SpecVersion:      9290,
				ImplVersion:      0,
				APIItems: []runtime.APIItem{
					{Name: [8]uint8{0xdf, 0x6a, 0xcb, 0x68, 0x99, 0x7, 0x60, 0x9b}, Ver: 0x4},
					{Name: [8]uint8{0x37, 0xe3, 0x97, 0xfc, 0x7c, 0x91, 0xf5, 0xe4}, Ver: 0x1},
					{Name: [8]uint8{0x40, 0xfe, 0x3a, 0xd4, 0x1, 0xf8, 0x95, 0x9a}, Ver: 0x6},
					{Name: [8]uint8{0x17, 0xa6, 0xbc, 0xd, 0x0, 0x62, 0xae, 0xb3}, Ver: 0x1},
					{Name: [8]uint8{0xd2, 0xbc, 0x98, 0x97, 0xee, 0xd0, 0x8f, 0x15}, Ver: 0x3},
					{Name: [8]uint8{0xf7, 0x8b, 0x27, 0x8b, 0xe5, 0x3f, 0x45, 0x4c}, Ver: 0x2},
					{Name: [8]uint8{0xaf, 0x2c, 0x2, 0x97, 0xa2, 0x3e, 0x6d, 0x3d}, Ver: 0x2},
					{Name: [8]uint8{0x49, 0xea, 0xaf, 0x1b, 0x54, 0x8a, 0xc, 0xb0}, Ver: 0x1},
					{Name: [8]uint8{0x91, 0xd5, 0xdf, 0x18, 0xb0, 0xd2, 0xcf, 0x58}, Ver: 0x1},
					{Name: [8]uint8{0xed, 0x99, 0xc5, 0xac, 0xb2, 0x5e, 0xed, 0xf5}, Ver: 0x3},
					{Name: [8]uint8{0xcb, 0xca, 0x25, 0xe3, 0x9f, 0x14, 0x23, 0x87}, Ver: 0x2},
					{Name: [8]uint8{0x68, 0x7a, 0xd4, 0x4a, 0xd3, 0x7f, 0x3, 0xc2}, Ver: 0x1},
					{Name: [8]uint8{0xab, 0x3c, 0x5, 0x72, 0x29, 0x1f, 0xeb, 0x8b}, Ver: 0x1},
					{Name: [8]uint8{0xbc, 0x9d, 0x89, 0x90, 0x4f, 0x5b, 0x92, 0x3f}, Ver: 0x1},
					{Name: [8]uint8{0x37, 0xc8, 0xbb, 0x13, 0x50, 0xa9, 0xa2, 0xa8}, Ver: 0x1},
					{Name: [8]uint8{0xf3, 0xff, 0x14, 0xd5, 0xab, 0x52, 0x70, 0x59}, Ver: 0x1},
				},
				TransactionVersion: 14,
			},
		},
		"westend_v0929": {
			instanceBuilder: func(t *testing.T) instanceVersioner {
				return NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
			},
			expectedVersion: runtime.Version{
				SpecName:         []byte("westend"),
				ImplName:         []byte("parity-westend"),
				AuthoringVersion: 2,
				SpecVersion:      9290,
				ImplVersion:      0,
				APIItems: []runtime.APIItem{
					{Name: [8]uint8{0xdf, 0x6a, 0xcb, 0x68, 0x99, 0x7, 0x60, 0x9b}, Ver: 0x4},
					{Name: [8]uint8{0x37, 0xe3, 0x97, 0xfc, 0x7c, 0x91, 0xf5, 0xe4}, Ver: 0x1},
					{Name: [8]uint8{0x40, 0xfe, 0x3a, 0xd4, 0x1, 0xf8, 0x95, 0x9a}, Ver: 0x6},
					{Name: [8]uint8{0xd2, 0xbc, 0x98, 0x97, 0xee, 0xd0, 0x8f, 0x15}, Ver: 0x3},
					{Name: [8]uint8{0xf7, 0x8b, 0x27, 0x8b, 0xe5, 0x3f, 0x45, 0x4c}, Ver: 0x2},
					{Name: [8]uint8{0xaf, 0x2c, 0x2, 0x97, 0xa2, 0x3e, 0x6d, 0x3d}, Ver: 0x2},
					{Name: [8]uint8{0x49, 0xea, 0xaf, 0x1b, 0x54, 0x8a, 0xc, 0xb0}, Ver: 0x1},
					{Name: [8]uint8{0x91, 0xd5, 0xdf, 0x18, 0xb0, 0xd2, 0xcf, 0x58}, Ver: 0x1},
					{Name: [8]uint8{0xed, 0x99, 0xc5, 0xac, 0xb2, 0x5e, 0xed, 0xf5}, Ver: 0x3},
					{Name: [8]uint8{0xcb, 0xca, 0x25, 0xe3, 0x9f, 0x14, 0x23, 0x87}, Ver: 0x2},
					{Name: [8]uint8{0x68, 0x7a, 0xd4, 0x4a, 0xd3, 0x7f, 0x3, 0xc2}, Ver: 0x1},
					{Name: [8]uint8{0xab, 0x3c, 0x5, 0x72, 0x29, 0x1f, 0xeb, 0x8b}, Ver: 0x1},
					{Name: [8]uint8{0xbc, 0x9d, 0x89, 0x90, 0x4f, 0x5b, 0x92, 0x3f}, Ver: 0x1},
					{Name: [8]uint8{0x37, 0xc8, 0xbb, 0x13, 0x50, 0xa9, 0xa2, 0xa8}, Ver: 0x1},
					{Name: [8]uint8{0xf3, 0xff, 0x14, 0xd5, 0xab, 0x52, 0x70, 0x59}, Ver: 0x1},
					{Name: [8]uint8{0x17, 0xa6, 0xbc, 0xd, 0x0, 0x62, 0xae, 0xb3}, Ver: 0x1},
				},
				TransactionVersion: 12,
			},
		},
	}

	for name, testCase := range testCases {
		testCase := testCase
		t.Run(name, func(t *testing.T) {
			instance := testCase.instanceBuilder(t)
			version, err := instance.Version()
			require.NoError(t, err)
			assert.Equal(t, testCase.expectedVersion, version)
		})
	}
}

func balanceKey(t *testing.T, pub []byte) []byte {
	h0, err := common.Twox128Hash([]byte("System"))
	require.NoError(t, err)
	h1, err := common.Twox128Hash([]byte("Account"))
	require.NoError(t, err)
	h2, err := common.Blake2b128(pub)
	require.NoError(t, err)
	return append(append(append(h0, h1...), h2...), pub...)
}

func TestWestendRuntime_ValidateTransaction(t *testing.T) {
	genesisPath := utils.GetWestendDevRawGenesisPath(t)
	gen := genesisFromRawJSON(t, genesisPath)
	genTrie, err := runtime.NewTrieFromGenesis(gen)
	require.NoError(t, err)

	// set state to genesis state
	genState := storage.NewTrieState(&genTrie)

	cfg := Config{
		Storage: genState,
		LogLvl:  log.Critical,
	}

	nodeStorage := runtime.NodeStorage{}
	nodeStorage.BaseDB = runtime.NewInMemoryDB(t)
	cfg.NodeStorage = nodeStorage

	rt, err := NewRuntimeFromGenesis(cfg)
	require.NoError(t, err)

	alicePub := common.MustHexToBytes("0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d")
	aliceBalanceKey := balanceKey(t, alicePub)

	accInfo := types.AccountInfo{
		Nonce: 0,
		Data: types.AccountData{
			Free:       scale.MustNewUint128(big.NewInt(1152921504606846976)),
			Reserved:   scale.MustNewUint128(big.NewInt(0)),
			MiscFrozen: scale.MustNewUint128(big.NewInt(0)),
			FreeFrozen: scale.MustNewUint128(big.NewInt(0)),
		},
	}

	encBal, err := scale.Marshal(accInfo)
	require.NoError(t, err)

	rt.Context.Storage.Put(aliceBalanceKey, encBal, trie.V0)
	// this key is System.UpgradedToDualRefCount -> set to true since all accounts have been upgraded to v0.9 format
	rt.Context.Storage.Put(common.UpgradedToDualRefKey, []byte{1}, trie.V0)

	genesisHeader := &types.Header{
		Number:    0,
		StateRoot: genTrie.MustHash(),
	}

	extHex := runtime.NewTestExtrinsic(t, rt, genesisHeader.Hash(), genesisHeader.Hash(),
		0, signature.TestKeyringPairAlice, "System.remark", []byte{0xab, 0xcd})

	genesisHashBytes := genesisHeader.Hash().ToBytes()

	validateTransactionArguments := [][]byte{
		{byte(types.TxnExternal)},
		common.MustHexToBytes(extHex),
		genesisHashBytes}

	extrinsicsBytes := bytes.Join(validateTransactionArguments, nil)

	runtime.InitializeRuntimeToTest(t, rt, genesisHeader)
	_, err = rt.ValidateTransaction(extrinsicsBytes)
	require.NoError(t, err)
}

func TestInstance_GrandpaAuthorities_NodeRuntime(t *testing.T) {
	tt := trie.NewEmptyTrie()

	value, err := common.HexToBytes("0x0108eea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d714103640100000000000000b64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d7170100000000000000") //nolint:lll
	require.NoError(t, err)

	key := common.MustHexToBytes(genesis.GrandpaAuthoritiesKeyHex)
	tt.Put(key, value, trie.V0)

	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v0929, tt)

	auths, err := rt.GrandpaAuthorities()
	require.NoError(t, err)

	authABytes, _ := common.HexToBytes("0xeea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d71410364")
	authBBytes, _ := common.HexToBytes("0xb64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d717")

	authA, _ := ed25519.NewPublicKey(authABytes)
	authB, _ := ed25519.NewPublicKey(authBBytes)

	expected := []types.Authority{
		{Key: authA, Weight: 1},
		{Key: authB, Weight: 1},
	}

	require.Equal(t, expected, auths)
}

func TestInstance_GrandpaAuthorities_PolkadotRuntime(t *testing.T) {
	tt := trie.NewEmptyTrie()

	value, err := common.HexToBytes("0x0108eea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d714103640100000000000000b64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d7170100000000000000") //nolint:lll
	require.NoError(t, err)

	key := common.MustHexToBytes(genesis.GrandpaAuthoritiesKeyHex)
	tt.Put(key, value, trie.V0)

	rt := NewTestInstanceWithTrie(t, runtime.POLKADOT_RUNTIME_v0929, tt)

	auths, err := rt.GrandpaAuthorities()
	require.NoError(t, err)

	authABytes, _ := common.HexToBytes("0xeea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d71410364")
	authBBytes, _ := common.HexToBytes("0xb64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d717")

	authA, _ := ed25519.NewPublicKey(authABytes)
	authB, _ := ed25519.NewPublicKey(authBBytes)

	expected := []types.Authority{
		{Key: authA, Weight: 1},
		{Key: authB, Weight: 1},
	}

	require.Equal(t, expected, auths)
}

func TestInstance_BabeGenerateKeyOwnershipProof(t *testing.T) {
	testCases := []struct {
		name          string
		targetRuntime string
	}{
		{
			name:          "with_polkadot_runtime",
			targetRuntime: runtime.POLKADOT_RUNTIME_v0929,
		},
		{
			name:          "with_westend_runtime",
			targetRuntime: runtime.WESTEND_RUNTIME_v0929,
		},
	}
	for _, testCase := range testCases {
		testCase := testCase
		t.Run(testCase.name, func(t *testing.T) {
			tt := trie.NewEmptyTrie()

			randomnessValue, err := common.HexToHash("0x01")
			require.NoError(t, err)
			key := common.MustHexToBytes(genesis.BABERandomnessKeyHex)
			tt.Put(key, randomnessValue[:], trie.V0)

			authorityValue, err := common.HexToBytes("0x08eea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d714103640100000000000000b64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d7170100000000000000") //nolint:lll
			require.NoError(t, err)

			key = common.MustHexToBytes(genesis.BABEAuthoritiesKeyHex)
			tt.Put(key, authorityValue, trie.V0)

			rt := NewTestInstanceWithTrie(t, testCase.targetRuntime, tt)

			babeConfig, err := rt.BabeConfiguration()
			require.NoError(t, err)

			require.NotEmpty(t, babeConfig.GenesisAuthorities)

			authorityID := babeConfig.GenesisAuthorities[0].Key

			const slot = uint64(10)
			res, err := rt.BabeGenerateKeyOwnershipProof(slot, authorityID)
			require.NoError(t, err)
			require.Nil(t, res)
		})
	}
}

func TestInstance_BabeSubmitReportEquivocationUnsignedExtrinsic(t *testing.T) {
	testCases := []struct {
		name          string
		targetRuntime string
	}{
		{
			name:          "with_polkadot_runtime",
			targetRuntime: runtime.POLKADOT_RUNTIME_v0929,
		},
		{
			name:          "with_westend_runtime",
			targetRuntime: runtime.WESTEND_RUNTIME_v0929,
		},
	}
	for _, testCase := range testCases {
		testCase := testCase
		t.Run(testCase.name, func(t *testing.T) {
			tt := trie.NewEmptyTrie()
			rt := NewTestInstanceWithTrie(t, testCase.targetRuntime, tt)
			authorityID := types.AuthorityID{1}
			const slot = uint64(1)

			keyOwnershipProof := testKeyOwnershipProof

			equivocationProof := types.BabeEquivocationProof{
				Offender: authorityID,
				Slot:     slot,
			}

			err := rt.BabeSubmitReportEquivocationUnsignedExtrinsic(equivocationProof, keyOwnershipProof)
			require.NoError(t, err)
		})
	}
}

func TestInstance_BabeConfiguration_WestendRuntime_NoAuthorities(t *testing.T) {
	rt := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	cfg, err := rt.BabeConfiguration()
	require.NoError(t, err)

	expected := &types.BabeConfiguration{
		SlotDuration:       6000,
		EpochLength:        600,
		C1:                 1,
		C2:                 4,
		GenesisAuthorities: nil,
		Randomness:         [32]byte{},
		SecondarySlots:     2,
	}
	require.Equal(t, expected, cfg)
}

const blockResponse9412261 = "0x0ae5160a20baa8a27e8dfe65363fcd62a8fbb38f7a35d74d74feddef4c0c899493b460ddb212c9075a5de113c3fb216be19c55ba1ba165fb8649a80f3af7b9ba8775e46eadca4078967a3e02d3ef35f8555a4d687f9fadc772103daac39008454dd7b7672dcb02abbe57657ecf630b937b030c07a640937d27627b5bac6237a96a87810bf9b1f3809088025d0c0642414245b50103090000004fc1541000000000e2057d59fc150d564072389e1b3d9e4c600db5c9b7f46e556f59887865259a4c3e229351a04977203ace4a6a8cf5ecce427193ced92116dfe86914bd8ba64e0b55491496a8da3ca2280beebe3bbea508713c28252716eb18aba338487daf9a0c0442414245890a0140a2f559499573b5878287f8cc18abfb5d070229a6584a125113725a38ba62996f0100000000000000886a9fa1a9ee1cc5666fa0b6d5c16754617b923c364428ad51c79e6b52ad1d3e0100000000000000524c2bc612c5a6f22845e6a80944db9e197beaa50c242f34a2a45a3666a2eb7a01000000000000002cc19bd8a23c534f9f2ae91651c84bc2fdef757e8aca156edc5e92eeb589043d010000000000000036484c5ae34f2fcd3a56a9ac7681a183ec1628e495dd142d530d10e4e8c1432401000000000000006e4ada50950a8e35392dcf101c0c82b29e95e3da2d71d7e0909fde502de0ca5b0100000000000000f08a1a9eb8536a735b23b04d3d6501bc720d0d6a40a89c911a771f1c2d7a42600100000000000000eeb16c9f7722516fca6b3c1bc0fab270a5a3280f51ce1b21e834d8a7f3d452210100000000000000b24ced05d1e1fbadf98791e452f9d265a3118e9828a9ce0f64ed73d91764ea17010000000000000088c33bf243528e684e9b41c99abc2083e0d6cd391bcb2d8340723b12b4706514010000000000000056646045eeaee5ac194bd2436420c9070d81ba0d17624832c1eb12c3b353c6480100000000000000565bea8cf9db123c71a5015380a98560839b129030287e2008dc8337affc4b790100000000000000ac5c5c355619970c9c2049ace0551338e6f345ad01547338a90f317cc043a8200100000000000000642b60bdaaa80105756645e9d1e267ac7c384a73ed004f65e91180f99b49ef06010000000000000034e9be26ef44e368d4d438e2782b5b0805fc40257c7436026af4113a80245e530100000000000000c48aee5296e2911c4b3a9051fe0a4c4ae81741e110b6ae3e89b138cd874d90290100000000000000660c71d336a45d61cbf36f7e9139f992e54e4ee87b9516b996ebcb96c757b06e0542414245010124f8bb0940922d77a452fefa7c80a1827d1567c19ad56144a27bab7e7f5a502a542bc6c43e5db49bba6562a4e76ed9f765c421ac396d9dcbaa9308b404dfbe8d1a0b280402000b93ab72c27e011ae70e951d042d0034140000000000d27659588e86d32c918459c9348bd7e926ebe92434b8b3e01ca39b7433c27c4d2b9c5ac37c3fd31f76e4338f6afbb57157a2449220ab8f177eafdff14879c38e140001000000b095e24e4c630c84fae30364594aeb9d14610456a714fa9508b260908acf580e3dcc6c0bf3dbe85558bda15c5268aca5466789c2a4d226301f98045b727fb782140002000000fc7fbe2fb49cf33684f87ee7e190e5b439b3c2d78d084f6697c140825e5a712dbe2afad0aecfe658a3f74941ef86b62f2972a638ae1a4aef420656141e8658871400040000000654af42365bdbfa1bf302b70f901a88fdbf67962f10fd1f7152d49ce8043c1f37957e0155de14763922c87970adc1eaed96f0624c79347aee3c2ee098e92d821400060000007648cf5d9f6da7d7a6181071eda5f4da328459316a72f6a136f43c89b748a8008407008aab927a4bfc589ab98609dd20a4f59c4653975b1ec3907e606a804f88140007000000c269c0e96b74d3b0786fb00ed4b9ce9000adee36082caa0b52e2a5cf43fe453ff5edd4feaf8966544fcce3ee2907a77bf744c38c771055e95f73f962a497988a1400080000000c1a55952882e7fef23915f0f4ac0260c164787927920829a405d70e14335a285edd4602de88fd74a4b31a20bf5102c4165a81f1d90af2c2799dbd341811148914000a00000040588a32c0d340964add5ab3ee314ff354004e17c9d031fc44065defdb503f164e9f42b6057151af6275465f9194ab3266e32bc66d1ebc5324d9c4e1cca12a8414000b00000084ed4fb84603b8428963eb1d001e2df71ab3c72cdd193774e972c8f35ecdb549c4f9702d614c8afd93135aefc7bcadba44d8952c6a1616a350b38cd89797f88714000c00000042952ee385eb059243899bc479644dbbf083d31be14f30b85286aad4e135bd72c3a36ba97503877bb23221544dcff79b534c55c8bc5caea10bc1a39a111f368514000d0000006272b4044f9c8ab785ab1852c619e53611636915b4504238c53b0a57c9abc273f0029d01e9635a30e2164239ec6949fe5cd307ce7ab56ee570902ad113eb698814000e00000082e91851574f2a8e207e3063c62efdae94491d11dd61c3130bfe6e3298b66a7013014fbc0acce52f770998a759995c1681b97740d7016902ebdf9cf90f2faa8b14000f0000004417a846c734d159eb25925963e93f451f96650fb5b889e6fab3eab8b4a434016db24f9d7b94e7feda8f4a372cd3d27c0714ec584d4ebdaa4ed3bd8b328c998a04e80300005a5de113c3fb216be19c55ba1ba165fb8649a80f3af7b9ba8775e46eadca4078fe4ce0ced20f86087cdc506c6c357f3c6981a0da1c71370331907c92e809753108de8e3048b2b9eb7c83cceed594a5146f0f0c1eadb5bad4653a2821eece7045e04da348bb559224631e45aa287aed8efe1aef6a3469581eb3a23a29798a7a371bf5a6f475913fa02d4b485c57557e86fc5b54fb6a3a928e5ef2d7cbb0b0117cb28e48819f64d1a170a1fcc48052c74e9462438b160284918c29a9a0e006200d3dc3a853abdf134dceab23ff726a114d64286b229eafb8d94d78fde47d371582c4462f1de9e302efc74b6ccdea46df07079f41f1f7dcd697afbf82d1bb257d6bf3dadfb80eea51b35e54a5a1dfda4537635aded419fd197daa093a01f1e04c39000000e902db346f1d150f5a9a617a573f7a20508ab096d5fe719c6e0d61e22d828c57d2b5b2e55900fc2bfeed19dde4498ecf5659ef19a157cc71c15c99363e5aa79e2d3004c10ba23a5d9d8b28c97dc6117588edd890913d8fdf5ba086b00a8b213e6ef2637ac78008066175726120a7602a080000000005617572610101962af0f04c3c454ae05d7433f88e4cfee939741479f60006e8daee44a5af3b595ec854cfd0ef91c445e1fa6c5e1b68ae5ea3ffe41be528ab73cf6d5776fb198a00000000a49e8f000c0206c2866f2a19f4ce76cb160e6d90da52393ff0f2465ffbf6aa0d6e538c0a7e3050bb2b135b633dd1e4510ed9c4a59e3005e2c11cca35ea81f6480c3a3a2d2e87015641031b2e4830e806e379614bbe03727257505817434a17179f30e1a612e50dad3610e7dae4d7e603e35c8363149fc4df1ab59b0e6a336db09d403ca730838e0236d8504ccda394afc8fd55af9e02e29ab114e3ea8225dfc5d6436bce77790769c6132718955cb640c759aabdb2cda2083294f2432fd11eaea451d67d25dfb8810c0700fe1eaf8ce7001f3cccb31eb70e835ae8a9237f49e4b0c3db8340126be6eca54f927a3e02780530903c5102d03a8240fe2712f3dfdc84734192f360caf50050cb8d381e45fcdc63b25fca3a380005b6fa430fa1d7f1552417bfe9dfda8bacf0d107894c9a080642414245b50103060000004ec15410000000007e4d06f689b291ab1c3f3239ced29c9cf347740bd385912d6687046e661959291060e30dd95722640219c17c33b739e5b83cefa0f96146ad2ee9c22308786503126b1ba7068e5582aedb0e3f674d29348b90aa24d38f136cfa3b56753847aa0705424142450101849cd6d29dc1956045a8b0770c3a44acb6eea69f36203ae66ec455ecd532cf6c526bf13f4b9872bd00d2d2843e8bac000d69aa2cedcbe42f98bfdc68bbbca382"

func PrintMemUsage() {
	var m gruntime.MemStats
	gruntime.ReadMemStats(&m)
	// For info on each, see: https://golang.org/pkg/runtime/#MemStats
	fmt.Printf("Alloc = %v MiB", bToMb(m.Alloc))
	fmt.Printf("\tTotalAlloc = %v MiB", bToMb(m.TotalAlloc))
	fmt.Printf("\tSys = %v MiB", bToMb(m.Sys))
	fmt.Printf("\tNumGC = %v\n", m.NumGC)
}

func bToMb(b uint64) uint64 {
	return b / 1024 / 1024
}

func InstantiateRuntime9150(t *testing.T) *Instance {
	t.Helper()

	wndTrie9412260 := newTrieFromScaledPairs(t, "../test_data/westend/entries9412260.out")
	expectedRoot := common.MustHexToHash("0x780530903c5102d03a8240fe2712f3dfdc84734192f360caf50050cb8d381e45")
	require.Equal(t, expectedRoot, wndTrie9412260.MustHash())

	runtimeBlobStr := struct {
		Runtime string `yaml:"runtime"`
	}{
		Runtime: "",
	}

	yaml.Unmarshal(runtimeBlob, &runtimeBlobStr)
	runtimeBytes := common.MustHexToBytes(runtimeBlobStr.Runtime)
	err := wndTrie9412260.Put(common.CodeKey, runtimeBytes, trie.V0)
	require.NoError(t, err)

	offchaindb, err := database.NewPebble(t.TempDir(), true)
	require.NoError(t, err)

	cfg := Config{
		Storage: storage.NewTrieState(wndTrie9412260),
		LogLvl:  log.Critical,
		NodeStorage: runtime.NodeStorage{
			BaseDB: offchaindb,
		},
	}

	instance, err := NewInstanceFromTrie(wndTrie9412260, cfg)
	require.NoError(t, err)

	rtV, err := instance.Version()
	require.NoError(t, err)

	fmt.Println(rtV.SpecVersion)
	return instance
}

func InstantiateRuntime9160(t *testing.T) *Instance {
	t.Helper()

	wndTrie9412260 := newTrieFromScaledPairs(t, "../test_data/westend/entries9412260.out")
	expectedRoot := common.MustHexToHash("0x780530903c5102d03a8240fe2712f3dfdc84734192f360caf50050cb8d381e45")
	require.Equal(t, expectedRoot, wndTrie9412260.MustHash())

	offchaindb, err := database.NewPebble(t.TempDir(), true)
	require.NoError(t, err)

	cfg := Config{
		Storage: storage.NewTrieState(wndTrie9412260),
		LogLvl:  log.Critical,
		NodeStorage: runtime.NodeStorage{
			BaseDB: offchaindb,
		},
	}

	instance, err := NewInstanceFromTrie(wndTrie9412260, cfg)
	require.NoError(t, err)

	return instance
}

func GetBlockFromResponse(t *testing.T, blockNum uint) *types.Block {
	allBlocks := struct {
		Data []string `yaml:"data"`
	}{
		Data: []string{},
	}

	err := yaml.Unmarshal(hex, &allBlocks)
	require.NoError(t, err)

	for _, bd := range allBlocks.Data {
		entireBlockData := common.MustHexToBytes(bd)

		blockResponseData := new(network.BlockResponseMessage)
		err = blockResponseData.Decode(entireBlockData)
		require.NoError(t, err)

		for _, block := range blockResponseData.BlockData {
			if block.Header.Number == blockNum {
				return &types.Block{
					Header: *block.Header,
					Body:   *block.Body,
				}
			}
		}
	}

	t.Error("could not find block #9412260")
	return nil
}

func CreateBlockUsingRuntime(t *testing.T, parentHeader *types.Header, blockNumberToExtractParachainInherent uint, instance *Instance) ([]byte, []byte) {
	t.Helper()

	rtV, err := instance.Version()
	require.NoError(t, err)

	fmt.Println(rtV.SpecVersion)

	block := GetBlockFromResponse(t, blockNumberToExtractParachainInherent)

	exts, err := block.Body.AsEncodedExtrinsics()
	require.NoError(t, err)

	for _, b := range block.Body {
		enc, err := scale.Marshal(b)
		require.NoError(t, err)

		fmt.Printf("%x\n", enc)
	}

	newblock := runtime.BlockWithExtrinsicsAndTs(t, instance, parentHeader, exts)
	newblock.Body = append(newblock.Body, block.Body[1:]...)

	marshaledHeader, marshaledBody, err := newblock.EncodeSeparated()
	require.NoError(t, err)
	return marshaledHeader, marshaledBody
}

func TestInstance_Failure_WestednBlock9412261(t *testing.T) {
	fmt.Printf("\n\n")

	instance := InstantiateRuntime9160(t)
	blockNumberToStart := uint(9412261)

	for i := 0; i < 1; i++ {
		block := GetBlockFromResponse(t, blockNumberToStart)

		fmt.Printf("Executing block #%d...\n", block.Header.Number)
		_, err := instance.ExecuteBlock(block)
		require.NoError(t, err)
		fmt.Printf("executed block #%d...\n\n", block.Header.Number)

		blockNumberToStart += 1
	}
}

func TestInstance_BadSignature_WestendBlock8077850(t *testing.T) {
	tests := map[string]struct {
		setupRuntime  func(t *testing.T) (*Instance, *types.Header)
		expectedError []byte
	}{
		"westend_dev_runtime_should_fail_with_bad_signature": {
			expectedError: []byte{1, 0, 0xa},
			setupRuntime: func(t *testing.T) (*Instance, *types.Header) {
				genesisPath := utils.GetWestendDevRawGenesisPath(t)
				gen := genesisFromRawJSON(t, genesisPath)
				genTrie, err := runtime.NewTrieFromGenesis(gen)
				require.NoError(t, err)

				// set state to genesis state
				genState := storage.NewTrieState(&genTrie)

				cfg := Config{
					Storage: genState,
					LogLvl:  log.Critical,
				}

				rt, err := NewRuntimeFromGenesis(cfg)
				require.NoError(t, err)

				// reset state back to parent state before executing
				parentState := storage.NewTrieState(&genTrie)
				rt.SetContextStorage(parentState)

				genesisHeader := &types.Header{
					Number:    0,
					StateRoot: genTrie.MustHash(),
				}

				header := &types.Header{
					ParentHash: genesisHeader.Hash(),
					Number:     1,
					Digest:     types.NewDigest(),
				}

				return rt, header
			},
		},
		"westend_0912_runtime_should_fail_with_invalid_payment": {
			expectedError: []byte{1, 0, 1},
			setupRuntime: func(t *testing.T) (*Instance, *types.Header) {
				genesisPath := utils.GetWestendDevRawGenesisPath(t)
				gen := genesisFromRawJSON(t, genesisPath)
				genTrie, err := runtime.NewTrieFromGenesis(gen)
				require.NoError(t, err)

				rt := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0912)
				parentState := storage.NewTrieState(&genTrie)
				rt.SetContextStorage(parentState)

				genesisHeader := &types.Header{
					Number:    0,
					StateRoot: genTrie.MustHash(),
				}

				header := &types.Header{
					ParentHash: genesisHeader.Hash(),
					Number:     1,
					Digest:     types.NewDigest(),
				}

				return rt, header
			},
		},
	}

	for tname, tt := range tests {
		tt := tt

		t.Run(tname, func(t *testing.T) {
			instance, header := tt.setupRuntime(t)

			err := instance.InitializeBlock(header)
			require.NoError(t, err)

			idata := types.NewInherentData()
			err = idata.SetInherent(types.Timstap0, uint64(5))
			require.NoError(t, err)

			err = idata.SetInherent(types.Babeslot, uint64(1))
			require.NoError(t, err)

			ienc, err := idata.Encode()
			require.NoError(t, err)

			// Call BlockBuilder_inherent_extrinsics which returns the inherents as encoded extrinsics
			inherentExts, err := instance.InherentExtrinsics(ienc)
			require.NoError(t, err)

			// decode inherent extrinsics
			cp := make([]byte, len(inherentExts))
			copy(cp, inherentExts)
			var inExts [][]byte
			err = scale.Unmarshal(cp, &inExts)
			require.NoError(t, err)

			// apply each inherent extrinsic
			for _, inherent := range inExts {
				in, err := scale.Marshal(inherent)
				require.NoError(t, err)

				ret, err := instance.ApplyExtrinsic(in)
				require.NoError(t, err)
				require.Equal(t, ret, []byte{0, 0})
			}

			keyring, err := signature.KeyringPairFromSecret(
				"0x00000000000000000000000000000000000000000000000000000"+
					"00000000000000000000000000000000000000000000000000000"+
					"0000000000000000000000", 42)
			require.NoError(t, err)

			extHex := runtime.NewTestExtrinsic(t, instance, header.ParentHash, header.ParentHash,
				0, keyring, "System.remark", []byte{0xab, 0xcd})

			res, err := instance.ApplyExtrinsic(common.MustHexToBytes(extHex))
			require.NoError(t, err)

			// should fail with transaction validity error: invalid payment for runtime 0.9.12
			// should fail with transaction validity error: bad signature for runtime version greater than 0.9.12
			require.Equal(t, tt.expectedError, res)
		})
	}

}

func TestInstance_BabeConfiguration_WestendRuntime_WithAuthorities(t *testing.T) {
	tt := trie.NewEmptyTrie()

	randomnessValue, err := common.HexToHash("0x01")
	require.NoError(t, err)
	key := common.MustHexToBytes(genesis.BABERandomnessKeyHex)
	tt.Put(key, randomnessValue[:], trie.V0)

	authorityValue, err := common.HexToBytes("0x08eea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d714103640100000000000000b64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d7170100000000000000") //nolint:lll
	require.NoError(t, err)

	key = common.MustHexToBytes(genesis.BABEAuthoritiesKeyHex)
	tt.Put(key, authorityValue, trie.V0)

	rt := NewTestInstanceWithTrie(t, runtime.WESTEND_RUNTIME_v0929, tt)

	cfg, err := rt.BabeConfiguration()
	require.NoError(t, err)

	authA, _ := common.HexToHash("0xeea1eabcac7d2c8a6459b7322cf997874482bfc3d2ec7a80888a3a7d71410364")
	authB, _ := common.HexToHash("0xb64994460e59b30364cad3c92e3df6052f9b0ebbb8f88460c194dc5794d6d717")

	expectedAuthData := []types.AuthorityRaw{
		{Key: authA, Weight: 1},
		{Key: authB, Weight: 1},
	}

	expected := &types.BabeConfiguration{
		SlotDuration:       6000,
		EpochLength:        600,
		C1:                 1,
		C2:                 4,
		GenesisAuthorities: expectedAuthData,
		Randomness:         [32]byte{1},
		SecondarySlots:     2,
	}

	require.Equal(t, expected, cfg)
}

func TestInstance_InitializeBlock_NodeRuntime(t *testing.T) {
	rt := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)

	header := &types.Header{
		Number: 1,
		Digest: types.NewDigest(),
	}

	err := rt.InitializeBlock(header)
	require.NoError(t, err)
}

func TestInstance_InitializeBlock_PolkadotRuntime(t *testing.T) {
	rt := NewTestInstance(t, runtime.POLKADOT_RUNTIME_v0929)

	header := &types.Header{
		Number: 1,
		Digest: types.NewDigest(),
	}

	err := rt.InitializeBlock(header)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_WestendRuntime(t *testing.T) {
	instance := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	block := runtime.InitializeRuntimeToTest(t, instance, &types.Header{})

	// reset state back to parent state before executing
	parentState := storage.NewTrieState(nil)
	instance.SetContextStorage(parentState)

	_, err := instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ApplyExtrinsic_WestendRuntime(t *testing.T) {
	genesisPath := utils.GetWestendDevRawGenesisPath(t)
	gen := genesisFromRawJSON(t, genesisPath)
	genTrie, err := runtime.NewTrieFromGenesis(gen)
	require.NoError(t, err)

	// set state to genesis state
	genState := storage.NewTrieState(&genTrie)

	cfg := Config{
		Storage: genState,
		LogLvl:  log.Critical,
	}

	instance, err := NewRuntimeFromGenesis(cfg)
	require.NoError(t, err)

	// reset state back to parent state before executing
	parentState := storage.NewTrieState(&genTrie)
	instance.SetContextStorage(parentState)

	genesisHeader := &types.Header{
		Number:    0,
		StateRoot: genTrie.MustHash(),
	}
	header := &types.Header{
		ParentHash: genesisHeader.Hash(),
		Number:     1,
		Digest:     types.NewDigest(),
	}

	err = instance.InitializeBlock(header)
	require.NoError(t, err)

	extHex := runtime.NewTestExtrinsic(t, instance, genesisHeader.Hash(), genesisHeader.Hash(),
		0, signature.TestKeyringPairAlice, "System.remark", []byte{0xab, 0xcd})

	res, err := instance.ApplyExtrinsic(common.MustHexToBytes(extHex))
	require.NoError(t, err)
	require.Equal(t, []byte{0, 0}, res)
}

func TestInstance_ExecuteBlock_PolkadotRuntime(t *testing.T) {
	DefaultTestLogLvl = 0

	instance := NewTestInstance(t, runtime.POLKADOT_RUNTIME_v0929)

	block := runtime.InitializeRuntimeToTest(t, instance, &types.Header{})

	// reset state back to parent state before executing
	parentState := storage.NewTrieState(nil)
	instance.SetContextStorage(parentState)

	_, err := instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_PolkadotRuntime_PolkadotBlock1(t *testing.T) {
	genesisPath := utils.GetPolkadotGenesisPath(t)
	gen := genesisFromRawJSON(t, genesisPath)
	genTrie, err := runtime.NewTrieFromGenesis(gen)
	require.NoError(t, err)

	expectedGenesisRoot := common.MustHexToHash("0x29d0d972cd27cbc511e9589fcb7a4506d5eb6a9e8df205f00472e5ab354a4e17")
	require.Equal(t, expectedGenesisRoot, genTrie.MustHash())

	// set state to genesis state
	genState := storage.NewTrieState(&genTrie)

	cfg := Config{
		Storage: genState,
		LogLvl:  log.Critical,
	}

	instance, err := NewRuntimeFromGenesis(cfg)
	require.NoError(t, err)

	// block data is received from querying a polkadot node
	body := []byte{8, 40, 4, 3, 0, 11, 80, 149, 160, 81, 114, 1, 16, 4, 20, 0, 0}
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 2, len(exts))

	// digest data received from querying polkadot node
	digestBytes := common.MustHexToBytes("0x0c0642414245b501010000000093decc0f00000000362ed8d6055645487fe42e9c8640be651f70a3a2a03658046b2b43f021665704501af9b1ca6e974c257e3d26609b5f68b5b0a1da53f7f252bbe5d94948c39705c98ffa4b869dd44ac29528e3723d619cc7edf1d3f7b7a57a957f6a7e9bdb270a044241424549040118fa3437b10f6e7af8f31362df3a179b991a8c56313d1bcd6307a4d0c734c1ae310100000000000000d2419bc8835493ac89eb09d5985281f5dff4bc6c7a7ea988fd23af05f301580a0100000000000000ccb6bef60defc30724545d57440394ed1c71ea7ee6d880ed0e79871a05b5e40601000000000000005e67b64cf07d4d258a47df63835121423551712844f5b67de68e36bb9a21e12701000000000000006236877b05370265640c133fec07e64d7ca823db1dc56f2d3584b3d7c0f1615801000000000000006c52d02d95c30aa567fda284acf25025ca7470f0b0c516ddf94475a1807c4d250100000000000000000000000000000000000000000000000000000000000000000000000000000005424142450101d468680c844b19194d4dfbdc6697a35bf2b494bda2c5a6961d4d4eacfbf74574379ba0d97b5bb650c2e8670a63791a727943bcb699dc7a228bdb9e0a98c9d089") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)

	// polkadot block 1, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"),
			Number:         1,
			StateRoot:      common.MustHexToHash("0xc56fcd6e7a757926ace3e1ecff9b4010fc78b90d459202a339266a7f6360002f"),
			ExtrinsicsRoot: common.MustHexToHash("0x9a87f6af64ef97aff2d31bebfdd59f8fe2ef6019278b634b2515a38f1c4c2420"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock1(t *testing.T) {
	genesisPath := utils.GetKusamaGenesisPath(t)
	gen := genesisFromRawJSON(t, genesisPath)
	genTrie, err := runtime.NewTrieFromGenesis(gen)
	require.NoError(t, err)

	expectedGenesisRoot := common.MustHexToHash("0xb0006203c3a6e6bd2c6a17b1d4ae8ca49a31da0f4579da950b127774b44aef6b")
	require.Equal(t, expectedGenesisRoot, genTrie.MustHash())

	// set state to genesis state
	genState := storage.NewTrieState(&genTrie)

	cfg := Config{
		Storage: genState,
		LogLvl:  log.Critical,
	}

	instance, err := NewRuntimeFromGenesis(cfg)
	require.NoError(t, err)

	// block data is received from querying a polkadot node
	body := []byte{8, 40, 4, 2, 0, 11, 144, 17, 14, 179, 110, 1, 16, 4, 20, 0, 0}
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 2, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x0c0642414245340201000000ef55a50f00000000044241424549040118ca239392960473fe1bc65f94ee27d890a49c1b200c006ff5dcc525330ecc16770100000000000000b46f01874ce7abbb5220e8fd89bede0adad14c73039d91e28e881823433e723f0100000000000000d684d9176d6eb69887540c9a89fa6097adea82fc4b0ff26d1062b488f352e179010000000000000068195a71bdde49117a616424bdc60a1733e96acb1da5aeab5d268cf2a572e94101000000000000001a0575ef4ae24bdfd31f4cb5bd61239ae67c12d4e64ae51ac756044aa6ad8200010000000000000018168f2aad0081a25728961ee00627cfe35e39833c805016632bf7c14da5800901000000000000000000000000000000000000000000000000000000000000000000000000000000054241424501014625284883e564bc1e4063f5ea2b49846cdddaa3761d04f543b698c1c3ee935c40d25b869247c36c6b8a8cbbd7bb2768f560ab7c276df3c62df357a7e3b1ec8d") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)

	// kusama block 1, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe"),
			Number:         1,
			StateRoot:      common.MustHexToHash("0xfabb0c6e92d29e8bb2167f3c6fb0ddeb956a4278a3cf853661af74a076fc9cb7"),
			ExtrinsicsRoot: common.MustHexToHash("0xa35fb7f7616f5c979d48222b3d2fa7cb2331ef73954726714d91ca945cc34fd8"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock3784(t *testing.T) {
	gossTrie3783 := newTrieFromPairs(t, "../test_data/kusama/block3783.out")
	expectedRoot := common.MustHexToHash("0x948338bc0976aee78879d559a1f42385407e5a481b05a91d2a9386aa7507e7a0")
	require.Equal(t, expectedRoot, gossTrie3783.MustHash())

	// set state to genesis state
	state3783 := storage.NewTrieState(gossTrie3783)

	cfg := Config{
		Storage: state3783,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(gossTrie3783, cfg)
	require.NoError(t, err)

	// block data is received from querying a polkadot node
	body := common.MustHexToBytes("0x10280402000bb00d69b46e0114040900193b10041400009101041300eaaec5728cd6ea9160ff92a49bb45972c532d2163241746134726aaa5b2f72129d8650715320f23765c6306503669f69bf684b188dea73b1e247dd1dd166513b1c13daa387c35f24ac918d2fa772b73cffd20204a8875e48a1b11bb3229deb7f00") //nolint:lll
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 4, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x080642414245340203000000bd64a50f0000000005424142450101bc0d6850dba8d32ea1dbe26cb4ac56da6cca662c7cc642dc8eed32d2bddd65029f0721436eafeebdf9b4f17d1673c6bc6c3c51fe3dda3121a5fc60c657a5808b") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)

	// kusama block 3784, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x4843b4aa38cf2e3e2f6fae401b98dd705bed668a82dd3751dc38f1601c814ca8"),
			Number:         3784,
			StateRoot:      common.MustHexToHash("0xac44cc18ec22f0f3fca39dfe8725c0383af1c982a833e081fbb2540e46eb09a5"),
			ExtrinsicsRoot: common.MustHexToHash("0x52b7d4852fc648cb8f908901e1e36269593c25050c31718454bca74b69115d12"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock901442(t *testing.T) {
	ksmTrie901441 := newTrieFromPairs(t, "../test_data/kusama/block901441.out")
	expectedRoot := common.MustHexToHash("0x3a2ef7ee032f5810160bb8f3ffe3e3377bb6f2769ee9f79a5425973347acd504")
	require.Equal(t, expectedRoot, ksmTrie901441.MustHash())

	// set state to genesis state
	state901441 := storage.NewTrieState(ksmTrie901441)

	cfg := Config{
		Storage: state901441,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(ksmTrie901441, cfg)
	require.NoError(t, err)

	body := common.MustHexToBytes("0x0c280402000b207eb80a70011c040900fa0437001004140000")
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 3, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x080642414245340244000000aeffb30f00000000054241424501011cbef2a084a774c34d9990c7bfc6b4d2d5e9f5b59feca792cd2bb89a890c2a6f09668b5e8224879f007f49f299d25fbb3c0f30d94fb8055e07fa8a4ed10f8083") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)
	require.Equal(t, 2, len(digest.Types))

	// kusama block 901442, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x68d9c5f75225f09d7ce493eff8aabac7bae8b65cb81a2fd532a99fbb8c663931"),
			Number:         901442,
			StateRoot:      common.MustHexToHash("0x6ea065f850894c5b58cb1a73ec887e56842851943641149c57cea357cae4f596"),
			ExtrinsicsRoot: common.MustHexToHash("0x13483a4c148fff5f072e86b5af52bf031556514e9c87ea19f9e31e7b13c0c414"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock1377831(t *testing.T) {
	ksmTrie := newTrieFromPairs(t, "../test_data/kusama/block1377830.out")
	expectedRoot := common.MustHexToHash("0xe4de6fecda9e9e35f937d159665cf984bc1a68048b6c78912de0aeb6bd7f7e99")
	require.Equal(t, expectedRoot, ksmTrie.MustHash())

	// set state to genesis state
	state := storage.NewTrieState(ksmTrie)

	cfg := Config{
		Storage: state,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(ksmTrie, cfg)
	require.NoError(t, err)

	body := common.MustHexToBytes("0x08280402000b60c241c070011004140000")
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 2, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x080642414245b50101020000008abebb0f00000000045553c32a949242580161bcc35d7c3e492e66defdcf4525d7a338039590012f42660acabf1952a2d5d01725601705404d6ac671507a6aa2cf09840afbdfbb006f48062dae16c56b8dc5c6ea6ffba854b7e8f46e153e98c238cbe7bbb1556f0b0542414245010136914c6832dd5ba811a975a3b654d76a1ec81684f4b03d115ce2e694feadc96411930438fde4beb008c5f8e26cfa2f5b554fa3814b5b73d31f348446fd4fd688") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)
	require.Equal(t, 2, len(digest.Types))

	// kusama block 1377831, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0xca387b3cc045e8848277069d8794cbf077b08218c0b55f74d81dd750b14e768c"),
			Number:         1377831,
			StateRoot:      common.MustHexToHash("0x7e5569e652c4b1a3cecfcf5e5e64a97fe55071d34bab51e25626ec20cae05a02"),
			ExtrinsicsRoot: common.MustHexToHash("0x7f3ea0ed63b4053d9b75e7ee3e5b3f6ce916e8f59b7b6c5e966b7a56ea0a563a"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_KusamaRuntime_KusamaBlock1482003(t *testing.T) {
	ksmTrie := newTrieFromPairs(t, "../test_data/kusama/block1482002.out")
	expectedRoot := common.MustHexToHash("0x09f9ca28df0560c2291aa16b56e15e07d1e1927088f51356d522722aa90ca7cb")
	require.Equal(t, expectedRoot, ksmTrie.MustHash())

	// set state to genesis state
	state := storage.NewTrieState(ksmTrie)

	cfg := Config{
		Storage: state,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(ksmTrie, cfg)
	require.NoError(t, err)

	body := common.MustHexToBytes("0x0c280402000b10c3e3e570011c04090042745a001004140000")
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 3, len(exts))

	// digest from polkadot.js
	digestBytes := testdata.DigestKusama1482002(t)

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)

	require.Equal(t, 4, len(digest.Types))

	// kusama block 1482003, from polkadot.js
	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x587f6da1bfa71a675f10dfa0f63edfcf168e8ece97eb5f526aaf0e8a8e82db3f"),
			Number:         1482003,
			StateRoot:      common.MustHexToHash("0xd2de750002f33968437bdd54912dd4f55c3bddc5a391a8e0b8332568e1efea8d"),
			ExtrinsicsRoot: common.MustHexToHash("0xdf5da95780b77e83ad0bf820d5838f07a0d5131aa95a75f8dfbd01fbccb300bd"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_ExecuteBlock_PolkadotBlock1089328(t *testing.T) {
	dotTrie := newTrieFromPairs(t, "../test_data/polkadot/block1089327.json")
	expectedRoot := common.MustHexToHash("0x87ed9ebe7fb645d3b5b0255cc16e78ed022d9fbb52486105436e15a74557535b")
	require.Equal(t, expectedRoot, dotTrie.MustHash())

	// set state to genesis state
	state := storage.NewTrieState(dotTrie)

	cfg := Config{
		Storage: state,
		LogLvl:  log.Critical,
	}

	instance, err := NewInstanceFromTrie(dotTrie, cfg)
	require.NoError(t, err)

	body := common.MustHexToBytes("0x0c280403000be02ab6d873011004140000b90384468e34dbdcc8da24e44b0f0d34d97ccad5ce0281e465db0cc1d8e1423d50d90a018a89185c693f77b050fa35d1f80b19608b72a6e626110e835caedf949668a12b0ad7b786accf2caac0ec874941ccea9825d50b6bb5870e1400f0e56bb4c18b87a5021501001d00862e432e0cf75693899c62691ac0f48967f815add97ae85659dcde8332708551001b000cf4da8aea0e5649a8bedbc1f08e8a8c0febe50cd5b1c9ce0da2164f19aef40f01014a87a7d3673e5c80aec79973682140828a0d1c3899f4f3cc953bd02673e11a022aaa4f269e3f1a90156db29df88f780b1540b610aeb5cd347ee703c5dff48485") //nolint:lll
	var exts [][]byte
	err = scale.Unmarshal(body, &exts)
	require.NoError(t, err)
	require.Equal(t, 3, len(exts))

	// digest from polkadot.js
	digestBytes := common.MustHexToBytes("0x080642414245b501017b000000428edd0f00000000c4fd75c7535d8eec375d70d21cc62262247b599aa67d8a9cf2f7d1b8cb93cd1f9539f04902c33d4c0fe47f723dfed8505d31de1c04d0036a9df233ff902fce0d70060908faa4b3f481e54cbd6a52dfc20c3faac82f746d84dc03c2f824a89a0d0542414245010122041949669a56c8f11b3e3e7c803e477ad24a71ed887bc81c956b59ea8f2b30122e6042494aab60a75e0db8fdff45951e456e6053bd64eb5722600e4a13038b") //nolint:lll

	digest := types.NewDigest()
	err = scale.Unmarshal(digestBytes, &digest)
	require.NoError(t, err)
	require.Equal(t, 2, len(digest.Types))

	block := &types.Block{
		Header: types.Header{
			ParentHash:     common.MustHexToHash("0x21dc35454805411be396debf3e1d5aad8d6e9d0d7679cce0cc632ba8a647d07c"),
			Number:         1089328,
			StateRoot:      common.MustHexToHash("0x257b1a7f6bc0287fcbf50676dd29817f2f7ae193cb65b31962e351917406fa23"),
			ExtrinsicsRoot: common.MustHexToHash("0x950173af1d9fdcd0be5428fc3eaf05d5f34376bd3882d9a61b348fa2dc641012"),
			Digest:         digest,
		},
		Body: *types.NewBody(types.BytesArrayToExtrinsics(exts)),
	}

	_, err = instance.ExecuteBlock(block)
	require.NoError(t, err)
}

func TestInstance_DecodeSessionKeys(t *testing.T) {
	keys := "0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d34309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc3852042602634309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc3852042602634309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc3852042602634309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc3852042602634309a9d2a24213896ff06895db16aade8b6502f3a71cf56374cc38520426026" //nolint:lll
	pubkeys, err := common.HexToBytes(keys)
	require.NoError(t, err)

	pukeysBytes, err := scale.Marshal(pubkeys)
	require.NoError(t, err)

	instance := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	decoded, err := instance.DecodeSessionKeys(pukeysBytes)
	require.NoError(t, err)

	var decodedKeys *[]struct {
		Data []uint8
		Type [4]uint8
	}

	err = scale.Unmarshal(decoded, &decodedKeys)
	require.NoError(t, err)

	require.NotNil(t, decodedKeys)
	require.Len(t, *decodedKeys, 6)
}

func TestInstance_PaymentQueryInfo(t *testing.T) {
	tests := []struct {
		extB       []byte
		ext        string
		errMessage string
		expect     *types.RuntimeDispatchInfo
	}{
		{
			// Was made with @polkadot/api on https://github.com/danforbes/polkadot-js-scripts/tree/create-signed-tx
			ext: "0xd1018400d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d01bc2b6e35929aabd5b8bc4e5b0168c9bee59e2bb9d6098769f6683ecf73e44c776652d947a270d59f3d37eb9f9c8c17ec1b4cc473f2f9928ffdeef0f3abd43e85d502000000012844616e20466f72626573", //nolint:lll
			expect: &types.RuntimeDispatchInfo{
				Weight: 0,
				Class:  0,
				PartialFee: &scale.Uint128{
					Upper: 0,
					Lower: uint64(12800000000),
				},
			},
		},
		{
			// incomplete extrinsic
			ext:        "0x4ccde39a5684e7a56da23b22d4d9fbadb023baa19c56495432884d0640000000000000000000000000000000",
			errMessage: "running runtime function: wasm error",
		},
		{
			// incomplete extrinsic
			extB:       nil,
			errMessage: "running runtime function: wasm error",
		},
	}

	for _, test := range tests {
		var err error
		var extBytes []byte

		if test.ext == "" {
			extBytes = test.extB
		} else {
			extBytes, err = common.HexToBytes(test.ext)
			require.NoError(t, err)
		}

		ins := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
		info, err := ins.PaymentQueryInfo(extBytes)

		if test.errMessage != "" {
			assert.ErrorContains(t, err, test.errMessage)
			continue
		}
		require.NoError(t, err)

		require.NoError(t, err)
		require.NotNil(t, info)
		require.Equal(t, test.expect, info)
	}
}

func newTrieFromPairs(t *testing.T, filename string) *trie.Trie {
	data, err := os.ReadFile(filename)
	require.NoError(t, err)

	rpcPairs := make(map[string]interface{})
	err = json.Unmarshal(data, &rpcPairs)
	require.NoError(t, err)
	pairs := rpcPairs["result"].([]interface{})

	entries := make(map[string]string)
	for _, pair := range pairs {
		pairArr := pair.([]interface{})
		entries[pairArr[0].(string)] = pairArr[1].(string)
	}

	tr, err := trie.LoadFromMap(entries, trie.V0)
	require.NoError(t, err)
	return &tr
}

func newTrieFromScaledPairs(t *testing.T, filename string) *trie.Trie {
	data, err := os.ReadFile(filename)
	require.NoError(t, err)

	decoded := make([][2][]byte, 0)
	err = scale.Unmarshal(data, &decoded)
	require.NoError(t, err)

	trie, err := trie.LoadFromEntries(decoded)
	if err != nil {
		panic(err)
	}

	return trie
}

func TestInstance_TransactionPaymentCallApi_QueryCallInfo(t *testing.T) {
	ins := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	tests := []struct {
		callHex    string
		errMessage string
		expect     *types.RuntimeDispatchInfo
	}{
		{
			// call generated by using palkadot.js/api v9.5.1: api.tx.system.remark("Ed")
			// and removing first byte (encoding) and second byte (unknown)
			callHex: "0x0001084564",
			expect: &types.RuntimeDispatchInfo{
				Weight: 0,
				Class:  0,
				PartialFee: &scale.Uint128{
					Upper: 0,
					Lower: uint64(1500000000),
				},
			},
		},
		{
			// call removing encoding (first byte), polkadot.js/api v9.5.1: api.tx.system.remark("Ed")
			// polkadot.js/api returns error:  RPC-CORE: call(method: Text, data: Bytes, at?: BlockHash):
			// Bytes:: -32000: Client error: Execution failed: Execution aborted due to trap: wasm trap: wasm
			// `unreachable` instruction executed
			callHex:    "0x040001084564",
			errMessage: "running runtime function: wasm error",
		},
		{
			// call without removing any bytes, polkadot.js/api v9.5.1: api.tx.system.remark("Ed test")
			// polkadot.js/api returns error: Error: createType(Call):: findMetaCall: Unable to find Call with index
			// [44, 4]/[44,4]
			callHex:    "0x2c0400011c45642074657374",
			errMessage: "running runtime function: wasm error",
		},
	}

	for _, test := range tests {
		var err error
		var callBytes []byte

		callBytes, err = common.HexToBytes(test.callHex)
		require.NoError(t, err)

		info, err := ins.QueryCallInfo(callBytes)

		if test.errMessage != "" {
			assert.ErrorContains(t, err, test.errMessage)
			continue
		}

		require.NoError(t, err)
		require.NotNil(t, info)
		require.Equal(t, test.expect, info)
	}
}

func TestInstance_TransactionPaymentCallApi_QueryCallFeeDetails(t *testing.T) {
	ins := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	tests := []struct {
		callHex    string
		errMessage string
		expect     *types.FeeDetails
	}{
		{
			// call generated by using palkadot.js/api v9.5.1: api.tx.system.remark("Ed")
			// and removing first byte (encoding) and second byte (unknown)
			callHex: "0x0001084564",
			expect: &types.FeeDetails{
				InclusionFee: types.InclusionFee{
					BaseFee: &scale.Uint128{
						Upper: 0,
						Lower: uint64(256000000001),
					},
					LenFee: &scale.Uint128{
						Upper: 0,
						Lower: uint64(128000000000),
					},
					AdjustedWeightFee: &scale.Uint128{},
				},
				Tip: &scale.Uint128{},
			},
		},
		{
			// call removing encoding (first byte), polkadot.js/api v9.5.1: api.tx.system.remark("Ed")
			// when calling polkadot node (v0.9.29) with polkadot.js/api the node returns error:  RPC-CORE: call(
			// method: Text, data: Bytes, at?: BlockHash): Bytes:: -32000: Client error: Execution failed:
			// Execution aborted due to trap: wasm trap: wasm `unreachable` instruction executed
			callHex:    "0x040001084564",
			errMessage: "running runtime function: wasm error",
		},
		{
			// call without removing any bytes, polkadot.js/api v9.5.1: api.tx.system.remark("Ed test")
			// when calling polkadot (v0.9.29) with polkadot.js/api the node returns error: Error: createType(
			// Call):: findMetaCall: Unable to find Call with index [44, 4]/[44,4]
			callHex:    "0x18040001084564",
			errMessage: "running runtime function: wasm error",
		},
	}

	for _, test := range tests {
		extBytes, err := common.HexToBytes(test.callHex)
		require.NoError(t, err)

		details, err := ins.QueryCallFeeDetails(extBytes)

		if test.errMessage != "" {
			assert.ErrorContains(t, err, test.errMessage)
			continue
		}

		require.NoError(t, err)
		require.NotNil(t, details)
		require.Equal(t, test.expect, details)
	}
}

func TestInstance_GrandpaGenerateKeyOwnershipProof(t *testing.T) {
	instance := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)
	identity := common.MustHexToBytes("0x88dc3417d5058ec4b4503e0c12ea1a0a89be200fe98922423d4334014fa6b0ee")
	identityPubKey, _ := ed25519.NewPublicKey(identity)
	authorityID := identityPubKey.AsBytes()

	opaqueKeyOwnershipProof, err := instance.GrandpaGenerateKeyOwnershipProof(uint64(0), authorityID)
	// Since the input is not valid with respect to the instance, an empty proof is returned
	require.NoError(t, err)
	require.Nil(t, opaqueKeyOwnershipProof)
}

func TestInstance_GrandpaSubmitReportEquivocationUnsignedExtrinsic(t *testing.T) {
	identity := common.MustHexToBytes("0x88dc3417d5058ec4b4503e0c12ea1a0a89be200fe98922423d4334014fa6b0ee")
	identityPubKey, _ := ed25519.NewPublicKey(identity)
	runtime := NewTestInstance(t, runtime.WESTEND_RUNTIME_v0929)

	keyOwnershipProofRaw := types.GrandpaOpaqueKeyOwnershipProof([]byte{64, 138, 252, 29, 127, 102, 189, 129, 207, 47,
		157, 60, 17, 138, 194, 121, 139, 92, 176, 175, 224, 16, 185, 93, 175, 251, 224, 81, 209, 61, 0, 71})
	keyOwnershipProof := scale.MustMarshal(keyOwnershipProofRaw)

	var opaqueKeyOwnershipProof types.GrandpaOpaqueKeyOwnershipProof
	err := scale.Unmarshal(keyOwnershipProof, &opaqueKeyOwnershipProof)
	require.NoError(t, err)

	firstVote := types.GrandpaVote{
		Hash:   common.MustHexToHash("0x4801b8e62d31167d30c893cc1970f6a0e289420282a4b245b75f2c46fb308af1"),
		Number: 10,
	}
	secondVote := types.GrandpaVote{
		Hash:   common.MustHexToHash("0xc314327941fdd924bc67fd72651c40aececd485ca3e878c21e02abb40feae5bd"),
		Number: 10,
	}

	firstSignatureArray := mustHexTo64BArray(t, "0xd7292caacc62504365f179892a7399f233944bf261f8a3f66260f70e0016f2d"+
		"b63922726b015c82dc7131f4730fbec61f71672a571453e51029bfb469070900f")

	secondSignatureArray := mustHexTo64BArray(t, "0xb3c408b74905dfedfffa66f99f16fe8b938fd8df76a92225228a1ca07523"+
		"0b99a2d9e173c561952e1e378b701915ca188d2c832ef92a3fab8e455f32570c0807")

	grandpaEquivocation := types.GrandpaEquivocation{
		RoundNumber:     1,
		ID:              identityPubKey.AsBytes(),
		FirstVote:       firstVote,
		FirstSignature:  firstSignatureArray,
		SecondVote:      secondVote,
		SecondSignature: secondSignatureArray,
	}
	preVoteEquivocation := types.PreVote(grandpaEquivocation)
	equivocationVote := types.NewGrandpaEquivocation()
	err = equivocationVote.Set(preVoteEquivocation)
	require.NoError(t, err)

	equivocationProof := types.GrandpaEquivocationProof{
		SetID:        1,
		Equivocation: *equivocationVote,
	}
	err = runtime.GrandpaSubmitReportEquivocationUnsignedExtrinsic(equivocationProof, opaqueKeyOwnershipProof)
	require.NoError(t, err)
}
