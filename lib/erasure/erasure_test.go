// Copyright 2023 ChainSafe Systems (ON)
// SPDX-License-Identifier: LGPL-3.0-only

package erasure_test

import (
	"errors"
	"testing"

	"github.com/ChainSafe/gossamer/lib/common"
	"github.com/ChainSafe/gossamer/lib/erasure"
	"github.com/stretchr/testify/require"
)

func TestObtainChunks(t *testing.T) {
	// t.Parallel()
	testCases := []struct {
		name              string
		validators        uint
		dataHex           string
		expectedChunksHex []string
		expectedError     error
	}{
		{
			name:              "1_validators",
			validators:        1,
			dataHex:           "0x04020000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			expectedChunksHex: []string{},
			expectedError:     errors.New("Expected at least 2 validators"),
		},
		{
			name:              "2_validators with zero sized data",
			validators:        2,
			dataHex:           "0x",
			expectedChunksHex: []string{},
			expectedError:     erasure.ZeroSizedData,
		},
		{
			name:       "2_validators",
			validators: 2,
			dataHex:    "0x04020000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			expectedChunksHex: []string{
				"0x0402000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
				"0x0402000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			},
		},
		{
			name:       "3_validators",
			validators: 3,
			dataHex:    "0x0802020000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			expectedChunksHex: []string{
				"0x0802020000000000000000000000000000000000000000000000000000000000000000000000000000000000",
				"0x0802020000000000000000000000000000000000000000000000000000000000000000000000000000000000",
				"0x0802020000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			},
		},
		{
			name:       "4_validators",
			validators: 4,
			dataHex:    "0x10020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			expectedChunksHex: []string{
				"0x100202000000000000000000000000000000000000000000",
				"0x020200000000000000000000000000000000000000000000",
				"0x3f60019f0000000000000000000000000000000000000000",
				"0x2d60039f0000000000000000000000000000000000000000",
			},
		},
		{
			name:       "5_validators",
			validators: 5,
			dataHex:    "0x2002020202020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			expectedChunksHex: []string{
				"0x2002020202000000000000000000000000000000000000000000",
				"0x0202020200000000000000000000000000000000000000000000",
				"0x1a670202019f0000000000000000000000000000000000000000",
				"0x38670202039f0000000000000000000000000000000000000000",
				"0x948a020209f70000000000000000000000000000000000000000",
			},
		},
		{
			name:       "6_validators",
			validators: 6,
			dataHex:    "0x40020202020202020202020202020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000", //nolint:lll
			expectedChunksHex: []string{
				"0x400202020202020202000000000000000000000000000000000000000000",
				"0x020202020202020200000000000000000000000000000000000000000000",
				"0xf069020202020202019f0000000000000000000000000000000000000000",
				"0xb269020202020202039f0000000000000000000000000000000000000000",
				"0x211702020202020209f70000000000000000000000000000000000000000",
				"0x63170202020202020bf70000000000000000000000000000000000000000",
			},
		},
		{
			name:       "7_validators",
			validators: 7,
			dataHex:    "0x8002020202020202020202020202020202020202020202020202020202020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000", //nolint:lll
			expectedChunksHex: []string{
				"0x8002020202020202020202020202020202000000000000000000000000000000000000000000",
				"0x0202020202020202020202020202020200000000000000000000000000000000000000000000",
				"0x64740202020202020202020202020202019f0000000000000000000000000000000000000000",
				"0xe6740202020202020202020202020202039f0000000000000000000000000000000000000000",
				"0xf60b020202020202020202020202020209f70000000000000000000000000000000000000000",
				"0x740b02020202020202020202020202020bf70000000000000000000000000000000000000000",
				"0x127d02020202020202020202020202020a680000000000000000000000000000000000000000",
			},
		},
	}

	for _, c := range testCases {
		c := c
		t.Run(c.name, func(t *testing.T) {
			t.Parallel()
			res, err := erasure.ObtainChunks(c.validators, common.MustHexToBytes(c.dataHex))
			require.Equal(t, c.expectedError, err)

			if err == nil {
				var expectedChunks [][]byte
				for _, chunk := range c.expectedChunksHex {
					expectedChunks = append(expectedChunks, common.MustHexToBytes(chunk))
				}
				require.Equal(t, c.validators, uint(len(res)))
				require.Equal(t, expectedChunks, res)
			}
		})
	}

}

func TestReconstruct(t *testing.T) {
	t.Parallel()
	testCases := []struct {
		name            string
		validators      uint
		chunksHex       []string
		expectedDataHex string
		expectedError   error
	}{
		{
			name:            "1_validator_with_zero_sized_chunks",
			validators:      1,
			expectedDataHex: "0x",
			chunksHex:       []string{},
			expectedError:   erasure.ZeroSizedChunks,
		},
		{
			name:            "1_validators",
			validators:      1,
			expectedDataHex: "0x",
			chunksHex: []string{
				"0x0402000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			},
			expectedError: errors.New("Expected at least 2 validators"),
		},
		{
			name:            "2_validators",
			validators:      2,
			expectedDataHex: "0x0402000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			chunksHex: []string{
				"0x0402000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
				"0x0402000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			},
			expectedError: nil,
		},
		{
			name:            "3_validators",
			validators:      3,
			expectedDataHex: "0x0802020000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			chunksHex: []string{
				"0x0802020000000000000000000000000000000000000000000000000000000000000000000000000000000000",
				"0x0802020000000000000000000000000000000000000000000000000000000000000000000000000000000000",
				"0x0802020000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			},
			expectedError: nil,
		},
		{
			name:            "4_validators",
			validators:      4,
			expectedDataHex: "0x100202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000", //nolint:lll
			chunksHex: []string{
				"0x100202000000000000000000000000000000000000000000",
				"0x020200000000000000000000000000000000000000000000",
				"0x3f60019f0000000000000000000000000000000000000000",
				"0x2d60039f0000000000000000000000000000000000000000",
			},
			expectedError: nil,
		},
		{
			name:            "5_validators",
			validators:      5,
			expectedDataHex: "0x20020202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000", //nolint:lll
			chunksHex: []string{
				"0x2002020202000000000000000000000000000000000000000000",
				"0x0202020200000000000000000000000000000000000000000000",
				"0x1a670202019f0000000000000000000000000000000000000000",
				"0x38670202039f0000000000000000000000000000000000000000",
				"0x948a020209f70000000000000000000000000000000000000000",
			},
			expectedError: nil,
		},
		{
			name:            "6_validators",
			validators:      6,
			expectedDataHex: "0x400202020202020202020202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000", //nolint:lll
			chunksHex: []string{
				"0x400202020202020202000000000000000000000000000000000000000000",
				"0x020202020202020200000000000000000000000000000000000000000000",
				"0xf069020202020202019f0000000000000000000000000000000000000000",
				"0xb269020202020202039f0000000000000000000000000000000000000000",
				"0x211702020202020209f70000000000000000000000000000000000000000",
				"0x63170202020202020bf70000000000000000000000000000000000000000",
			},
			expectedError: nil,
		},
		{
			name:            "7_validators",
			validators:      7,
			expectedDataHex: "0x80020202020202020202020202020202020202020202020202020202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000", //nolint:lll
			chunksHex: []string{
				"0x8002020202020202020202020202020202000000000000000000000000000000000000000000",
				"0x0202020202020202020202020202020200000000000000000000000000000000000000000000",
				"0x64740202020202020202020202020202019f0000000000000000000000000000000000000000",
				"0xe6740202020202020202020202020202039f0000000000000000000000000000000000000000",
				"0xf60b020202020202020202020202020209f70000000000000000000000000000000000000000",
				"0x740b02020202020202020202020202020bf70000000000000000000000000000000000000000",
				"0x127d02020202020202020202020202020a680000000000000000000000000000000000000000",
			},
			expectedError: nil,
		},
		{
			name:            "7_validators_with_missing_chunks",
			validators:      7,
			expectedDataHex: "0x80020202020202020202020202020202020202020202020202020202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000", //nolint:lll
			chunksHex: []string{
				"0x8002020202020202020202020202020202000000000000000000000000000000000000000000",
				"0x0202020202020202020202020202020200000000000000000000000000000000000000000000",
				"0x64740202020202020202020202020202019f0000000000000000000000000000000000000000",
				"0xe6740202020202020202020202020202039f0000000000000000000000000000000000000000",
				"0xf60b020202020202020202020202020209f70000000000000000000000000000000000000000",
			},
			expectedError: nil,
		},
	}

	for _, d := range testCases {
		d := d
		t.Run(d.name, func(t *testing.T) {
			t.Parallel()

			var chunks [][]byte
			for _, chunk := range d.chunksHex {
				chunks = append(chunks, common.MustHexToBytes(chunk))
			}

			actualData, err := erasure.Reconstruct(d.validators, chunks)
			require.Equal(t, err, d.expectedError)

			if actualData == nil {
				require.Equal(t, common.MustHexToBytes(d.expectedDataHex), []byte{})
			} else {
				require.Equal(t, common.MustHexToBytes(d.expectedDataHex), actualData)
			}
		})
	}
}
