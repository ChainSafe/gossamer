// Code generated by mockery v2.8.0. DO NOT EDIT.

package keystore

import (
	common "github.com/ChainSafe/gossamer/lib/common"
	crypto "github.com/ChainSafe/gossamer/lib/crypto"

	mock "github.com/stretchr/testify/mock"
)

// MockKeystore is an autogenerated mock type for the Keystore type
type MockKeystore struct {
	mock.Mock
}

// GetKeypair provides a mock function with given fields: pub
func (_m *MockKeystore) GetKeypair(pub crypto.PublicKey) crypto.Keypair {
	ret := _m.Called(pub)

	var r0 crypto.Keypair
	if rf, ok := ret.Get(0).(func(crypto.PublicKey) crypto.Keypair); ok {
		r0 = rf(pub)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Keypair)
		}
	}

	return r0
}

// GetKeypairFromAddress provides a mock function with given fields: pub
func (_m *MockKeystore) GetKeypairFromAddress(pub common.Address) crypto.Keypair {
	ret := _m.Called(pub)

	var r0 crypto.Keypair
	if rf, ok := ret.Get(0).(func(common.Address) crypto.Keypair); ok {
		r0 = rf(pub)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Keypair)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: kp
func (_m *MockKeystore) Insert(kp crypto.Keypair) {
	_m.Called(kp)
}

// Keypairs provides a mock function with given fields:
func (_m *MockKeystore) Keypairs() []crypto.Keypair {
	ret := _m.Called()

	var r0 []crypto.Keypair
	if rf, ok := ret.Get(0).(func() []crypto.Keypair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]crypto.Keypair)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *MockKeystore) Name() Name {
	ret := _m.Called()

	var r0 Name
	if rf, ok := ret.Get(0).(func() Name); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Name)
	}

	return r0
}

// PublicKeys provides a mock function with given fields:
func (_m *MockKeystore) PublicKeys() []crypto.PublicKey {
	ret := _m.Called()

	var r0 []crypto.PublicKey
	if rf, ok := ret.Get(0).(func() []crypto.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]crypto.PublicKey)
		}
	}

	return r0
}

// Size provides a mock function with given fields:
func (_m *MockKeystore) Size() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *MockKeystore) Type() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
